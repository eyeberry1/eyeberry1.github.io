<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>政府是否该支持本土电影</title>
    <link href="/2024/03/17/IELTS/writing/%E5%A4%A7%E4%BD%9C%E6%96%87%E8%8C%83%E6%96%871/"/>
    <url>/2024/03/17/IELTS/writing/%E5%A4%A7%E4%BD%9C%E6%96%87%E8%8C%83%E6%96%871/</url>
    
    <content type="html"><![CDATA[<h1 id="q">Q</h1><p>Many people prefer to watch foreign films rather than locallyproduced films. Why could this be? Should governments give morefinancial support to local film industries?</p><h1 id="a">A</h1><p>​ It is true that foreign films are more popular in many countriesthan domestically produced films. There could be several reasons whythis is the case, and I believe that governments should promote localfilm-making by subsidising the industry.</p><p>​ There are various reasons why many people find foreign films moreenjoyable than the films produced in their own countries. Firstly, theestablished film industries in certain countries have huge budgets foraction, special effects and to shoot scenes in spectacular locations.Hollywood blockbusters like ‘Avatar’ or the James Bond films areexamples of such productions and the global appeal that they have.Another reason why these big-budget films are so successful is that theyoften star the most famous actors and actresses, and they are made bythe most accomplished producers and directors. The poor quality,low-budget filmmaking in many countries suffers in comparison.</p><p>​ In my view, governments should support local film industriesfinancially. In every country, there may be talented amateur film-makerswho just need to be given the opportunity to prove themselves. Tocompete with big-budget productions from overseas, these people needmoney to pay for film crews, actors and a host of other costs related toproducing high-quality films. If governments did help with these costs,they would see an increase in employment in the film industry, incomefrom film sales, and perhaps even a rise in tourist numbers. NewZealand, for example, has seen an increase in tourism related to the'Lord of the Rings' films, which were partly funded by governmentsubsidies.</p><p>​ In conclusion, I believe that increased financial support couldhelp to raise the quality of locally made films and allow them tocompete with the foreign productions that currently dominate themarket.</p>]]></content>
    
    
    <categories>
      
      <category>IELTS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>writing task2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>inverse design of grating coupler -- process presentation</title>
    <link href="/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/"/>
    <url>/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/</url>
    
    <content type="html"><![CDATA[<h1 id="preliminary_design_lms">preliminary_design_lms</h1><p>修改为所需的结构</p><p>其次需要修改preliminary_design_lsf内的参数</p><p>可修改的参数有</p><ol type="1"><li>入射角度</li><li>波导的厚度 waveguide_thickness</li><li>蚀刻深度 etch(主要)</li><li>初始的占空比(主要)</li><li>材料的折射率</li><li>光栅开始的起始位置</li><li>变迹系数R</li></ol><p><img src="/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/image-20221020195148662.png"></p><h1 id="base.fsp">base.fsp</h1><ol type="1"><li>扫描光源位置的设置</li><li>光源的设置</li><li>基本结构的设置</li><li>base.lsf参数修改</li></ol><p><img src="/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/image-20221020195457082.png"></p><p>可以通过中断python的过程在base文件中加入波导结构</p><h1 id="apodized.fsp">apodized.fsp</h1><p>运行apodized.py的脚本，将波导结构确定保存到apodized.fsp内</p><h1 id="final.fsp">final.fsp</h1><p>运行etch.py的脚本</p><p><img src="/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/image-20221020201904915.png"></p><p><img src="/2022/10/20/Lumerical/inverse%20design%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA(%E8%AF%A6%E7%BB%86)/image-20221020201933165.png"></p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>inverse design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>柯西公式</title>
    <link href="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/"/>
    <url>/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单连通区域">单连通区域</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005165641315.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170033447.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170047759.png"></p><h1 id="复连通区域">复连通区域</h1><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170208384.png" class title="image-20221005170208384"><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170243172.png"></p><h1 id="例题">例题</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170306124.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005170323448.png"></p><h1 id="无界区域内的柯西公式">无界区域内的柯西公式</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171259908.png"></p><h1 id="高阶导数">高阶导数</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171357924.png"></p><h1 id="例题-1">例题</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171426167.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171437970.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171543539.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%85%AC%E5%BC%8F/image-20221005171554442.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>柯西公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不定积分</title>
    <link href="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    <url>/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/image-20221005165314107.png"></p><h1 id="例题">例题</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/image-20221005165334262.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/image-20221005165350586.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/image-20221005165402320.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>不定积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>柯西定理</title>
    <link href="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/"/>
    <url>/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/image-20221005163329407.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/image-20221005163606536.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/image-20221005163617971.png"></p><h1 id="重要例题">重要例题</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E6%9F%AF%E8%A5%BF%E5%AE%9A%E7%90%86/image-20221005163847706.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>柯西定理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复变函数--积分</title>
    <link href="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/"/>
    <url>/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="计算方法一">计算方法一</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/image-20221005161255287.png"></p><h1 id="计算方法二">计算方法二</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/image-20221005161327231.png"></p><h1 id="积分性质">积分性质</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/image-20221005161347460.png"></p><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/image-20221005161403141.png"></p><h1 id="例题">例题</h1><p><img src="/2022/10/05/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86/image-20221005163217039.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复变函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/04/Lumerical/%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/10/04/Lumerical/%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>title: 参数设置记录</p><p>categories: Lumerical</p><p>tags:</p><ul><li>Lumerical</li><li>Grating Coupler</li></ul><p>入射角度固定为15°</p><p>刻蚀深度固定为0.8um</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>汇率</title>
    <link href="/2022/10/01/stock%20stares/%E6%B1%87%E7%8E%87/"/>
    <url>/2022/10/01/stock%20stares/%E6%B1%87%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h1 id="定制汇率">定制汇率</h1><h2 id="购买力平价理论">购买力平价理论</h2><p>一篮子商品的价格进行加权平均</p><h2 id="金平价">金平价</h2><p>货币中的金属价值</p><h2 id="进出口的贸易顺差和逆差">进出口的贸易顺差和逆差</h2><p>影响汇率</p><p>货币政策的自主和依赖</p><p>金融市场的开放与封闭</p><h1 id="蒙代尔不可能三角形">蒙代尔不可能三角形</h1><p>资本自由流动</p><p>货币政策独立</p><p>汇率的固定</p><p>三选二</p><p>中国是选的后两个</p><p>泰国的金融危机</p>]]></content>
    
    
    <categories>
      
      <category>汇率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>薛定谔方程</title>
    <link href="/2022/09/12/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W2/%E8%96%9B%E5%AE%9A%E8%B0%94%E6%96%B9%E7%A8%8B/"/>
    <url>/2022/09/12/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W2/%E8%96%9B%E5%AE%9A%E8%B0%94%E6%96%B9%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>量子力学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>薛定谔方程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多值函数</title>
    <link href="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/"/>
    <url>/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="初等解析函数举例">初等解析函数举例</h1><h2 id="单值函数">单值函数</h2><h3 id="整数幂函数zn">整数幂函数<span class="math inline">\(Z^n\)</span></h3><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911161948683.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162213590.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162227062.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162446741.png"></p><h3 id="指数函数ez">指数函数e^z</h3><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162555317.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162909477.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911162954847.png"></p><h3 id="三角函数">三角函数</h3><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163025858.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163041092.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163158644.png"></p><h3 id="双曲函数">双曲函数</h3><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163230953.png"></p><h1 id="多值函数">多值函数</h1><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163307910.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163656518.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911163721013.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911164229199.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911164258271.png"></p><h2 id="根式函数">根式函数</h2><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911164335672.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911164400613.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911164416786.png"></p><p>黎曼面</p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911165541998.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911165613906.png"></p><h2 id="对数函数">对数函数</h2><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911165700752.png"></p><p><img src="/2022/09/11/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%9A%E5%80%BC%E5%87%BD%E6%95%B0/image-20220911165718944.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多值函数</tag>
      
      <tag>数学物理方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子力学第一章作业</title>
    <link href="/2022/09/11/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/09/11/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="q1">Q1</h1><p>波长为λ= 1Å的X光，求光子的质量?</p><p><strong>解:</strong></p><p>根据德布罗意波长公式 <span class="math display">\[\lambda=\frac{h}{\sqrt{2Em}}\tag{1}\]</span></p><p><span class="math display">\[\begin{align}E&amp;=hv\\&amp;=h\frac{c}{\lambda}\tag{2}\end{align}\]</span></p><p>综合(1)式(2)式 <span class="math display">\[\begin{align}\lambda&amp;=\frac{h}{\sqrt{2Em}}\\&amp;=\frac{h}{\sqrt{2hvm}}\\m&amp;=\frac{h}{2v\lambda^2}\\&amp;=\frac{h}{2c\lambda}\\&amp;=\frac{6.63\times10^{-34}}{2\times2.99792\times10^8\times1\times10^{-10}}kg\\&amp;=1.106\times10^{-32}kg\end{align}\]</span></p><h1 id="q2.">Q2.</h1><p>某金属产生光电效应的红限频率为v0 ，当用频率为v(v &gt;v0)的单色光照射该金属时，求从金属中逸出的光电子(质量为m)的德布罗意波长?</p><p><strong>解:</strong></p><p>根据红限频率为<span class="math inline">\(v_0\)</span> <span class="math display">\[\text{束缚能}\ \ \  \ \ \ \ \ \ \ \ A=hv_0\tag{1}\]</span> 由光电效应方程 <span class="math display">\[E_k=hv-A\tag{2}\]</span> 根据 <span class="math display">\[p^2=2mE_k\tag{3}\]</span> 德布罗意波长 <span class="math display">\[\lambda=\frac{h}{p}\tag{4}\]</span> 由(1)(2)(3)(4)式可得 <span class="math display">\[\lambda=\sqrt{\frac{h}{2m(v-v_0)}}\]</span></p><h1 id="q3.">Q3.</h1><p>两个光子在一定条件下可以转化成正负电子对，如果两光子能量相等，求要实现转化的光子波长最大是多少?</p><p><strong>解:</strong></p><p>根据能动量关系: <span class="math display">\[E^2=(m_ec^2)^2+(p_ec)^2\]</span> 为了使转化的光子波长最大，则要求产生的电子对的动量为0</p><p>由质能方程 <span class="math display">\[E=hv=m_ec^2\tag{1}\]</span> 光子的能动量关系 <span class="math display">\[E=pc=\frac{hc}{\lambda}\tag{2}\]</span> 综合(1)(2)式可得 <span class="math display">\[\begin{align}\lambda&amp;=\frac{h}{m_ec}\\&amp;=\frac{6.63\times10^{-34}J\cdot s}{0.911\times 10^{-30}Kg\times3\times10^8m\cdot s^{-1}}\\&amp;=2.426\times 10^{-12}m\end{align}\]</span></p><h1 id="q4.">Q4.</h1><p>按玻尔理论，当电子轰击基态氢原子时，如果仅产生一条光谱线，求该电子的能量范围?</p><p><strong>解:</strong></p><p>根据题意,电子的能量能够满足一级到二级轨道的能量而不满足一级到三级轨道的能量</p><p>因此 <span class="math display">\[\begin{align}E&amp;=T+V\\&amp;=-\frac{k^2me^4}{2n^2\hbar^2}\\&amp;=-\frac{me^4}{2\varepsilon^2h^2}\cdot \frac{1}{n^2}\\&amp;=E_n\ \ \ \ \ \ \ \ \ &amp;\text{第n轨道电子总能量}\end{align}\]</span> 电子能量范围 <span class="math display">\[E_2-E_1&lt;E_e&lt;E_3-E_1\]</span> 即 <span class="math display">\[8.2275\times10^6J&lt;E_e&lt;9.59875\times10^6J\]</span></p><h1 id="q4.-1">Q4.</h1><p>射至光阴极上的光，其波长从4000Å变至3000Å，求发射出的光电子的遏制电压变化?</p><p><strong>解:</strong> <span class="math display">\[\begin{align}\Delta Ue&amp;=\frac{hc}{\lambda_1}-\frac{hc}{\lambda_2}\\\Delta U&amp;=\frac{hc}{e}(\frac{1}{\lambda_1}-\frac{1}{\lambda_2})\\&amp;=\frac{6.63\times 10^{-34}\times 3\times10^8}{1.6\times10^{-19}}(\frac{1}{3\times10^{-7}}-\frac{1}{4\times10^{-7}})\\&amp;=1.04V\end{align}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>量子力学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>量子力学作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>德布罗意波</title>
    <link href="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/"/>
    <url>/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="德布罗意关系">德布罗意关系</h1><p><span class="math display">\[E=hv\rightarrow v=E/h\]</span></p><p><span class="math display">\[P=h/\lambda\rightarrow \lambda=h/p\]</span></p><h1 id="德布罗意波">德布罗意波</h1><p>物质波不是通常的波，它产生于任何运动的物质，具有客观实在性。它能在绝对真空中传播，因此不是机械波；它产生于所有的物体，包括不带电的物质，因此不是电磁波。</p><h2 id="波函数重点">波函数(重点)</h2><p>沿单位矢量 n 方向传播频率ω和波矢R的平面波可表示为: <span class="math display">\[\psi=A\cos{(\vec k\cdot\vec r-\omega t)}=Ae^{i(\vec k\cdot\vec r-\omega t)}\]</span></p><p><span class="math display">\[\vec k =\frac{2\pi}{\lambda}\vec n,\ \ \omega=2\pi v\]</span></p><p>由于 <span class="math display">\[\vec k=\frac{\vec p}{\hbar},\ \ \ \omega=\frac{E}{\hbar}\]</span></p><p><span class="math display">\[\psi=Ae^{i(\frac{\vec P}{\hbar}\cdot\vecr-\frac{E}{\hbar}t)}=Ae^{\frac{i}{\hbar}(\vec P\vec r-Et)}\]</span></p><h2 id="德布罗意波长">德布罗意波长</h2><p>非相对论条件下<span class="math inline">\(E=\frac{P^2}{2m}\)</span><span class="math display">\[\begin{align}P&amp;=\frac{h}{\lambda}\\\lambda&amp;=\frac{h}{p}=\frac{h}{\sqrt{2mE}}\end{align}\]</span> <img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234032219.png"></p><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234122644.png"></p><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234048208.png"></p><h1 id="驻波条件">驻波条件</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234501780.png"></p><h1 id="德布罗意波实验证明">德布罗意波实验证明</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234530270.png"></p><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234545474.png"></p><h1 id="常用物理常数">常用物理常数</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E7%B2%92%E5%AD%90%E7%9A%84%E6%B3%A2%E7%B2%92%E4%BA%8C%E8%B1%A1%E6%80%A7/image-20220910234603153.png"></p>]]></content>
    
    
    <categories>
      
      <category>量子力学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>德布罗意波</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玻尔理论</title>
    <link href="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/"/>
    <url>/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="玻尔假定">玻尔假定</h1><ol type="1"><li>原子具有能量不连续的定态的概念</li><li>量子跃迁的概念</li></ol><p>量子化条件</p><ol type="1"><li>电子的角动量<span class="math inline">\(L\)</span>只能取<span class="math inline">\(\hbar\)</span>的整数倍</li></ol><p><span class="math display">\[\begin{align}L&amp;=n\hbar\\\text{其中},n&amp;=1,2,3,...\end{align}\]</span></p><ol start="2" type="1"><li>频率条件 <span class="math display">\[V_{mn}=[E_n-E_m]/h\]</span></li></ol><h1 id="氢原子线光谱的解释">氢原子线光谱的解释</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/image-20220910215425546.png"></p><p>库仑定律 <span class="math display">\[F_c=\frac{mv^2}{r}=\frac{ke^2}{r^2}\tag{1}\]</span> 由<span class="math inline">\((1)\)</span>式化简可得 <span class="math display">\[v^2=\frac{ke^2}{mr}\tag{2}\]</span></p><p>角动量 <span class="math display">\[L=|L\times r|=rmv=n\hbar\tag{3}\]</span> 联立<span class="math inline">\((1)\text{式}(2)\)</span>式消去<span class="math inline">\(v^2\)</span> <span class="math display">\[r=\frac{n^2\hbar^2}{kme^2}\tag{4}\]</span> 当<span class="math inline">\(n=1\)</span>时，得到 <span class="math display">\[r_0=\frac{\hbar^2}{kme^2}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\text{第一玻尔轨道半径}\]</span> <img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/image-20220910223700929.png"></p><p>电子的能量 <span class="math display">\[\begin{align}T&amp;为电子动能\ \ \ \ \ \ \ \ \  V为电子势能\\E&amp;=T+V\\&amp;=\frac{1}{2}mv^2-\frac{ke^2}{r}\ \ \ \ \ &amp;\text{代入(1)式}\\&amp;=\frac{1}{2}m\frac{ke^2}{mr}-\frac{ke^2}{r}\\&amp;=-\frac{ke^2}{2r}\ \ \ \ \ &amp;\text{代入(4)式}\\&amp;=-\frac{k^2me^4}{2n^2\hbar^2}\\&amp;=E_n\ \ \ \ \ \ \ \ \ &amp;\text{第n轨道电子总能量}\end{align}\]</span> 根据量子跃迁概念 <span class="math display">\[\begin{align}v=&amp;\frac{[E_n-E_m]}{h}\\&amp;=\frac{k^2}{2\pi\hbar}[-\frac{me^4}{2n^2\hbar^2}+\frac{k^2me^4}{2m^2\hbar^2}]\\&amp;=-\frac{k^2me^4}{4\pi\hbar^3}[\frac{1}{m^2}-\frac{1}{n^2}]\\&amp;=R_Hc[\frac{1}{m^2}-\frac{1}{n^2}]\\\end{align}\]</span> 得Rydberg 常数 <span class="math display">\[R_H=\frac{k^2me^4}{4\pi\hbar^3c}\]</span> <img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/image-20220910231820309.png"></p><h1 id="量子化条件的推广">量子化条件的推广</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/image-20220910231853258.png"></p><h1 id="玻尔量子论的局限性">玻尔量子论的局限性</h1><p><img src="/2022/09/10/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84%E7%9A%84%E7%8E%BB%E5%B0%94%E7%90%86%E8%AE%BA/image-20220910231911566.png"></p>]]></content>
    
    
    <categories>
      
      <category>量子力学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>波尔理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子力学基础</title>
    <link href="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="普朗克黑体辐射定律">普朗克黑体辐射定律</h1><h2 id="研究内容">研究内容</h2><p>辐射与周围物质处于平衡时能量分布规律。</p><p>黑体：能够全部吸收而不反射投射其上面的辐射称为绝对黑体，简称黑体。</p><p>黑体辐射： 由这样的空腔小孔发出的辐射就称为黑体辐射</p><p>平衡辐射的性质</p><p>平衡辐射：单位面积上，单位时间内辐射与吸收的能量相等。</p><p>平衡辐射时，辐射能量只与黑体的绝对温度有关。</p><h2 id="两个假定">两个假定</h2><p>（1）原子的性能和谐振子一样，以给定的频率 v 振荡；</p><p>（2）黑体只能以 E = hv 为能量单位不连续的发射和吸收辐射能量，而不是像经典理论所要求的那样可以连续的发射和吸收辐射能量</p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908184643327.png"> <span class="math display">\[\rho =\frac{8\pi hv^3}{C^3}(\frac {1}{e^{\frac {hv}{KT}}-1})\]</span></p><h2 id="三点讨论">三点讨论</h2><p>当频率很大时，普朗克定律转化为维恩（Wien）公式。</p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908185425176.png"></p><p>当频率很小时，普朗克定律转化为瑞利-金斯公式</p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908185602073.png"></p><h1 id="光量子和光电效应理论">光量子和光电效应理论</h1><h2 id="光子概念">光子概念</h2><p>光不仅是是电磁波，而且还是由一个个粒子组成。</p><p>由相对论光的动量与能量关系$P=E/C=hv/C=h/λ$提出了光子动量P与辐射波长的关系。</p><h2 id="光电效应理论">光电效应理论</h2><p><span class="math display">\[\frac{1}{2}\mu V^2=hv-A\]</span></p><p>两个典型特点</p><ol type="1"><li>临界频率<span class="math inline">\(v_0\)</span></li><li>光电子动能只决定于光子的频率,光的强度只决定光子的数目,从而决定光电子的数目</li></ol><h2 id="光子动量">光子动量</h2><p><span class="math inline">\(m_0\)</span>和<span class="math inline">\(\mu_0\)</span>都是粒子质量</p><p>速度为V运动的粒子的能量: <span class="math display">\[E=\frac{\mu_0C^2}{\sqrt{1-\frac{V^2}{C^2}}} (1)\]</span> <span class="math inline">\(\mu_0\)</span>是粒子的静止质量</p><p><span class="math inline">\(m_e=\frac{m_0}{\sqrt{1-\frac{V^2}{C^2}}}\)</span>，静止质量和运动时的质量的关系</p><p>相对论中能量动量关系式： <span class="math display">\[E_e^2=m_0^2C^4+P_e^2C^2(2)\]</span>对于光子，速度为光速，为了使（1）式有意义，光子的静止质量为0</p><p>因此<strong>光子的能动量关系</strong>： <span class="math display">\[E=pC\]</span></p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908200309264.png"></p><p>光子能量、动量关系式： <span class="math display">\[\left\{               \begin{array}{**lr**}               E=hv=\hbar\omega\\             \vec p=\frac{E}{c}\vec n=\frac{hv}{c}\vecn=\frac{h}{\lambda}\vec n=\frac{\hbar}{\bar\lambda}\vec n=\hbar\vec k             \end{array}  \right.\]</span></p><p><span class="math display">\[\hbar=\frac{h}{2\pi}\]</span></p><p><span class="math display">\[\bar \lambda=\frac{\lambda}{2\pi}\]</span></p><p><span class="math display">\[波矢\vec k=\frac{\vec n}{\bar \lambda}\]</span></p><h1 id="相对论中的动能公式和经典力学的公式的统一">相对论中的动能公式和经典力学的公式的统一</h1><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908200504330.png"></p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908200603773.png"></p><h1 id="康普顿效应">康普顿效应</h1><p>X射线被轻元素如白蜡、石墨中的电子散射后出现的效应。该效应 有如下 2个特点：</p><ol type="1"><li>散射光中，除了原来X光的波长λ外，增加了一个新的波长为<span class="math inline">\(λ&#39;\)</span>的X光，且<span class="math inline">\(λ&#39; &gt;λ\)</span>；</li><li>波长增量 $Δλ=λ’ –λ$随散射角增大而增大。这一现象称为康普顿效应。</li></ol><p>把 X射线被电子散射的过程看成是光子与电子的碰撞过程</p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908200858883.png"></p><h2 id="康普顿效应证明">康普顿效应证明</h2><p>证明:</p><figure><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/test2.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p><span class="math display">\[\Delta \lambda = \lambda − \lambda_0 = 2\lambda_𝒄 \sin^2 {\frac{𝝋}{2} }\]</span></p><p><span class="math display">\[\lambda_0:光子入射波长\]</span></p><p><span class="math display">\[\lambda:光子散射波长\]</span></p><p><span class="math display">\[\lambda_c:电子的康普顿波长\]</span></p><p><span class="math display">\[φ:光子的散射角\]</span></p><p>根据能量守恒定律: <span class="math display">\[h(v_0-v)+m_0c^2=m_ec^2\tag{1}\]</span> <span class="math inline">\(m_0\)</span> :电子的绝对静止质量；<span class="math inline">\(m_e\)</span>:电子和光子碰撞后的电子质量；</p><p><span class="math inline">\(v_0\)</span>是光子入射频率;<span class="math inline">\(v\)</span>是光子散射频率</p><p>根据动量守恒定律:(余弦定理) <span class="math display">\[\vec P_e=\vec P_0-\vec P\tag{2}\]</span> 电子的能动量关系(用到了质能方程) <span class="math display">\[(m_ec^2)^2=(m_0c^2)^2+(\vec P_ec)^2 \tag{3}\]</span> 由<span class="math inline">\((2)\)</span>式可以推得:</p><p><img src="/2022/09/08/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/W1/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/image-20220908210820317.png"> <span class="math display">\[P_e^2=P_0^2+P^2-2P_0P\cos \varphi\tag{4}\]</span> 根据光子的能动量关系 <span class="math display">\[Pc=E=hv\tag{5}\]</span> 将<span class="math inline">\((5)\)</span>式代入<span class="math inline">\((4)\)</span>式中得到 <span class="math display">\[P_e^2=(\frac{hv_0}{c})^2+(\frac{hv}{c})^2-2(\frac{hv_0}{c})(\frac{hv}{c})\cos\varphi\tag{6}\]</span> 将(6)式和(1)式代入(3)式得到 <span class="math display">\[(h(v_0-v)+m_0c^2)^2=(m_0c^2)^2+\\((\frac{hv_0}{c})^2+(\frac{hv}{c})^2-2(\frac{hv_0}{c})(\frac{hv}{c})\cos\varphi)c^2\]</span> 展开化简可得 <span class="math display">\[(\frac{1}{v}-\frac{1}{v_0})=\frac{h}{m_0c^2}(1-\cos \varphi)\]</span></p><p><span class="math display">\[\lambda-\lambda_0=\frac{2h}{m_0c}\sin^2 {\frac{\varphi}{2}}\]</span></p><p><strong>证毕</strong></p><h2 id="总结">总结</h2><p><span class="math display">\[\Delta \lambda = \lambda − \lambda_0 = 2\lambda_𝒄 \sin^2 {\frac{𝝋}{2} }\]</span></p><p>电子的康普顿波长 <span class="math display">\[\lambda_c=\frac{h}{m_0c}=\frac{2\pi\hbar }{m_0c}\]</span> 其中 <span class="math display">\[\hbar=\frac{h}{2\pi}\]</span></p><p><span class="math display">\[\bar \lambda=\frac{\lambda}{2\pi}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>量子力学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑体辐射\光电效应\康普顿散射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复变函数--解析函数</title>
    <link href="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/"/>
    <url>/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="解析函数的概念">解析函数的概念</h1><p>定义：若函数<span class="math inline">\(f(z)\)</span>在点<span class="math inline">\(z_0\)</span>的某邻域内处处可导，则称函数<span class="math inline">\(f(z)\)</span>在点<span class="math inline">\(z_0\)</span>处解析;又若<span class="math inline">\(f(z)\)</span>在区域<span class="math inline">\(B\)</span>内的每一点解析，则称<span class="math inline">\(f(z)\)</span>在区域<span class="math inline">\(B\)</span>内是解析函数。</p><h2 id="解析与可导不等价">解析与可导不等价</h2><p><strong>解析和可导不等价</strong>:函数在某点解析，则必在该点可导；反之不然</p><p>在区域<span class="math inline">\(B\)</span>内的解析函数必在<span class="math inline">\(B\)</span>内可导</p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220907231357126.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220907231509299.png"></p><h2 id="函数的奇点">函数的奇点</h2><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908114757936.png"></p><h2 id="解析的充分必要条件">解析的充分必要条件</h2><p>设函数<span class="math inline">\(f(z)=u(x,y)+iv(x,y)\)</span>在区域<span class="math inline">\(B\)</span>内解析当且仅当：</p><p>(1)实部和虚部在<span class="math inline">\(B\)</span>内可导（可微）；</p><p>(2)实部和虚部在<span class="math inline">\(B\)</span>内每一点满足柯西—黎曼条件</p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908115157586.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908115256231.png"></p><h1 id="解析函数与调和函数的关系">解析函数与调和函数的关系</h1><h2 id="概念">概念</h2><p><strong>调和函数</strong>:如果二元函数<span class="math inline">\(f(x,y)\)</span>在区域<span class="math inline">\(B\)</span>内有二阶连续的偏导数,而且满足拉普拉斯方程:<span class="math display">\[\Delta f=\frac{\partial^2 f}{\partial x^2}+\frac{\partial^2 f}{\partialy^2}\]</span> 则称<span class="math inline">\(f(x,y)\)</span>为区域<span class="math inline">\(B\)</span>内的调和函数,其中<span class="math inline">\(\Delta=\frac{\partial^2 }{\partialx^2}+\frac{\partial^2 }{\partial y^2}\)</span>称为拉普拉斯算符。</p><p><strong>共轭调和函数</strong>：若两实函数<span class="math inline">\(u(x,y)\)</span>以及<span class="math inline">\(v(x,y)\)</span>均为区域<span class="math inline">\(B\)</span>内的调和函数，且满足C-R条件，即 <span class="math display">\[\frac {\partial u}{\partial x}=\frac{\partial v}{\partial y}，\\\frac{\partial u}{\partial y}=-\frac{\partial v}{\partial x}\]</span> 则称<span class="math inline">\(u(x,y)\)</span>为<span class="math inline">\(v(x,y)\)</span>的共轭调和函数</p><h2 id="性质一">性质一</h2><p>任何在区域<span class="math inline">\(B\)</span>内的解析的函数<span class="math inline">\(f(z)=u(x,y)+iv(x,y)\)</span>其实部和虚部都是<span class="math inline">\(B\)</span>内的<strong>调和函数</strong>,且虚部是实部的<strong>共轭调和函数</strong>.</p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908131719504.png"></p><h2 id="性质二">性质二</h2><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908131822765.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908131848146.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908132656620.png"></p><h1 id="解析函数的构造方法">解析函数的构造方法</h1><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908132824804.png"></p><h2 id="例题">例题</h2><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908132904312.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908162208281.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908153718134.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908164605311.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908164717542.png"></p><h1 id="解析函数的构造方法极坐标">解析函数的构造方法(极坐标)</h1><h2 id="例题-1">例题</h2><p>已知解析函数<span class="math inline">\(f(z)\)</span>的虚部<span class="math inline">\(v(x,y)=\sqrt{-x+\sqrt{x^2+y^2}}\)</span>求实部<span class="math inline">\(u(x,y)\)</span>和这个解析函数<span class="math inline">\(f(z)\)</span></p><h1 id="解析函数的保角性">解析函数的保角性</h1><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908171444096.png"></p><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908182346304.png"></p><h1 id="保角性证明">保角性证明</h1><p><img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908172158707.png"></p><h1 id="解析函数的性质">解析函数的性质</h1><ol type="1"><li>共轭性</li><li>调和性</li><li>保角性<img src="/2022/09/07/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0/image-20220908172255914.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复变函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复变函数--导数</title>
    <link href="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/"/>
    <url>/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="函数的连续性">函数的连续性</h1><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903182901466.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183023966.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183059925.png"></p><h2 id="例题">例题</h2><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183126442.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183154130.png"></p><h1 id="求导公式">求导公式</h1><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183309708.png"></p><h1 id="柯西-黎曼方程复变函数可导的必要条件">柯西-黎曼方程(复变函数可导的必要条件)</h1><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183347725.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183438974.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183456137.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183509132.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183525377.png"></p><h1 id="可导的充分必要条件">可导的充分必要条件</h1><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183552008.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183604970.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%BC%E6%95%B0/image-20220903183622220.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复变函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复变函数</title>
    <link href="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    <url>/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1><p>邻域</p><p>内点外点边界点</p><p>区域</p><p>区域边界方向</p><p>单连通区域和复连通区域</p><p>联通阶数</p><p>聚点</p><p>单值函数和多值函数</p><h1 id="常见复变函数">常见复变函数</h1><h2 id="sin-z和cos-z"><span class="math inline">\(\sin z\)</span>和<span class="math inline">\(\cos z\)</span></h2><p><span class="math display">\[e^z=e^{x+iy}=e^x(\cos y+i\sin y)\]</span></p><p><span class="math display">\[\sin z=\frac{1}{2i}(e^{iz}-e^{-iz})\]</span></p><p><span class="math display">\[\cos z=\frac{1}{2}(e^{iz}+e^{-iz})\]</span></p><p>sinz和cosz的模可以大于1,<span class="math inline">\(2\pi\)</span>为周期 <span class="math display">\[\begin{aligned}&amp;|\sin z|=\frac{1}{2} \sqrt{\left(e^{2 y}+e^{-2y}\right)+2\left(\sin ^2 x-\cos ^2 x\right)}\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}&amp;|\cos z|=\frac{1}{2} \sqrt{\left(e^{2 y}+e^{-2y}\right)+2\left(\cos ^2 x-\sin ^2 x\right)}\end{aligned}\]</span></p><h2 id="operatornameshz和operatornamechz"><span class="math inline">\(\operatorname{sh}z\)</span>和<span class="math inline">\(\operatorname{ch}z\)</span></h2><p><span class="math display">\[\operatorname{sh}z=\frac {1}{2}(e^z-e^{-z})\]</span></p><p><span class="math display">\[\operatorname{ch}x=\frac {1}{2}(e^z+e^{-z})\]</span></p><p><span class="math inline">\(\operatorname{sh}x\)</span>,<span class="math inline">\(\operatorname{ch}x\)</span>,<span class="math inline">\(e^z\)</span>具有纯虚数周期<span class="math inline">\(2\pi i\)</span></p><h2 id="ln-z和ez"><span class="math inline">\(\ln z\)</span>和<span class="math inline">\(e^z\)</span></h2><p><span class="math display">\[\ln z=\ln \left(|z| e^{i A r g z}\right)=\ln |z|+i \operatorname{Arg}z\\\]</span></p><p><span class="math display">\[z^s=e^{s \ln z} ( s 为复数 )\]</span></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903162858234.png"></p><h1 id="例题">例题</h1><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163342906.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163434188.png"></p><h1 id="复变函数的极限">复变函数的极限</h1><p>类似二元函数的极限</p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163535041.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163548638.png"></p><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163559831.png"></p><h2 id="极限例题">极限例题</h2><p><img src="/2022/09/03/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/image-20220903163628447.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复变函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复变函数--基本运算</title>
    <link href="/2022/09/02/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E6%95%B0%E4%B8%8E%E5%A4%8D%E5%8F%98%E8%BF%90%E7%AE%97/"/>
    <url>/2022/09/02/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E6%95%B0%E4%B8%8E%E5%A4%8D%E5%8F%98%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="复数基本概念">复数基本概念</h1><p><span class="math display">\[z=x+iy\]</span></p><p>实部记作<span class="math inline">\(Rez=x\)</span>,虚部记作<span class="math inline">\(Imz=y\)</span></p><p><strong>复数无法比较大小</strong>，但复数可以相等</p><p>共轭复数表示为 <span class="math display">\[z^*=x-iy\]</span></p><h2 id="三种表示方法">三种表示方法</h2><h3 id="代数式">代数式</h3><p><span class="math display">\[z=x+iy\]</span></p><h3 id="三角式">三角式</h3><p><span class="math display">\[z=x+iy=\rho cos\varphi+i\rho sin\varphi\]</span></p><p><span class="math display">\[\lvert {z}\rvert=\rho=\sqrt{x^2+y^2}\]</span></p><p>复数的辐角</p><p><span class="math inline">\(Argz=\varphi+2k\pi\)</span></p><p><strong>z=0时,辐角不能确定</strong></p><p>辐角主值的定义:把满足<span class="math inline">\(0\leq\varphi\textless 2\pi\)</span>的<span class="math inline">\(\varphi\)</span>称为<span class="math inline">\(Arg z\)</span>的主值， 记作<span class="math inline">\(\varphi=argz\)</span></p><h3 id="指数式">指数式</h3><p><span class="math display">\[z=\rho e^{i\varphi}\]</span></p><h2 id="复数基本运算">复数基本运算</h2><h3 id="加减法">加减法</h3><p>三角形两边之和大于第三边 <span class="math display">\[\lvert {z_1+z_2}\rvert \leq\lvert {z1}\rvert+\lvert {z_2}\rvert\]</span></p><h3 id="乘法">乘法</h3><p>两个复数相乘等于它们 的模相乘，幅角相加 <span class="math display">\[z_1z_2=\rho_1\rho_2[cos(\varphi_1+\varphi_2)+isin(\varphi_1+\varphi_2)]\\=\rho_1\rho_2e^{[i(\varphi_1+\varphi_2)]}\]</span></p><h3 id="乘方">乘方</h3><p>可由乘法规则得到，用 个 相乘 <span class="math display">\[z^n=\rho^ne^{in\varphi}\]</span> 棣莫弗(De Moivre)公式 <span class="math display">\[(\cos \varphi+i\sin \varphi)^n=\cos n\varphi+i\sin n\varphi\]</span></p><h3 id="除法">除法</h3><p><span class="math display">\[\frac{z_1}{z_2}=\frac{\rho_1}{\rho_2} e^{i(\varphi_1-\varphi_2)}\]</span></p><h3 id="n次根式">n次根式</h3><p><span class="math display">\[\sqrt[n]{z}=\sqrt[n]{\rho}(\cos\frac{\varphi}{n}+i\sin\frac{\varphi}{n})=\sqrt[n]{\rho}e^{i\frac{\varphi}{n}}\]</span></p><h3 id="共轭复数计算">共轭复数计算</h3><p><span class="math display">\[zz^*=\lvert {z}\rvert^2\]</span></p><p><span class="math display">\[z^2=\lvert {z}\rvert^2=\lvert {z^2}\rvert\]</span></p><p><span class="math display">\[\lvert {e^{ik\varphi}}\rvert=1\]</span></p><p><img src="/2022/09/02/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E6%B3%95/%E5%A4%8D%E6%95%B0%E4%B8%8E%E5%A4%8D%E5%8F%98%E8%BF%90%E7%AE%97/image-20220902230443938.png"></p>]]></content>
    
    
    <categories>
      
      <category>数学物理方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复变函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python api -- script learning</title>
    <link href="/2022/07/15/Lumerical/python%20api%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/07/15/Lumerical/python%20api%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a href="https://optics.ansys.com/hc/en-us/articles/360041873053#h_2e805670-cfdb-4612-802e-aa06cae2685c">Sessionmanagement - Python API – Ansys Optics</a></p><p>本文将演示Lumerical工具与Python集成开发以完成复杂的自动化工作流程，并且执行高级数据处理以及绘画。</p><p>使用Python API可以实现互联，Python API是一个称为<span class="math inline">\(lumapi\)</span>的Python库。</p><p>建议将Lumerical和Python的文件放在统一文件夹</p><p>启用Lumerical-Python API关键需要连接lumapi.py文件的连接。</p><p>使用脚本命令和传递数据,可以参考<a href="https://optics.ansys.com/hc/en-us/articles/360041579954">Scriptcommands as methods - Python API,</a>和<a href="https://optics.ansys.com/hc/en-us/articles/360041401434">PassingData - Python API.</a></p><h1 id="import-module">import module</h1><h2 id="导入lumapi">导入lumapi</h2><p>lumerical的solver已经附带了Python3发行版。</p><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> lumapi<br></code></pre></td></tr></table></figure><h2 id="导入前先导入python">导入前先导入python</h2><p>使用<span class="math inline">\(sys.path.append()\)</span>方法将<span class="math inline">\(lumapi\)</span>目录临时添加到路径中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os<br>sys.path.append(<span class="hljs-string">&quot;C:\\Program Files\\Lumerical\\v222\\api\\python\\&quot;</span>) <span class="hljs-comment">#Default windows lumapi path</span><br>sys.path.append(<span class="hljs-string">&quot;/opt/lumerical/v222/api/python/lumapi.py&quot;</span>) <span class="hljs-comment">#Default linux lumapi path</span><br>sys.path.append(os.path.dirname(__file__)) <span class="hljs-comment">#Current directory</span><br></code></pre></td></tr></table></figure><h1 id="starting-a-session">starting a session</h1><p>调用构造函数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">fdtd</span> = lumapi.FDTD()<br></code></pre></td></tr></table></figure><p>You can create multiple sessions of the same product and differentproducts at once, as long as they all have unique names.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">mode1</span> = lumapi.MODE()<br><span class="hljs-attr">mode2</span> = lumapi.MODE()<br><span class="hljs-attr">device</span> = lumapi.DEVICE()<br></code></pre></td></tr></table></figure><p>构造函数支持以下可选参数：</p><ul><li>hide（默认为False）：在启动的时候显示或者隐藏lumeric GUI/CAD环境</li><li>filename(默认为空)：如果新的应用程序时空的，则启动这个应用程序，如果提供lsf文件，则运行脚本。如果提供了项目文件名，将尝试加载项目</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># loads and runs script.lsf while hiding the application window</span><br>inc = lumapi.INTERCONNECT(<span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;script.lsf&quot;</span>, <span class="hljs-attribute">hide</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="import-methods">Import Methods</h3><p>除了在Python中定义函数，用户还可以使用lumapi的自动同步函数功能，并且导入Lumerical脚本文件中预定义的函数。使用“eval”命令执行脚本后，可以在lumapi 中将这些方法称为预定义的方法。</p><p>下面是从脚本文件“testScript.lsf”和script formatstring导入函数的示例。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs delphi">fdtd = lumapi.FDTD()<br><br># import <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defined</span> <span class="hljs-title">in</span> <span class="hljs-title">script</span> <span class="hljs-title">format</span> <span class="hljs-title">string</span></span><br><span class="hljs-function"><span class="hljs-title">fdtd</span> .<span class="hljs-title">eval</span><span class="hljs-params">(&quot;<span class="hljs-keyword">function</span> helloWorld()</span> <span class="hljs-comment">&#123; return \&quot;hello world\&quot;; &#125;</span>\<span class="hljs-title">nfunction</span> <span class="hljs-title">returnFloat</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123; return 1.; &#125;</span>\<span class="hljs-title">nfunction</span> <span class="hljs-title">addTest</span><span class="hljs-params">(a, b)</span><span class="hljs-comment">&#123; return a*b; &#125;</span>&quot;)</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(fdtd .helloWorld()</span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"># <span class="hljs-title">import</span> <span class="hljs-title">function</span> <span class="hljs-title">defined</span> <span class="hljs-title">in</span> <span class="hljs-title">the</span> <span class="hljs-title">script</span> <span class="hljs-title">file</span> &quot;<span class="hljs-title">testScript</span>.<span class="hljs-title">lsf</span>&quot;</span><br><span class="hljs-function"><span class="hljs-title">code</span> = <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-string">&#x27;C:/XXX/testScript.lsf&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)</span>.<span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">fdtd</span> .<span class="hljs-title">eval</span><span class="hljs-params">(code)</span></span><br></code></pre></td></tr></table></figure><p>该脚本还可以作为构造函数中的参数传递，以定义方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">def test<span class="hljs-constructor">AddingMethodsFromConstructor(<span class="hljs-params">self</span>)</span>:<br>app = self.app<span class="hljs-constructor">Constructor(<span class="hljs-params">script</span>=<span class="hljs-string">&quot;any_product_script_workspace_functions_available_in_python_test.lsf&quot;</span>)</span><br>expectedMethods = &#123;&#x27;helloWorld&#x27;&#125;<br>expectedResults = <span class="hljs-literal">[&#x27;<span class="hljs-identifier">hello</span> <span class="hljs-identifier">world</span> <span class="hljs-identifier">from</span> <span class="hljs-identifier">script</span> <span class="hljs-identifier">file</span>&#x27;]</span><br>results = <span class="hljs-literal">[]</span><br>results.append(app.hello<span class="hljs-constructor">World()</span>)<br>self.<span class="hljs-keyword">assert</span><span class="hljs-constructor">Equal(<span class="hljs-params">results</span>, <span class="hljs-params">expectedResults</span>)</span><br>app.close<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h1 id="advanced-session-management">Advanced session management</h1><p>当变量超过了作用域之后，他们将会被自动删除，当所有指向它的变量引用被删除时，Lumerical会话将自动关闭。</p><h3 id="wrapping-the-session-in-a-function">Wrapping the session in afunction</h3><p>在Python中，如果需要运行大量类似的实例，可以使用函数；比如，在扫描一些可选的参数的时候，有关如何返回重要结果，请参阅<a href="https://optics.ansys.com/hc/en-us/articles/360041401434">passingdata - Python API</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">def <span class="hljs-title">myFunction</span><span class="hljs-params">(someOptionalParameter)</span>:</span><br><span class="hljs-function">    fdtd =</span> lumapi.<span class="hljs-built_in">FDTD</span>()<br>    ...<br>    <span class="hljs-keyword">return</span> importantResult<br></code></pre></td></tr></table></figure><h3 id="using-the-with-context-manager">Using the "with" contextmanager</h3><p>我们可以通过Python中的"with"语句，来给出一个良好的entrance and exitbehavior 来打开Lumericalsession。在"with"语句块中,有任何的错误，这会话依旧可以被成功地关闭。任何平常在Lumericalscript environment能看到的报错，会将在Python的环境中显示出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> lumapi.FDTD(hide=<span class="hljs-literal">True</span>) <span class="hljs-keyword">as</span> fdtd:<br>    fdtd.addfdtd()<br>    fdtd.setnamed(<span class="hljs-string">&quot;bad name&quot;</span>) <span class="hljs-comment">## you will see </span><br>LumApiError: <span class="hljs-string">&quot;in setnamed, no items matching the name &#x27;bad name&#x27; can be found.&quot;</span><br>    ...<br><span class="hljs-comment">## fdtd still successfully closes</span><br></code></pre></td></tr></table></figure><ul><li>hide (default to False): Shows or hides the lumerical GUI/CADenvironment on startup</li><li>filename (default empty): Launches a new application if it is empty,and will run the script if an lsf file is provided. If a projectfilename is provided; it will try and load the project if it can befound in the path. See the section setting the python path beforeimporting to add folder or use the full path to load files from otherdirectories.</li></ul><p>此示例演示如何从优化中访问数据。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs makefile">m=<span class="hljs-string">&quot;thickness_optimization&quot;</span>;<br>?getsweepdata(m);<br>genVec = getsweepdata(m,<span class="hljs-string">&quot;genVec&quot;</span>);       <span class="hljs-comment"># Generation vector (1D vector, Ng)</span><br>memberVec = getsweepdata(m,<span class="hljs-string">&quot;memberVec&quot;</span>);    <span class="hljs-comment"># Generation member vector (1D vector, Nm)</span><br>fomTrend = getsweepdata(m,<span class="hljs-string">&quot;fomTrend&quot;</span>);     <span class="hljs-comment"># Best of each generation, same as shown in Opt. GUI window (1D vector, Ng)</span><br>paramsTrend = getsweepdata(m,<span class="hljs-string">&quot;paramsTrend&quot;</span>);  <span class="hljs-comment"># Parameters corresponding to FOM trend (3D matrix, 1 x Np x Ng)</span><br>bestFom = getsweepdata(m,<span class="hljs-string">&quot;bestFom&quot;</span>);      <span class="hljs-comment"># Global best FOM</span><br>bestParams = getsweepdata(m,<span class="hljs-string">&quot;bestParams&quot;</span>);   <span class="hljs-comment"># Parameters corresponding to global best FOM (1D vector, Np)</span><br>fomHistory = getsweepdata(m,<span class="hljs-string">&quot;fomHistory&quot;</span>);   <span class="hljs-comment"># Every FOM calculated in optimization (2D maxtrix, Nm x Ng)</span><br>paramHistory = getsweepdata(m,<span class="hljs-string">&quot;paramHistory&quot;</span>); <span class="hljs-comment"># Every parameter set used in optimization (3D maxtrix, Np x Nm x Ng)</span><br>plot(genVec,fomTrend,<span class="hljs-string">&quot;generation number&quot;</span>,<span class="hljs-string">&quot;fom Trend&quot;</span>,<span class="hljs-string">&quot;best FOM of each generation&quot;</span>); <br>?<span class="hljs-string">&quot;Best FOM: &quot;</span>+num2str(bestFom);<br>?<span class="hljs-string">&quot;Best Params: &quot;</span>+num2str(bestParams);<br>?<span class="hljs-string">&quot;Total number of simulations run: &quot;</span>+num2str(length(genVec)*length(memberVec));<br>image(memberVec,genVec,fomHistory,<span class="hljs-string">&quot;member&quot;</span>,<span class="hljs-string">&quot;generation&quot;</span>,<span class="hljs-string">&quot;All FOM&#x27;s obtained&quot;</span>);<br>&gt; genVec<br>&gt; memberVec<br>&gt; paramsTrend<br>&gt; fomTrend<br>&gt; paramHistory<br>&gt; fomHistory<br>&gt; bestParams<br>&gt; bestFom<br>&gt; Best FOM: 0.00187328<br>&gt; Best Params: 5.96041e-008<br>&gt; Total number of simulations run: 50<br></code></pre></td></tr></table></figure><h1 id="simulation-objects">Simulation Objects</h1><p>添加对象时，其构造函数可用于在创建时设置属性的值。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fdtd</span>.addfdtd(dimension=<span class="hljs-string">&quot;2D&quot;</span>, x=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>e-<span class="hljs-number">9</span>, y=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>e-<span class="hljs-number">9</span>, x_span=<span class="hljs-number">3</span>.<span class="hljs-number">0</span>e-<span class="hljs-number">6</span>, y_span=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>e-<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>在Python中，字典排序不能保证，因此，如果存在依赖于其他属性的属性，则需要有序字典。例如，在Python的以下行中，“覆盖全局监视器设置”必须为true，然后才能设置“frequencypoints”。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">props</span> = OrderedDict([(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;power&quot;</span>),(<span class="hljs-string">&quot;override global monitor settings&quot;</span>, True),(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>.),(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0.4e-6</span>),<br>                     (<span class="hljs-string">&quot;monitor type&quot;</span>, <span class="hljs-string">&quot;linear x&quot;</span>),(<span class="hljs-string">&quot;frequency points&quot;</span>, <span class="hljs-number">10.0</span>)])<br>fdtd.addpower(<span class="hljs-built_in">properties</span>=<span class="hljs-built_in">props</span>)<br></code></pre></td></tr></table></figure><p>如果您没有具有依赖项的属性，则可以使用常规的Python字典。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">props = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;power&quot;</span>,<br>         <span class="hljs-string">&quot;x&quot;</span> : &quot;0.0&quot;,<br>         <span class="hljs-string">&quot;y&quot;</span> : 0.4<span class="hljs-type">e</span>-<span class="hljs-number">6</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">          &quot;</span>monitor <span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>linear x<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">fdtd.addpower(properties=props)</span><br></code></pre></td></tr></table></figure><h3 id="simulation-objection">simulation objection</h3><p>将新对象添加到 Lumerical 文件时，将返回一个representative Python对象。此对象可用于对 Lumerical 产品中的相应对象进行更改。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rectangle</span> = fdtd.addrect(x = <span class="hljs-number">2</span>e-<span class="hljs-number">6</span>, y = <span class="hljs-number">0</span>.<span class="hljs-number">0</span>, z = <span class="hljs-number">0</span>.<span class="hljs-number">0</span>)<br><span class="hljs-attribute">rectangle</span>.x = -<span class="hljs-number">1</span>e-<span class="hljs-number">6</span><br><span class="hljs-attribute">rectangle</span>.x_span = <span class="hljs-number">10</span>e-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>Parent and children access</strong></p><p>The tree of objects可以使用对象的父类或子项进行遍历</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">device.addstructuregroup(<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;A&quot;</span>)<br>device.addrect(<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;in A&quot;</span>)<br>device.addtogroup(<span class="hljs-string">&quot;A&quot;</span>)<br>device.addstructuregroup(<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;B&quot;</span>)<br>device.addtogroup(<span class="hljs-string">&quot;A&quot;</span>)<br>bRect = device.addrect(<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;in B&quot;</span>)<br>device.addtogroup(<span class="hljs-string">&quot;A::B&quot;</span>)<br><br><span class="hljs-comment"># Go up two parents from the rectangle in &quot;B&quot; group</span><br>aGroup = bRect.getParent().getParent()<br><br><span class="hljs-comment"># Print the names of all members of &quot;A&quot; group</span><br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> aGroup.getChildren():<br>    <span class="hljs-builtin-name">print</span> child[<span class="hljs-string">&quot;name&quot;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>High-effciency grating-couplers:demonstration of a new design  strategy</title>
    <link href="/2022/07/14/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%8F%8D%E5%90%91%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/14/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%8F%8D%E5%90%91%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1><p>一种简单且实用的设计光栅耦合器的方法</p><p>基于两个方面优化，变迹光栅的参数和刻蚀深度</p><p>变迹光栅的参数有两个，光栅周期与占空比</p><p>在260nm的SOI硅平台上进行优化</p><p>仿真耦合效率达到了0.8db（83%），实际制造后的结果为0.9db（81%）</p><p>不使用反射结构</p><h1 id="body">Body</h1><h2 id="背景">背景</h2><p>如何将光纤中的光耦合进波导中——边缘耦合，光栅耦合</p><p>边缘耦合的优缺点：</p><ol type="1"><li>耦合效率高，能够达到0.5dB</li><li>对工艺要求高</li></ol><p>光栅耦合的优缺点：</p><ol type="1"><li>可放置于芯片的任意位置；对准容差较高；可量产</li><li>耦合效率低（通常低于61%；光栅方向性低，模场失配），<strong>带宽窄（一般为30-40nm）</strong></li></ol><p>均匀光栅的光强分布主要以指数衰减，不能很好地匹配高斯分布的入射光</p><p>光栅方向性低：</p><ul><li>增加DBR反射镜或者金属反射镜（工艺困难）</li></ul><p>模场失配：</p><ul><li>采用变迹光栅</li></ul><h2 id="变迹光栅的设计">变迹光栅的设计</h2><p>在标准SOI上的GC，刻蚀区域的长度为<span class="math inline">\(L_E\)</span>，刻蚀深度为<span class="math inline">\(e\)</span>，周期为<span class="math inline">\(Λ\)</span>，占空比为<span class="math inline">\(F\)</span>，我们就可以得到有效折射率<span class="math inline">\(n_{eff}\)</span>的公式: <span class="math display">\[n_{eff}=F\cdot n_O+(1-F)\cdot n_E\]</span> <span class="math inline">\(n_O\)</span>和<span class="math inline">\(n_E\)</span>分别是初始硅薄片以及刻蚀过的硅薄片的有效折射率。刻蚀区域和未刻蚀区域的有效折射率的周期性变化，这使得光学mode在硅波导被衍射到freespace。根据布拉格条件，光栅周期可以这样子计算： <span class="math display">\[Λ=\frac{λ_c}{n_{eff}-n_{bg}sin\theta}\]</span> 其中，<span class="math inline">\(\lambda_c\)</span>是中心耦合波长，<span class="math inline">\(\theta\)</span>是入射角度，<span class="math inline">\(n_{eff}\)</span>是光栅单元的有效折射率。从一个标准的光栅耦合器的基本结构，我们决定引入线性变迹的结构。通过线性地改变占空比，可以实现两个积极的效果，提高波导与光栅部分的光阻抗匹配（有点不太清楚），降低光栅第一元件的辐射的光功率量。<span class="math display">\[F(x)=F_0-R \cdot x\]</span> R是切趾系数，x是每个光栅单元到光栅起始点的距离</p><p>变迹光栅以前常常是使用numerical techniques,比如遗传算法</p><p>第一算力要求大,耗时长</p><p>第二这种方法不能给出物理含义上的那种最高耦合效率(只是单纯计算,并没有从原理去分析)</p><p>$$</p><p>$$</p><p><img src="/2022/07/14/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%8F%8D%E5%90%91%E8%AE%BE%E8%AE%A1/image-20220714211335385.png"></p><p>以前优化方案是将周期固定，占空比调整，现在的优化方案是周期和占空比都不固定。</p><p>固定周期会阻止了所有的光栅元件同时满足布拉格条件</p>]]></content>
    
    
    <categories>
      
      <category>大创文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>inverse design of grating coupler -- process presentation</title>
    <link href="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/"/>
    <url>/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="步骤1定义基本仿真参数">步骤1：定义基本仿真参数</h1><ol type="1"><li>在mode下打开模拟文件 pid_grating_coupler_preliminary_design.lms</li><li>修改所需的基本仿真参数，保存文件。</li><li>打开脚本文件 pid_grating_coupler_preliminary_design.lsf</li><li>修改参数并运行脚本</li></ol><p><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220713185123368.png"></p><figure><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220713185358211.png" alt="结果展示"><figcaption aria-hidden="true">结果展示</figcaption></figure><p>第一个是所需的中心波长</p><p>第二个是<span class="math inline">\(X_0\)</span>，光栅的起始点</p><p>第三个是切趾系数R</p><p>第四个是 neff_thin -index_SiO2*sin(theta)(具体叫什么我也不太清楚)</p><p>第五个是有效折射率的差值(neff_thick - neff_thin)</p><p>脚本<strong>pid_grating_coupler_preliminary_grating_design.lsf</strong>将会计算这些初始参数，并将结果保存在<strong>pid_grating_coupler_initial_params.json</strong>文件中，以便下一步使用。</p><h1 id="步骤二使用2d-fdyd优化切趾光栅">步骤二：使用2DFDYD优化切趾光栅</h1><p>我们首先需要找到光纤的最佳位置。</p><ol type="1"><li>用FDTD的编译器打开python脚本<strong>pid_grating_coupler_sweep_2D.py</strong></li><li>如果需要的话，可以修改参数。</li><li>运行脚本</li></ol><p>这个脚本会进行一个光源位置的扫描</p><h1 id="pid_grating_coupler_sweep_2d.py">pid_grating_coupler_sweep_2D.py</h1><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Copyright (c) 2020 Ansys Inc. &quot;&quot;&quot;</span><br>    <br><span class="hljs-comment">######## IMPORTS ########</span><br><span class="hljs-comment"># General purpose imports</span><br><span class="hljs-keyword">import</span> os,sys<br>sys.path.append(<span class="hljs-string">&quot;C:\\Program Files\\Lumerical\\v211\\api\\python\\&quot;</span>)<br><span class="hljs-keyword">import</span> scipy <span class="hljs-keyword">as</span> sp<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> lumjson <span class="hljs-keyword">import</span> LumEncoder, LumDecoder<br><br><span class="hljs-keyword">import</span> lumapi<br><br><span class="hljs-comment">######## OPTIMIZABLE GEOMETRY ########</span><br>lambda_c = <span class="hljs-number">1.55e-6</span> <br>bandwidth_in_nm = <span class="hljs-number">0</span>     <span class="hljs-comment">#&lt; Only optimize for center frequency of 1550nm</span><br>F0 = <span class="hljs-number">0.95</span><br>height = <span class="hljs-number">220e-9</span><br>etch_depth = <span class="hljs-number">80e-9</span><br>y0 = <span class="hljs-number">0</span><br>x_begin = -<span class="hljs-number">5.1e-6</span><br>x_end = <span class="hljs-number">22e-6</span><br>n_grates = <span class="hljs-number">25</span><br><br>indexSi = <span class="hljs-number">3.47668</span><br>indexSiO2 = <span class="hljs-number">1.44401</span><br><br>data_file = <span class="hljs-string">&quot;pid_grating_coupler_initial_params.json&quot;</span><br>base_file = <span class="hljs-string">&quot;pid_grating_coupler_2D_TE_base.fsp&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grating_params_pos</span>(<span class="hljs-params">params, n_grates</span>):</span><br>    y0      = <span class="hljs-number">0</span><br><br>    y3 = y0+height<br>    y1 = y3-etch_depth<br><br>    x_start = params[<span class="hljs-number">0</span>]*<span class="hljs-number">1e-6</span>  <span class="hljs-comment">#&lt; First parameter is the starting position</span><br>    R  = params[<span class="hljs-number">1</span>]*<span class="hljs-number">1e6</span>        <span class="hljs-comment">#&lt; second parameter (unit is 1/um)</span><br>    a  = params[<span class="hljs-number">2</span>]            <span class="hljs-comment">#&lt; Third parameter (dim-less)</span><br>    b  = params[<span class="hljs-number">3</span>]            <span class="hljs-comment">#&lt; Fourth parameter (dim-less)</span><br><br>    x0 = x_start<br>  <br>    verts = np.array( [[x_begin,y0],[x_begin,y3],[x0,y3],[x0,y1]] )<br>    <br>    <span class="hljs-comment">## Iterate over all but the last tooth</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_grates-<span class="hljs-number">1</span>):<br>        F = F0-R*(x0-x_start)<br>        Lambda = lambda_c / (a+F*b)<br>        x1 = x0 + (<span class="hljs-number">1</span>-F)*Lambda    <span class="hljs-comment">#&lt; Width of the etched region</span><br>        x2 = x0 + Lambda          <span class="hljs-comment">#&lt; Rest of cell</span><br>        verts = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x2,y3],[x2,y1]])),axis=<span class="hljs-number">0</span>)<br>        x0 = x2<br><br>    <span class="hljs-comment">## Last tooth is special</span><br>    F = F0-R*(x0-x_start)<br>    Lambda = lambda_c / (a+F*b)<br>    x1 = x0 + (<span class="hljs-number">1</span>-F)*Lambda        <span class="hljs-comment">#&lt; Width of the etched region</span><br>    verts = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x_end,y3],[x_end,y0]])),axis=<span class="hljs-number">0</span>) <br><br>    <span class="hljs-keyword">return</span> verts<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_file) <span class="hljs-keyword">as</span> fh:<br>        initial_params = json.load(fh, cls=LumDecoder)[<span class="hljs-string">&quot;initial_params&quot;</span>][<span class="hljs-number">0</span>]<br>                <br>    <span class="hljs-comment"># Alternate starting point</span><br>    <span class="hljs-comment"># initial_params = [ -2.5, 0.03, 2.4, 0.5369]</span><br><br>    vtx = grating_params_pos(initial_params, <span class="hljs-number">25</span>)<br><br>    <span class="hljs-keyword">if</span> os.path.exists(base_file):<br>        <span class="hljs-keyword">with</span> lumapi.FDTD(filename=base_file) <span class="hljs-keyword">as</span> fdtd:<br>            fdtd.addpoly()<br>            fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>, vtx)<br>            fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>            fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>            fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;index&quot;</span>, indexSi)<br>            fdtd.setglobalsource(<span class="hljs-string">&quot;center wavelength&quot;</span>, lambda_c)<br>            fdtd.setglobalsource(<span class="hljs-string">&quot;wavelength span&quot;</span>, <span class="hljs-number">0</span>)<br>            fdtd.save()<br>            fdtd.runsweep(<span class="hljs-string">&quot;sweep source position&quot;</span>)<br>            sweep_pos = fdtd.getsweepdata(<span class="hljs-string">&quot;sweep source position&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>)<br>            sweep_T = fdtd.getsweepdata(<span class="hljs-string">&quot;sweep source position&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>)<br>            <br>            Tmax = np.amax(sweep_T)<br>            Tpos = sweep_pos[np.where(sweep_T == np.amax(sweep_T))[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>]<br>            <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Max transmission:&quot;</span>, Tmax*<span class="hljs-number">100</span>, <span class="hljs-string">&quot;%&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Position&quot;</span>, Tpos*<span class="hljs-number">1e6</span>, <span class="hljs-string">&quot;um&quot;</span>)<br>            <br>            fdtd.setnamed(<span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, Tpos)<br>            <br>            fdtd.select(<span class="hljs-string">&quot;polygon&quot;</span>)<br>            fdtd.delete()<br>            fdtd.save()            <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base file doesn&#x27;t exist...&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220715200533891.png" alt="运行扫描"><figcaption aria-hidden="true">运行扫描</figcaption></figure><h2 id="导入的标准库">导入的标准库</h2><p>import os,sys 是导入标准库os和sys</p><p><a href="https://docs.python.org/zh-cn/3.7/library/os.html">os ---操作系统接口模块 — Python 3.7.13 文档</a></p><p><a href="https://docs.python.org/zh-cn/3/reference/import.html">5.import sys — Python 3.10.5 文档</a></p><p><a href="https://www.numpy.org.cn/article/basics/python_numpy_tutorial.html">Python、Numpy教程 | NumPy 中文</a></p><h2 id="sys.path.append">sys.path.append</h2><p>Adding the Python Before Importing To temporarily add the lumapidirectory to your path, you can use the sys.path.append() method. Thisis the case if you have not yet added lumapi to your search path, and itis also useful when adding directories of other helpful lsf, fsp, pyfiles. The following code adds the lumapi folder and current filedirectory.</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dos">import sys, os<br>sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">append</span>(&quot;C:\\Program Files\\Lumerical\\v222\\api\\python\\&quot;) #Default windows lumapi <span class="hljs-built_in">path</span><br>sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">append</span>(&quot;/opt/lumerical/v222/api/python/lumapi.py&quot;) #Default linux lumapi <span class="hljs-built_in">path</span><br>sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">append</span>(os.<span class="hljs-built_in">path</span>.dirname(__file__)) #Current directoryimport sys  <br>sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">append</span>(’需要引用模块的地址&#x27;)<br># sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">append</span>(&quot;..&quot;)   # 这代表添加当前路径的上一级目录<br></code></pre></td></tr></table></figure><h2 id="np.concentrate">np.concentrate</h2><p>拼接功能</p><p><a href="https://www.cnblogs.com/shueixue/p/10953699.html">python中numpy.concatenate()函数的使用- shufeixue - 博客园 (cnblogs.com)</a></p><h2 id="open-with-as">open with as</h2><p>进行文件操作</p><p><a href="http://c.biancheng.net/view/4817.html">Python withas用法详解 (biancheng.net)</a></p><h2 id="name__">__name__</h2><p>内置变量</p><p><a href="https://zhuanlan.zhihu.com/p/157439994">【Python】<strong>name</strong>是什么？ - 知乎 (zhihu.com)</a></p><h2 id="json.load">json.load</h2><p><a href="https://docs.python.org/3/library/json.html">json — JSON编码器和解码器 — Python 3.10.5 文档</a></p><p><code>json.``load</code>(<em>fp</em>， <strong><em>，</em>cls=None<em>， </em>object_hook=None<em>，</em>parse_float=None<em>， </em>parse_int=None<em>，</em>parse_constant=None<em>， </em>object_pairs_hook=None<em>，</em></strong>kw*)<a href="https://docs.python.org/3/library/json.html#json.load">¶</a></p><h2 id="addpoly">addpoly</h2><p>将多边形添加到模拟文件中。多边形对象使用一组x，y坐标（顶点）在xy平面中定义一个多边形，然后在z方向上拉伸该多边形以创建3D几何图形。</p><table><colgroup><col style="width: 14%"><col style="width: 85%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">addpoly;</td><td style="text-align: left;">Adds a polygon primitive to the simulationenvironment.This function does not return any data.</td></tr></tbody></table><p>样例</p><p>以下的脚本创建一个2D矩阵来存储多边形的顶点，并且使用它来创建多边形基元</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vtx = [1,0;2,2;4,2;4,1;3,1]<span class="hljs-number">*1e</span>-6;  # microns<br>addpoly;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;random_polygon&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>,vtx);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,2e-6);<br></code></pre></td></tr></table></figure><h2 id="setglobalsource">setglobalsource</h2><p>设置全局光源的属性。这个命令将返回analysis mode的error</p><table><colgroup><col style="width: 36%"><col style="width: 63%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?setglobalsource;</td><td style="text-align: left;">Returns a list of the global sourceproperties</td></tr><tr class="even"><td style="text-align: left;">setglobalsource("property",value);</td><td style="text-align: left;">Set the global source property named"property" to a value.This function does not return any data.</td></tr></tbody></table><p>样例</p><p>将全局的起始波长设置400nm，然后确定值是否正确</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">setglobalsource</span>(<span class="hljs-string">&quot;wavelength start&quot;</span>,<span class="hljs-number">400</span>e-<span class="hljs-number">9</span>);<br>?<span class="hljs-selector-tag">getglobalsource</span>(<span class="hljs-string">&quot;wavelength start&quot;</span>);<br><span class="hljs-selector-tag">result</span>: <br><span class="hljs-selector-tag">4e-007</span> <br></code></pre></td></tr></table></figure><h2 id="save">save</h2><p>保存项目文件。如果模拟已经运行，则该文件还将包含模拟结果，例如扫描和优化数据。</p><table><colgroup><col style="width: 20%"><col style="width: 80%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">save;</td><td style="text-align: left;">Open a file browser to save the file.Thisfunction does not return any data.</td></tr><tr class="even"><td style="text-align: left;">save(filename);</td><td style="text-align: left;">Save with the specified name to thecurrent working directory. A path can be specified.</td></tr></tbody></table><p>例子</p><p>保存当前的文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">save(<span class="hljs-string">&quot;project_name&quot;</span>); <span class="hljs-comment"># saves the file in the current working directory</span><br>save(<span class="hljs-string">&quot;C:\Downloads\project_name.fsp&quot;</span>) <span class="hljs-comment"># saves the file in a path specified</span><br></code></pre></td></tr></table></figure><h2 id="getsweepdata">getsweepdata</h2><p>Gets raw data from a parameter sweep/optimization/Monte Carloanalysis.</p><p>在大多数情况下，使用getsweeoresult获取完整的数据集比getsweeodata获取单个数据元素更方便。</p><table><colgroup><col style="width: 40%"><col style="width: 59%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?getsweepdata;</td><td style="text-align: left;">Returns names of all sweep, optimization,and Monte Carlo analysis objects.</td></tr><tr class="even"><td style="text-align: left;">?getsweepdata("sweep_name");</td><td style="text-align: left;">Returns all the names of the availabledata which is stored in the sweep, optimization, or Monte Carlo analysisobject.</td></tr><tr class="odd"><td style="text-align: left;">out = getsweepdata("sweep_name","data");</td><td style="text-align: left;">Returns parameter sweep, optimization, orMonte Carlo analysis data.The following data can be obtained from anoptimization:fomTrend - Figure of merit as a function ofgenerationfomHistory - Figure of merit history (for each generationthere will be generation size number)bestFom - Best figure of meritobtained during sweepbestParameter - Parameter which corresponds tobestFomparamHistory - Parameter historyFor a parameter sweep and MonteCarlo analysis, this command returns both parameters and results.</td></tr></tbody></table><p>例子</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">m</span>=<span class="hljs-string">&quot;thickness_sweep&quot;</span>;<br>?getsweepdata(m);<br>th = getsweepdata(m,<span class="hljs-string">&quot;thickness&quot;</span>); # <span class="hljs-builtin-name">get</span> parameter <span class="hljs-keyword">from</span> sweep<br>R = getsweepdata(m,<span class="hljs-string">&quot;R&quot;</span>);# <span class="hljs-builtin-name">get</span> result <span class="hljs-keyword">from</span> sweep<br>plot(th<span class="hljs-number">*1e6</span>,R,<span class="hljs-string">&quot;thickness (microns)&quot;</span>,<span class="hljs-string">&quot;Reflection&quot;</span>);<br>&gt; R<br>&gt; T<br>&gt; thickness <br></code></pre></td></tr></table></figure><h2 id="setnamed">setnamed</h2><table><colgroup><col style="width: 44%"><col style="width: 55%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?setnamed("name");</td><td style="text-align: left;">Returns a list of the properties of theobjects called name.</td></tr><tr class="even"><td style="text-align: left;">setnamed("name", "property", value);</td><td style="text-align: left;">The same as set, but acts on objects witha specific name, instead of selected objects.</td></tr><tr class="odd"><td style="text-align: left;">setnamed("name", struct);</td><td style="text-align: left;">A struct can be accepted in place of"property"-value pair of arguments.</td></tr><tr class="even"><td style="text-align: left;">setnamed("name", "property",value,i);</td><td style="text-align: left;">This form can be used to set the propertyof the ith named object when multiple objects have the same name.Theobjects are ordered by their location in the object tree. The uppermostselected object is given the index 1, and the index numbers increase asyou go down the tree.</td></tr><tr class="odd"><td style="text-align: left;">setnamed("groupname::name", "property",value);</td><td style="text-align: left;">The same as set, but acts on objectswithin the group named "groupname" that are named "name", instead ofselected objects.</td></tr><tr class="even"><td style="text-align: left;">setnamed("groupname::name", "property",value,i);</td><td style="text-align: left;">This form can be used to set the propertyof the ith object with the name "name" in the group "groupname" whenmultiple objects have the same name.The objects are ordered by theirlocation in the object tree. The uppermost selected object is given theindex 1, and the index numbers increase as you go down the tree.</td></tr></tbody></table><p><strong>Examples</strong></p><p>Set the radius of the object called "circle" to 10nm:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">setnamed</span>(<span class="hljs-string">&quot;circle&quot;</span>,<span class="hljs-string">&quot;radius&quot;</span>,<span class="hljs-number">10</span>e-<span class="hljs-number">9</span>); <br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>用FDTD脚本编辑器,打开python 脚本<strong>pid_grating_coupler_2D_apodized.py</strong></li><li>如果需要的话,更新参数,并且运行脚本</li><li>打开脚本<strong>pid_grating_coupler_2D_1etch.py</strong></li><li>运行脚本</li></ol><h1 id="pid_grating_coupler_2d_apodized.py">pid_grating_coupler_2D_apodized.py</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##&quot;&quot;&quot;</span><br> <span class="hljs-comment">##   Copyright (c) 2020 Ansys Inc. &quot;&quot;&quot;</span><br><br><span class="hljs-comment">######## IMPORTS ########</span><br><span class="hljs-comment"># General purpose imports</span><br><span class="hljs-keyword">import</span> os,sys<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> scipy <span class="hljs-keyword">as</span> sp<br><span class="hljs-keyword">import</span> json<br>sys.path.append(<span class="hljs-string">&quot;C:\\Program Files\\Lumerical\\v211\\api\\python\\&quot;</span>)<br><span class="hljs-keyword">from</span> lumjson <span class="hljs-keyword">import</span> LumEncoder, LumDecoder<br><br><br><span class="hljs-comment"># Optimization specific imports</span><br><span class="hljs-keyword">from</span> lumopt.utilities.load_lumerical_scripts <span class="hljs-keyword">import</span> load_from_lsf<br><span class="hljs-keyword">from</span> lumopt.utilities.wavelengths <span class="hljs-keyword">import</span> Wavelengths<br><span class="hljs-keyword">from</span> lumopt.geometries.parameterized_geometry <span class="hljs-keyword">import</span> ParameterizedGeometry<br><span class="hljs-keyword">from</span> lumopt.geometries.polygon <span class="hljs-keyword">import</span> FunctionDefinedPolygon<br><span class="hljs-keyword">from</span> lumopt.figures_of_merit.modematch <span class="hljs-keyword">import</span> ModeMatch<br><span class="hljs-keyword">from</span> lumopt.optimizers.generic_optimizers <span class="hljs-keyword">import</span> ScipyOptimizers<br><span class="hljs-keyword">from</span> lumopt.optimization <span class="hljs-keyword">import</span> Optimization<br><span class="hljs-keyword">from</span> lumopt.utilities.materials <span class="hljs-keyword">import</span> Material<br><br><span class="hljs-keyword">import</span> lumapi<br><br>cur_path = os.path.dirname(os.path.realpath(__file__))<br><br><br><span class="hljs-comment"># Optimization global parameters</span><br>lambda_c = <span class="hljs-number">1.55e-6</span> <br>bandwidth_in_nm = <span class="hljs-number">0</span>     <span class="hljs-comment">#&lt; Only optimize for center frequency of 1550nm</span><br>F0 = <span class="hljs-number">0.95</span><br>height = <span class="hljs-number">220e-9</span><br>etch_depth = <span class="hljs-number">80e-9</span><br>y0 = <span class="hljs-number">0</span><br>x_begin = -<span class="hljs-number">5.1e-6</span><br>x_end = <span class="hljs-number">22e-6</span><br>n_grates = <span class="hljs-number">25</span><br><br>indexSi = <span class="hljs-number">3.47668</span><br>indexSiO2 = <span class="hljs-number">1.44401</span><br><br>params_file = <span class="hljs-string">&quot;pid_grating_coupler_initial_params.json&quot;</span><br>base_sim_2d = <span class="hljs-string">&quot;pid_grating_coupler_2D_TE_base.fsp&quot;</span><br>base_sim_apodized_2d = <span class="hljs-string">&quot;pid_grating_coupler_2D_TE_base_apodized.fsp&quot;</span><br>base_script_2d = <span class="hljs-string">&#x27;pid_grating_coupler_2D_TE_base.lsf&#x27;</span><br>params_file_apod = <span class="hljs-string">&quot;pid_optim_1.json&quot;</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grating_params_pos</span>(<span class="hljs-params">params</span>):</span><br>    y3 = y0+height<br>    y1 = y3-etch_depth<br><br>    x_start = params[<span class="hljs-number">0</span>]*<span class="hljs-number">1e-6</span>  <span class="hljs-comment">#&lt; First parameter is the starting position</span><br>    R  = params[<span class="hljs-number">1</span>]*<span class="hljs-number">1e6</span>        <span class="hljs-comment">#&lt; second parameter (unit is 1/um)</span><br>    a  = params[<span class="hljs-number">2</span>]            <span class="hljs-comment">#&lt; Third parameter (dim-less)</span><br>    b  = params[<span class="hljs-number">3</span>]            <span class="hljs-comment">#&lt; Fourth parameter (dim-less)</span><br><br>    x0 = x_start<br>  <br>    verts = np.array( [[x_begin,y0],[x_begin,y3],[x0,y3],[x0,y1]] )       <br><br>    <span class="hljs-comment">## Iterate over all but the last tooth</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_grates-<span class="hljs-number">1</span>):<br>        F = F0-R*(x0-x_start)<br>        Lambda = lambda_c / (a+F*b)<br>        x1 = x0 + (<span class="hljs-number">1</span>-F)*Lambda    <span class="hljs-comment">#&lt; Width of the etched region</span><br>        x2 = x0 + Lambda          <span class="hljs-comment">#&lt; Rest of cell</span><br>        verts = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x2,y3],[x2,y1]])),axis=<span class="hljs-number">0</span>)<br>        x0 = x2<br><br>    <span class="hljs-comment">## Last tooth is special</span><br>    F = F0-R*(x0-x_start)<br>    Lambda = lambda_c / (a+F*b)<br>    x1 = x0 + (<span class="hljs-number">1</span>-F)*Lambda        <span class="hljs-comment">#&lt; Width of the etched region</span><br>    verts = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x_end,y3],[x_end,y0]])),axis=<span class="hljs-number">0</span>) <br><br>    <span class="hljs-keyword">return</span> verts<br>    <br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_vertices_from_distances</span>(<span class="hljs-params">self, x_start, distances</span>):</span><br>        <span class="hljs-comment">#x_start = params[0]*1e-6  #&lt; First parameter is the starting position</span><br>        <span class="hljs-comment">#R  = params[1]*1e6        #&lt; second parameter (unit is 1/um)</span><br>        <span class="hljs-comment">#a  = params[2]            #&lt; Third parameter (dim-less)</span><br>        <span class="hljs-comment">#b  = params[3]            #&lt; Fourth parameter (dim-less)</span><br>        <br>        x_begin = self.x_min-<span class="hljs-number">2e-6</span><br>        x = np.cumsum(np.concatenate(([x_start],distances)))        <br><br>        y0 = <span class="hljs-number">0</span><br>        y3 = y0+self.wg_height<br>        y1 = y3-self.etch_depth<br>    <br>        verts = np.array( [[x_begin,y0],[x_begin,y3],[x[<span class="hljs-number">0</span>],y3]] )       <br>    <br>        <span class="hljs-comment">## Iterate over all but the last tooth</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(x),<span class="hljs-number">2</span>):<br>            verts = np.concatenate((verts,np.array([[x[i-<span class="hljs-number">1</span>],y1],[x[i],y1],[x[i],y3],[x[i+<span class="hljs-number">1</span>],y3]])),axis=<span class="hljs-number">0</span>)<br>    <br>        <span class="hljs-comment">## Close off the polygon</span><br>        verts = np.concatenate((verts,np.array([[x[-<span class="hljs-number">1</span>],y0]])),axis=<span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> verts<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:   <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(cur_path, params_file)) <span class="hljs-keyword">as</span> fh:<br>        initial_params = json.load(fh, cls=LumDecoder)[<span class="hljs-string">&quot;initial_params&quot;</span>][<span class="hljs-number">0</span>]<br>        <br>    <span class="hljs-keyword">with</span> lumapi.FDTD(filename = os.path.join(cur_path, base_sim_2d), hide = <span class="hljs-literal">True</span>) <span class="hljs-keyword">as</span> fdtd:<br>        vtx = grating_params_pos(initial_params)<br>        fdtd.addpoly()<br>        fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>, vtx)<br>        fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>        fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>        fdtd.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;index&quot;</span>, indexSi)<br>        fdtd.save(os.path.join(cur_path, base_sim_apodized_2d))<br>        <span class="hljs-comment"># extracting the distsnces from vertices</span><br>        vx=np.array(vtx)<br>        vertsx=vx[<span class="hljs-number">2</span>:(<span class="hljs-built_in">len</span>(vx)-<span class="hljs-number">2</span>):<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]<br>        vert_x = np.concatenate(([np.array(vx[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>])],(vertsx[<span class="hljs-number">1</span>:]-vertsx[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(vertsx)-<span class="hljs-number">1</span>]))) <br>        vert_x = vert_x *<span class="hljs-number">1e6</span><br>               <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(cur_path, params_file_apod), <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> fh:<br>        json.dump(&#123; <span class="hljs-string">&quot;initial_params&quot;</span>: vert_x &#125;, fh, cls=LumEncoder, indent = <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h2 id="os.path.dirname">os.path.dirname</h2><p>语法：os.path.dirname(path) 功能：去掉文件名，返回目录</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-string">&quot;E:/Read_File/read_yaml.py&quot;</span>))<br>#结果：<br>E:/Read_File<br></code></pre></td></tr></table></figure><p>os.path.dirname(__file__)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">print(__file__)<br><span class="hljs-comment">#结果</span><br>E:<span class="hljs-regexp">/Read_File/</span>read_yaml.py<br></code></pre></td></tr></table></figure><p>可以看出__file__表示了当前文件的path</p><p>那么就可以了解到os.path.dirname((__file__)和os.path.dirname(“E:/Read_File/read_yaml.py”)是一个意思再根据os.path.dirname(path)的用法，得出os.path.dirname((__file__)就是得到当前文件的绝对路径</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">print</span>(os.path.dirname(<span class="hljs-keyword">__file__</span>))<br><span class="hljs-meta">#结果：</span><br>E:/Read_File<br></code></pre></td></tr></table></figure><h2 id="set">set</h2><p>设置当前选中对象的属性</p><p>当求解器处于分析模式时,无法修改</p><table><colgroup><col style="width: 28%"><col style="width: 71%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?set;</td><td style="text-align: left;">Returns a list of the properties of theselected object(s).</td></tr><tr class="even"><td style="text-align: left;">set("property",value);</td><td style="text-align: left;">This will set the properties of acurrently selected object, including pull-downs and check boxes. Itcannot be used to set the value of a selected object in a group.Valuecan be a number or string. This function does not return any data.</td></tr><tr class="odd"><td style="text-align: left;">set(struct);</td><td style="text-align: left;">A struct can be accepted in place of"property"-value pair of arguments.</td></tr><tr class="even"><td style="text-align: left;">set("property",value,i);</td><td style="text-align: left;">This form can be used to set the propertyof the ith selected object when multiple objects are selected. It cannotbe used to set the value of a selected object in a group.The objects areordered by their location in the object tree. The uppermost selectedobject is given the index 1, and the index numbers increase as you godown the tree.</td></tr></tbody></table><h2 id="多边形的搭建">多边形的搭建</h2><p>一个典型的多边形结构可以由如下代码生成：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br>vtx=[2,0;1,1;-1,1;<br>     -2,0;-1,-1;1,-1]*um;  #向量组<br>addpoly;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;poly&quot;</span>);#名称<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>,1.5);#折射率<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>,vtx);#控制向量组<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0.5*um);#中心坐标<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,1*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,-0.5*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,0.4*um);#z方向宽度<br></code></pre></td></tr></table></figure><p>addpoly：添加一个参数随机的多边形结构。set(“index”,1.5)：折射率。多边形材料为介电材料，折射率为1.5set(“vertices”,vtx)：向量组。设置多边形的xy面二维形状，由传入的向量组vtx中的参数控制</p><p>关于vtx中的参数解释：vtx是一个n*2的矩阵，每一行都是多边形上一个顶点的相对坐标，以设置的"x",“y”,"z"参数作为相对坐标原点，按在矩阵中的顺序顺次连接成多边形。</p><h2 id="os.path.join">os.path.join</h2><p><strong>os.path.join()函数用于路径拼接文件路径，可以传入多个路径</strong></p><p><strong>如果不存在以‘’/’开始的参数，则函数会自动加上</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(os.path.join(<span class="hljs-string">&#x27;path&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;yyy&#x27;</span>))<br>path\abc\yyy<br></code></pre></td></tr></table></figure><p>存在以‘’/’’开始的参数，从最后一个以”/”开头的参数开始拼接，之前的参数全部丢弃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,os.path.join(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;/bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc.txt&#x27;</span>))<br><span class="hljs-number">1</span> /bbb\ccc.txt<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,os.path.join(<span class="hljs-string">&#x27;/aaa&#x27;</span>,<span class="hljs-string">&#x27;/bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc.txt&#x27;</span>))<br><span class="hljs-number">1</span> /bbb\ccc.txt<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,os.path.join(<span class="hljs-string">&#x27;/aaa&#x27;</span>,<span class="hljs-string">&#x27;/bbb&#x27;</span>,<span class="hljs-string">&#x27;/ccc.txt&#x27;</span>))<br><span class="hljs-number">1</span> /ccc.txt<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,os.path.join(<span class="hljs-string">&#x27;/aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc.txt&#x27;</span>))<br><span class="hljs-number">1</span> /aaa\bbb\ccc.txt<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,os.path.join(<span class="hljs-string">&#x27;/aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;/ccc.txt&#x27;</span>))<br><span class="hljs-number">1</span> /ccc.txt<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/swan777/article/details/89040802">(106条消息)os.path.join()函数用法详解_swan777的博客-CSDN博客_os.path.join函数</a></p><h2 id="os.path.realpath__file__">os.path.realpath(__file__)</h2><p>获得当前脚本的绝对路径</p><h2 id="np.array">np.array</h2><p><a href="https://blog.csdn.net/hl1hl/article/details/86570046">(106条消息)numpy.array函数详解_双木青橙的博客-CSDN博客_numpy.array</a></p><h2 id="python-数组操作">python 数组操作</h2><p><a href="https://blog.csdn.net/Flag_ing/article/details/122850653">(106条消息)numpy对二维数组的常用操作_地球被支点撬走啦的博客-CSDN博客_numpy二维数组</a></p><p>py的切片索引是start : end : step</p><p>python数组切片</p><p>[(106条消息) python中 x<a href="https://blog.csdn.net/u014159143/article/details/80307717">:,0]和x[:,1]理解和实例解析_jobschu的博客-CSDN博客_x[:,0]</a></p><p>x[m,n]是通过numpy库引用数组或矩阵中的某一段数据集的一种写法</p><h2 id="json.dump">json.dump</h2><p><code>json</code>Python模块中的模块提供了一种称为<code>dump()</code>它将Python对象转换为适当的json对象。它是<code>dumps()</code>方法。</p><p>dump()及其参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">用法： json.dump(d, <span class="hljs-attribute">skipkeys</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">ensure_ascii</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">check_circular</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">allow_nan</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">cls</span>=None, <span class="hljs-attribute">indent</span>=None, <span class="hljs-attribute">separators</span>=None)<br></code></pre></td></tr></table></figure><p><a href="https://vimsky.com/examples/usage/json-dump-in-python.html">Pythonjson.dump()用法及代码示例 - 纯净天空 (vimsky.com)</a></p><h2 id="np.cumsum">np.cumsum</h2><p><a href="https://www.jianshu.com/p/e84c0344fa2b">Numpy.cumsum（）用法 ( np.cumsum) - 简书 (jianshu.com)</a></p><p>累加</p><h1 id="pid_grating_coupler_2d_1etch.py">pid_grating_coupler_2D_1etch.py</h1><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#&quot;&quot;&quot;</span><br><span class="hljs-comment">#Copyright (c) 2020 Ansys Inc. &quot;&quot;&quot;</span><br><br><span class="hljs-comment">######## IMPORTS ########</span><br><span class="hljs-comment"># General purpose imports</span><br><span class="hljs-built_in">import</span> os,sys<br><span class="hljs-built_in">import</span> numpy as np<br><span class="hljs-built_in">import</span> scipy as sp<br><span class="hljs-built_in">import</span> json<br>sys.path.append(<span class="hljs-string">&quot;C:\\Program Files\\Lumerical\\v211\\api\\python\\&quot;</span>)<br>from lumjson <span class="hljs-built_in">import</span> LumEncoder, LumDecoder<br><br><br><span class="hljs-comment"># Optimization specific imports</span><br>from lumopt.utilities.load_lumerical_scripts <span class="hljs-built_in">import</span> load_from_lsf<br>from lumopt.utilities.wavelengths <span class="hljs-built_in">import</span> Wavelengths<br>from lumopt.geometries.parameterized_geometry <span class="hljs-built_in">import</span> ParameterizedGeometry<br>from lumopt.geometries.polygon <span class="hljs-built_in">import</span> FunctionDefinedPolygon<br>from lumopt.figures_of_merit.modematch <span class="hljs-built_in">import</span> ModeMatch<br>from lumopt.optimizers.generic_optimizers <span class="hljs-built_in">import</span> ScipyOptimizers<br>from lumopt.optimization <span class="hljs-built_in">import</span> Optimization<br>from lumopt.utilities.materials <span class="hljs-built_in">import</span> Material<br><br><span class="hljs-built_in">import</span> lumapi<br><br><span class="hljs-attr">cur_path</span> = os.path.dirname(os.path.realpath(__file__))<br><br><span class="hljs-comment"># Optimization global parameters</span><br><span class="hljs-attr">lambda_c</span> = <span class="hljs-number">1.55</span>e-<span class="hljs-number">6</span><br><span class="hljs-attr">bandwidth_in_nm</span> = <span class="hljs-number">0</span>     <span class="hljs-comment">#&lt; Only optimize for center frequency of 1550nm</span><br><span class="hljs-attr">F0</span> = <span class="hljs-number">0.95</span><br><span class="hljs-attr">height</span> = <span class="hljs-number">220</span>e-<span class="hljs-number">9</span><br><span class="hljs-attr">etch_depth</span> = <span class="hljs-number">80</span>e-<span class="hljs-number">9</span><br><span class="hljs-attr">y0</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">x_begin</span> = -<span class="hljs-number">5.1</span>e-<span class="hljs-number">6</span><br><span class="hljs-attr">x_end</span> = <span class="hljs-number">22</span>e-<span class="hljs-number">6</span><br><span class="hljs-attr">n_grates</span> = <span class="hljs-number">25</span><br><br><span class="hljs-attr">indexSi</span> = <span class="hljs-number">3.47668</span><br><span class="hljs-attr">indexSiO2</span> = <span class="hljs-number">1.44401</span><br><br><span class="hljs-attr">params_file_apod</span> = <span class="hljs-string">&quot;pid_optim_1.json&quot;</span><br><span class="hljs-attr">params_final</span> = <span class="hljs-string">&quot;pid_optim_final.json&quot;</span><br><span class="hljs-attr">base_sim_2d</span> = <span class="hljs-string">&quot;pid_grating_coupler_2D_TE_base.fsp&quot;</span><br><span class="hljs-attr">base_sim_apodized_2d</span> = <span class="hljs-string">&quot;pid_grating_coupler_2D_TE_base_apodized.fsp&quot;</span><br><span class="hljs-attr">base_script_2d</span> = &#x27;pid_grating_coupler_2D_TE_base.lsf&#x27;<br><span class="hljs-attr">sim_2d_final</span> = <span class="hljs-string">&quot;pid_grating_coupler_2D_final.fsp&quot;</span><br><br><br><span class="hljs-comment"># Minimal feature size in um. Set to 0.1 to enforce 100nm min features size!</span><br><span class="hljs-attr">min_feature_size</span> = <span class="hljs-number">0.1</span><br><br>def etched_grating(params, fdtd, <span class="hljs-attr">update_only</span> = False):<br>    <span class="hljs-attr">verts</span> = grating_params_pos(params)<br><br>    <span class="hljs-keyword">if</span> not update_only:<br>        fdtd.addpoly()<br>        fdtd.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;grating_poly&quot;</span>)<br>        fdtd.setnamed(<span class="hljs-string">&quot;grating_poly&quot;</span>, <span class="hljs-string">&quot;vertices&quot;</span>, verts)<br>        fdtd.setnamed(<span class="hljs-string">&quot;grating_poly&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>        fdtd.setnamed(<span class="hljs-string">&quot;grating_poly&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, y0)<br>        fdtd.setnamed(<span class="hljs-string">&quot;grating_poly&quot;</span>, <span class="hljs-string">&quot;index&quot;</span>, indexSi)<br><br>def grating_params_pos(params, <span class="hljs-attr">output_waveguide_length</span> = <span class="hljs-number">0.5</span>e-<span class="hljs-number">6</span>):<br>    <span class="hljs-attr">y3</span> = y0+height<br>    <span class="hljs-attr">y1</span> = y3-etch_depth<br><br>    <span class="hljs-attr">x0</span> = params[<span class="hljs-number">0</span>]*<span class="hljs-number">1</span>e-<span class="hljs-number">6</span>     <span class="hljs-comment">#&lt; First parameter is the starting position</span><br><br>    <span class="hljs-attr">verts</span> = np.array( [ [x_begin,y0],[x_begin,y3],[x0,y3],[x0,y1] ] )<br><br>    <span class="hljs-comment">## Iterate over all but the last</span><br>    for i <span class="hljs-keyword">in</span> range(n_grates-<span class="hljs-number">1</span>):<br>        <span class="hljs-attr">x1</span> = x0 + params[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]*<span class="hljs-number">1</span>e-<span class="hljs-number">6</span>    <span class="hljs-comment">#&lt; Width of the etch</span><br>        <span class="hljs-attr">x2</span> = x1 + params[i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>]*<span class="hljs-number">1</span>e-<span class="hljs-number">6</span>    <span class="hljs-comment">#&lt; Width up</span><br>        <span class="hljs-attr">verts</span> = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x2,y3],[x2,y1]])),<span class="hljs-attr">axis=0)</span><br>        <span class="hljs-attr">x0</span> = x2<br><br>    <span class="hljs-attr">x1</span> = x0 + params[(n_grates-<span class="hljs-number">1</span>)*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]*<span class="hljs-number">1</span>e-<span class="hljs-number">6</span>    <span class="hljs-comment">#&lt; Width of the etch</span><br>    <span class="hljs-comment"># x_end   = x1+output_waveguide_length</span><br>    <span class="hljs-attr">verts</span> = np.concatenate((verts,np.array([[x1,y1],[x1,y3],[x_end,y3],[x_end,y0]])),<span class="hljs-attr">axis=0)</span><br><br>    return verts<br><br><br>def runGratingOptimization(bandwidth_in_nm, etch_depth, n_grates, initial_params, min_feature_size, working_dir):<br><span class="hljs-comment">### Yet another parametrization which allows to enforce minimum feature size when the optimizer only supports box constraints</span><br><span class="hljs-comment">### params = [x0, a1, b1, ..., aN]</span><br>    <span class="hljs-keyword">if</span> initial_params is None:<br>        <span class="hljs-attr">params</span> = np.zeros(<span class="hljs-number">2</span>*n_grates)<br><br>        for i <span class="hljs-keyword">in</span> range(n_grates):<br>            params[i*<span class="hljs-number">2</span>]   = <span class="hljs-number">0.2</span>     <span class="hljs-comment">#&lt; Width up</span><br>            params[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">0.4</span>*((i+<span class="hljs-number">1</span>)/(n_grates+<span class="hljs-number">1</span>))     <span class="hljs-comment">#&lt; Width of the deep etch</span><br><br>            params[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>      <span class="hljs-comment">#&lt; Overwrite the first since it has a special meaning: Start of the grating at x=0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-attr">params</span> = initial_params<br><br>    <span class="hljs-attr">bounds</span> = [(min_feature_size, <span class="hljs-number">1</span>)]*(<span class="hljs-number">2</span>*n_grates)<br>    bounds[<span class="hljs-number">0</span>] = (-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)      <span class="hljs-comment">#&lt; Bounds for the stating position</span><br><br><span class="hljs-comment"># geometry = ParameterizedGeometry(func = etched_grating,</span><br><span class="hljs-comment">#                                   initial_params = params,</span><br><span class="hljs-comment">#                                   bounds = bounds,</span><br><span class="hljs-comment">#                                   dx = 1e-5)</span><br><br>    <span class="hljs-attr">geometry</span> = FunctionDefinedPolygon(<span class="hljs-attr">func</span> = grating_params_pos,<br>    <span class="hljs-attr">initial_params</span> = params,<br>    <span class="hljs-attr">bounds</span> = bounds,<br>    <span class="hljs-attr">z</span> = <span class="hljs-number">0.0</span>,<br>    <span class="hljs-attr">depth</span> = height,<br>    <span class="hljs-attr">eps_out</span> = indexSiO2 ** <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">eps_in</span> = indexSi ** <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">edge_precision</span> = <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">dx</span> = <span class="hljs-number">1</span>e-<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">######## DEFINE FIGURE OF MERIT ########</span><br>    <span class="hljs-attr">fom</span> = ModeMatch(<span class="hljs-attr">monitor_name</span> = &#x27;fom&#x27;,<br>    <span class="hljs-attr">mode_number</span> = <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">direction</span> = &#x27;Backward&#x27;,<br>    <span class="hljs-attr">target_T_fwd</span> = lambda wl: np.ones(wl.size),<br>    <span class="hljs-attr">norm_p</span> = <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">######## DEFINE OPTIMIZATION ALGORITHM ########</span><br>    <span class="hljs-attr">optimizer</span> = ScipyOptimizers(<span class="hljs-attr">max_iter</span> = <span class="hljs-number">250</span>,<br>    <span class="hljs-attr">method</span> = &#x27;L-BFGS-B&#x27;,<br>    <span class="hljs-attr">scaling_factor</span> = <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">pgtol</span> = <span class="hljs-number">1</span>e-<span class="hljs-number">6</span>)<br><br>    <span class="hljs-comment">######## DEFINE BASE SIMULATION ########</span><br>    <span class="hljs-attr">base_script</span> = load_from_lsf(os.path.join(os.path.dirname(__file__), base_script_2d))<br><br><span class="hljs-comment">######## PUT EVERYTHING TOGETHER ########</span><br>    <span class="hljs-attr">lambda_start</span> = lambda_c*<span class="hljs-number">1</span>e9 - bandwidth_in_nm/<span class="hljs-number">2</span><br>    <span class="hljs-attr">lambda_end</span>   = lambda_c*<span class="hljs-number">1</span>e9 + bandwidth_in_nm/<span class="hljs-number">2</span><br>    <span class="hljs-attr">lambda_pts</span>   = int(bandwidth_in_nm/<span class="hljs-number">10</span>)+<span class="hljs-number">1</span><br>    <span class="hljs-attr">wavelengths</span> = Wavelengths(<span class="hljs-attr">start</span> = lambda_start*<span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, <span class="hljs-attr">stop</span> = lambda_end*<span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, <span class="hljs-attr">points</span> = lambda_pts)<br>    <span class="hljs-attr">opt</span> = Optimization(<span class="hljs-attr">base_script</span> = base_script,<br>    <span class="hljs-attr">wavelengths</span> = wavelengths,<br>    <span class="hljs-attr">fom</span> = fom,<br>    <span class="hljs-attr">geometry</span> = geometry,<br>    <span class="hljs-attr">optimizer</span> = optimizer,<br>    <span class="hljs-attr">use_var_fdtd</span> = False,<br>    <span class="hljs-attr">hide_fdtd_cad</span> = False,<br>    <span class="hljs-attr">use_deps</span> = True,<br>    <span class="hljs-attr">plot_history</span> = True,<br>    <span class="hljs-attr">store_all_simulations</span> = True,<br>    <span class="hljs-attr">save_global_index</span> = False,<br>    <span class="hljs-attr">label</span> = None)<br><br><span class="hljs-comment">######## RUN THE OPTIMIZER ########</span><br>    <span class="hljs-attr">result</span> = opt.run(<span class="hljs-attr">working_dir=working_dir)</span><br><br>    return result<br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    <span class="hljs-attr">params_file</span> = params_file_apod<br>    <span class="hljs-attr">result_file</span> = params_final<br>    <span class="hljs-attr">sim_file</span> = sim_2d_final<br><br><span class="hljs-keyword">with</span> open(os.path.join(cur_path, params_file)) as fh:<br>    <span class="hljs-attr">initial_params</span> = json.load(fh, <span class="hljs-attr">cls=LumDecoder)[&quot;initial_params&quot;]</span><br><br><span class="hljs-attr">cur_path</span> = os.path.dirname(os.path.realpath(__file__))<br><span class="hljs-attr">working_dir</span> = os.path.join(cur_path,&#x27;FreeGrating_1etch&#x27;)<br><br><span class="hljs-attr">opt_result_2D</span> = runGratingOptimization(<span class="hljs-attr">bandwidth_in_nm=bandwidth_in_nm,</span><br><span class="hljs-attr">etch_depth=etch_depth,</span><br><span class="hljs-attr">n_grates</span> = n_grates,<br><span class="hljs-attr">initial_params=initial_params,</span><br><span class="hljs-attr">min_feature_size=min_feature_size,</span><br><span class="hljs-attr">working_dir=working_dir)</span><br><br><span class="hljs-attr">opt_params_2D</span> = opt_result_2D[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">with</span> open(os.path.join(cur_path, result_file), <span class="hljs-string">&quot;w&quot;</span>) as fh:<br>    json.dump(&#123; <span class="hljs-string">&quot;initial_params&quot;</span>: opt_params_2D &#125;, fh, <span class="hljs-attr">cls=LumEncoder,</span> <span class="hljs-attr">indent</span> = <span class="hljs-number">4</span>)<br><br>np.savetxt(os.path.join(cur_path, <span class="hljs-string">&quot;apod_2D_params.txt&quot;</span>), opt_params_2D)<br><br><span class="hljs-comment">######## 2-D SIMULATION WITH OPTIMIZED STRUCTURE ########</span><br><span class="hljs-keyword">with</span> lumapi.FDTD(<span class="hljs-attr">filename</span> = os.path.join(cur_path, base_sim_2d), <span class="hljs-attr">hide</span> = True) as fdtd:<br>    <span class="hljs-attr">vtx</span> = grating_params_pos(opt_params_2D)<br>    fdtd.addpoly()<br>    fdtd.set(<span class="hljs-string">&quot;vertices&quot;</span>, vtx)<br>    fdtd.set(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>    fdtd.set(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>    fdtd.set(<span class="hljs-string">&quot;index&quot;</span>, indexSi)<br>    fdtd.save(os.path.join(cur_path, sim_file))<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220722204019512.png"></p><p><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220720182721687.png"></p><p><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220722204110420.png"></p><p><img src="/2022/07/13/Lumerical/inverse%20design%20%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA/image-20220721153833886.png"></p><h2 id="np.zero">np.zero</h2><p>用法：zeros(<a href="https://so.csdn.net/so/search?q=shape&amp;spm=1001.2101.3001.7020">shape</a>,dtype=float, order='C')</p><p>返回：返回来一个给定形状和类型的用0填充的<a href="https://so.csdn.net/so/search?q=数组&amp;spm=1001.2101.3001.7020">数组</a>；</p><p>参数：shape:形状</p><p>​ dtype:数据类型，可选参数，默认numpy.float64</p><p>​ dtype类型：t ,位域,如t4代表4位</p><p>​ b,布尔值，true or false</p><p>​ i,整数,如i8(64位）</p><p>​ u,无符号整数，u8(64位）</p><p>​ f,浮点数，f8（64位）</p><p>​ c,浮点负数，</p><p>​ o,对象，</p><p>​ s,a，字符串，s24</p><p>​ u,unicode,u24</p><p>​ order:可选参数，c代表与c语言类似，行优先；F代表列优先</p><p>例子</p><p>np.zeros(5) array([ 0., 0., 0., 0., 0.])</p><h2 id="geometry">geometry</h2><h3 id="parameterizedgeometry">parameterizedGeometry</h3><p>在此示例中，我们使用<em>函数 FunctionDefinedPolygon</em>将光栅耦合器几何图形设置为多边形。或者，我们可以改用函数<em>ParametrizedGeometry</em>，从而在几何形状的设置方式上提供更大的灵活性。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bounds </span>= [(min_feature_size, <span class="hljs-number">1</span>)]*(<span class="hljs-number">2</span>*n_grates)<br><span class="hljs-keyword">bounds[0] </span>= (-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)      <span class="hljs-comment">#&lt; Bounds for the stating position</span><br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># geometry = ParameterizedGeometry(func = etched_grating,</span><br><span class="hljs-meta">#                                   initial_params = params,</span><br><span class="hljs-meta">#                                   bounds = bounds,</span><br><span class="hljs-meta">#                                   dx = 1e-5)</span><br></code></pre></td></tr></table></figure><h3 id="functiondefinedpolygon">FunctionDefinedPolygon</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">geometry</span> = FunctionDefinedPolygon(func = grating_params_pos,<br><span class="hljs-attr">initial_params</span> = params,<br><span class="hljs-attr">bounds</span> = bounds,<br><span class="hljs-attr">z</span> = <span class="hljs-number">0.0</span>,<br><span class="hljs-attr">depth</span> = height,<br><span class="hljs-attr">eps_out</span> = indexSiO2 ** <span class="hljs-number">2</span>,<br><span class="hljs-attr">eps_in</span> = indexSi ** <span class="hljs-number">2</span>,<br><span class="hljs-attr">edge_precision</span> = <span class="hljs-number">5</span>,<br><span class="hljs-attr">dx</span> = <span class="hljs-number">1</span>e-<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>dx 是最小网格</p><p>bounds是每个参数的取值范围。</p><div class="code-wrapper"><pre><code class="hljs">eps_out = indexSiO2 ** 2,eps_in = indexSi ** 2,# 有效折射率的平方</code></pre></div><p>: <strong>eps_in</strong>: float 多边形材料的介电常数。</p><p>: <strong>eps_out</strong>: float 多边形周围材料的介电常数。</p><table><caption>d<strong>x</strong>: float &gt; 0.0 使用介电常数扰动计算 FOM梯度的步长。 Default = 1e-5</caption><thead><tr class="header"><th>**</th><th>幂 - 返回x的y次幂</th></tr></thead><tbody><tr class="odd"><td></td><td></td></tr></tbody></table><h3 id="edge_precision-int"><strong>: edge_precision:</strong><em>int</em></h3><p>Number of quadrature(正交) points along each edge for computing theFOM gradient using the shape derivative approximation method.</p><p>不太知道为什么是5</p><p>沿每条边的正交点数，用于使用形状导数近似方法计算 FOM 梯度。</p><h2 id="fom设置">fom设置</h2><p><a href="https://www.it610.com/article/1558271422034415616.htm">LumericalPython API学习（七）——可视化几何 - it610.com</a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> lumopt.figures_of_merit.modematch <span class="hljs-keyword">import</span> ModeMatch<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">ModeMatch</span>(<span class="hljs-symbol">monitor_name,</span><br><span class="hljs-symbol">                <span class="hljs-symbol">mode_number</span>,</span><br><span class="hljs-symbol">                <span class="hljs-symbol">direction</span>,</span><br><span class="hljs-symbol">                <span class="hljs-symbol">target_T_fwd</span>,</span><br><span class="hljs-symbol">                <span class="hljs-symbol">norm_p</span>,</span><br><span class="hljs-symbol">                <span class="hljs-symbol">target_fom</span></span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">fom</span> = ModeMatch(monitor_name = <span class="hljs-string">&#x27;fom&#x27;</span>,<br><span class="hljs-attr">mode_number</span> = <span class="hljs-number">1</span>,<br><span class="hljs-attr">direction</span> = <span class="hljs-string">&#x27;Backward&#x27;</span>,<br><span class="hljs-attr">target_T_fwd</span> = lambda wl: np.<span class="hljs-literal">on</span>es(wl.size),<br><span class="hljs-attr">norm_p</span> = <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>mode_number = 1 意味着TE mode</p><dl><dt>direction = backward 方向</dt><dd><p>monitor_name: str 文件中 FOM 监视器的名称。</p></dd><dd><p>mode_number : str or int</p></dd></dl><p>用于指定模式。</p><p>如果使用 varFDTD 求解器：</p><p>• ‘fundamental mode’ • int - 用户选择模式号</p><p>If the FDTD solver is used:</p><p>• ‘fundamental mode’ • ‘fundamental TE mode’ • ‘fundamental TM mode’• int - user select mode number</p><p>: direction : str</p><p>方向由FDTD坐标确定；对于在正方向传播的模式，方向是向前（forward）的。</p><p>• ‘Backward’ • ‘Forward’</p><p>: multi_freq_source: boolean（布尔值）, optional 只能由高级用户启用.See frequency Frequency dependent mode profile for more info. Default =False</p><p>: target_T_fwd: float or function一个函数，它将获取波长点的数量并返回值 [0,1]。 通常作为 lambda函数（lambda function）或单波长 FOM 的单个浮点值传递。要指定更高级的频谱，可以定义一个函数，使用 numpywindows作为模板可能会有所帮助。</p><p>: norm_p: float 是 FOM 计算中使用的广义 p 范数（generalizedp-norm）。 p 范数（p≥1）允许用户增加误差的权重。 由于 p=1提供了此函数的下限，因此更高的 p 数将增加误差项的权重。 默认 p =1.0</p><p>: target_fom: float</p><p>品质因数的目标值。 这只会改变打印和绘图的行为。如果启用此功能，则通过设置 0.0 以外的值，将给出当前 FOM 的距离。 默认 =0.0</p><h3 id="target_t_fwd-float-or-function"><strong>target_T_fwd:</strong><em>float or function</em></h3><p>A function which will take the number of Wavelengths points andreturn values [0,1]. Usually passed as a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions">lambdafunction</a> or a single float value for single wavelength FOM. Tospecify a more advanced spectrum one can define a function, it may behelpful to use, <a href="https://numpy.org/doc/stable/reference/routines.window.html">numpywindows</a> as a template.</p><h3 id="norm_p-float"><strong>: norm_p:</strong> <em>float</em></h3><p>Is the <a href="https://en.wikipedia.org/wiki/Norm_(mathematics)">generalizedp-norm</a> used in the FOM calculation. The p-norm, with p≥1p≥1 allowsthe user to increase the weight of the error. Since p=1p=1 provides alower bound on this function, a higher p-number will increase the weightof the error term. Default p =1.0</p><h3 id="numpy.ones">numpy.ones（）</h3><p>函数参数 (numpy.ones() function arguments)</p><p>numpy.ones（）函数的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ones(shape, dtype<span class="hljs-operator">=</span><span class="hljs-keyword">None</span>, <span class="hljs-keyword">order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><p>1.shape：一个整数类型或者一个整数元组，用于定义数组的大小。如果仅指定一个整数类型变量，则返回一维数组。如果指定的是整数元组，则返回给定形状的数组。2.dtype：可选参数，默认值为float。用于指定数组的数据类型。3.order：指定内存重以行优先(‘C’)还是列优先(‘F’)顺序存储多维数组。</p><h3 id="lambda-函数">lambda 函数</h3><p><a href="https://zhuanlan.zhihu.com/p/80960485">细说Python的lambda函数用法，建议收藏- 知乎 (zhihu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">lambda argument_list:expersion<br></code></pre></td></tr></table></figure><h2 id="optimizer">optimizer</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">optimizer = ScipyOptimizers(max_iter = <span class="hljs-number">250</span>,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &#x27;<span class="hljs-title">L</span>-<span class="hljs-title">BFGS</span>-<span class="hljs-title">B</span>&#x27;,</span><br><span class="hljs-function"><span class="hljs-title">scaling_factor</span> = 1,</span><br><span class="hljs-function"><span class="hljs-title">pgtol</span> = 1<span class="hljs-title">e</span>-6)</span><br></code></pre></td></tr></table></figure><p><strong>: method:</strong> <em>str</em></p><p>Chosen minimization algorithm; experimenting with this option shouldonly be done by advanced users. Default = ‘L-BFGS-B'</p><p><strong>: scaling_factor:</strong> <em>none,</em> <em>float,np.array</em></p><p>None, scalar or a vector the same length as the optimizationparameters. This is used to scale the optimization parameters. As of2021R1.1, the default behavior in shape optimization is to automaticallymap the parameters the range [0,1] within the optimization routines;which was always the case in topology. The <a href="https://support.lumerical.com/hc/en-us/articles/360052044913">bounds</a>,defined in the geometry class, or eps_min/eps_max are used for this.Default = None</p><p><strong>: pgtol:</strong> <em>float</em></p><p>The iteration will stop when max(|proj gi| i = 1, ...,n)&lt;=pgtol|max(|proj gi| i = 1, ..., n)&lt;=pgtol| where gigi is thei-th component of the projected gradient. Default = 1.0e-5</p><h2 id="仿真设置">仿真设置</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">base_script = load<span class="hljs-constructor">_from_lsf(<span class="hljs-params">os</span>.<span class="hljs-params">path</span>.<span class="hljs-params">join</span>(<span class="hljs-params">os</span>.<span class="hljs-params">path</span>.<span class="hljs-params">dirname</span>(<span class="hljs-params">__file__</span>)</span>, base_script_2d))<br></code></pre></td></tr></table></figure><h2 id="合并">合并</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">######## PUT EVERYTHING TOGETHER ########</span><br>    <span class="hljs-attr">lambda_start</span> = lambda_c*<span class="hljs-number">1</span>e9 - bandwidth_in_nm/<span class="hljs-number">2</span><br>    <span class="hljs-attr">lambda_end</span>   = lambda_c*<span class="hljs-number">1</span>e9 + bandwidth_in_nm/<span class="hljs-number">2</span><br>    <span class="hljs-attr">lambda_pts</span>   = int(bandwidth_in_nm/<span class="hljs-number">10</span>)+<span class="hljs-number">1</span><br>    <span class="hljs-attr">wavelengths</span> = Wavelengths(start = lambda_start*<span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, stop = lambda_end*<span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, points = lambda_pts)<br>    <span class="hljs-attr">opt</span> = Optimization(base_script = base_script,<br>    <span class="hljs-attr">wavelengths</span> = wavelengths,<br>    <span class="hljs-attr">fom</span> = fom,<br>    <span class="hljs-attr">geometry</span> = geometry,<br>    <span class="hljs-attr">optimizer</span> = optimizer,<br>    <span class="hljs-attr">use_var_fdtd</span> = <span class="hljs-literal">False</span>,<br>    <span class="hljs-attr">hide_fdtd_cad</span> = <span class="hljs-literal">False</span>,<br>    <span class="hljs-attr">use_deps</span> = <span class="hljs-literal">True</span>,<br>    <span class="hljs-attr">plot_history</span> = <span class="hljs-literal">True</span>,<br>    <span class="hljs-attr">store_all_simulations</span> = <span class="hljs-literal">True</span>,<br>    <span class="hljs-attr">save_global_index</span> = <span class="hljs-literal">False</span>,<br>    <span class="hljs-attr">label</span> = None)<br></code></pre></td></tr></table></figure><h2 id="运行">运行</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">######## RUN THE OPTIMIZER ########<br>    result = opt.run(working_dir=working_dir)<br><br>    return result<br></code></pre></td></tr></table></figure><h1 id="主函数">主函数</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    params_file = params_file_apod<br>    result_file = params_final<br>    sim_file = sim_2d_final<br><br>with open(os.path.join(cur_path, params_file)) as fh:<br>    initial_params = json.load(fh, <span class="hljs-attribute">cls</span>=LumDecoder)[<span class="hljs-string">&quot;initial_params&quot;</span>]<br><br>cur_path = os.path.dirname(os.path.realpath(__file__))<br>working_dir = os.path.join(cur_path,<span class="hljs-string">&#x27;FreeGrating_1etch&#x27;</span>)<br><br>opt_result_2D = runGratingOptimization(<span class="hljs-attribute">bandwidth_in_nm</span>=bandwidth_in_nm,<br><span class="hljs-attribute">etch_depth</span>=etch_depth,<br>n_grates = n_grates,<br><span class="hljs-attribute">initial_params</span>=initial_params,<br><span class="hljs-attribute">min_feature_size</span>=min_feature_size,<br><span class="hljs-attribute">working_dir</span>=working_dir)<br><br>opt_params_2D = opt_result_2D[1]<br><br>with open(os.path.join(cur_path, result_file), <span class="hljs-string">&quot;w&quot;</span>) as fh:<br>    json.dump(&#123; <span class="hljs-string">&quot;initial_params&quot;</span>: opt_params_2D &#125;, fh, <span class="hljs-attribute">cls</span>=LumEncoder, indent = 4)<br><br>np.savetxt(os.path.join(cur_path, <span class="hljs-string">&quot;apod_2D_params.txt&quot;</span>), opt_params_2D)<br><br><span class="hljs-comment">######## 2-D SIMULATION WITH OPTIMIZED STRUCTURE ########</span><br>with lumapi.FDTD(filename = os.path.join(cur_path, base_sim_2d), hide = <span class="hljs-literal">True</span>) as fdtd:<br>    vtx = grating_params_pos(opt_params_2D)<br>    fdtd.addpoly()<br>    fdtd.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>, vtx)<br>    fdtd.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>, 0)<br>    fdtd.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>, 0)<br>    fdtd.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>, indexSi)<br>    fdtd.save(os.path.join(cur_path, sim_file))<br><br></code></pre></td></tr></table></figure><h2 id="np.savetxt">np.savetxt</h2><p><a href="https://www.cnblogs.com/lindaxin/p/8392956.html">np.savetxt()——将array保存到txt文件，并保持原格式- 深度学习1 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>inverse design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>inverse design of grating coupler -- script learning</title>
    <link href="/2022/07/13/Lumerical/mode%20%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/07/13/Lumerical/mode%20%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>mode 脚本学习</p><h1 id="pid_grating_coupler_preliminar_design.lsf">pid_grating_coupler_preliminar_design.lsf</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><pre><code class="hljs lumerical">## Calculate the optimal grating pitch from the effective<br>## indices of the slab modes using the FDE solver in MODE.<br><br>clear;<br>load(&quot;pid_grating_coupler_preliminary_design&quot;);<br><br># ------------------<br># Design Parameters:<br># ------------------<br>mode_num = 1; # TM<br>theta_deg = 5.0;<br>theta = theta_deg*pi/180;<br>setanalysis(&#x27;wavelength&#x27;,1.55e-6);<br>?lambda = getanalysis(&quot;wavelength&quot;);<br>index_SiO2 = 1.44401;<br>waveguide_thickness = 220e-9;<br>etch = 80e-9;<br><br># -----------<br># Slab Modes:<br># -----------<br><br># slab mode on thinest part of the grating<br>switchtolayout;<br>setnamed(&quot;::model&quot;, &quot;thickness&quot;, waveguide_thickness);<br>setnamed(&quot;::model&quot;, &quot;etch_depth&quot;, etch);<br>findmodes;<br>neff_thin = real(getresult(&quot;FDE::data::mode&quot;+num2str(mode_num),&quot;neff&quot;));<br><br># slab mode on thickest part of the grating<br>switchtolayout;<br>setnamed(&quot;::model&quot;, &quot;thickness&quot;, waveguide_thickness);<br>setnamed(&quot;::model&quot;, &quot;etch_depth&quot;, 0);<br>findmodes; # first mode should be TEz slab mode confined to the grating<br>neff_thick = real(getresult(&quot;FDE::data::mode&quot;+num2str(mode_num),&quot;neff&quot;));<br><br># ---------------------------------<br># Grating Pitch Initial Parameters:<br># ---------------------------------<br>F0 = 0.95;<br>?x0 = -2.5;<br>?R = 0.03;<br>?a = neff_thin - index_SiO2*sin(theta);<br>?b = neff_thick - neff_thin;<br><br>initial_params = [ x0, R, a, b ];<br>jsonsave(&quot;pid_grating_coupler_initial_params.json&quot;, initial_params);<br><br></code></pre></td></tr></table></figure><h1 id="setanalysis">setanalysis</h1><p>Sets calculation parameters in MODE' FDE and FEEM analysiswindow.</p><table><colgroup><col style="width: 39%"><col style="width: 60%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?setanalysis;</td><td style="text-align: left;">Lists all the parameters in the analysiswindow.</td></tr><tr class="even"><td style="text-align: left;">setanalysis("property", value);</td><td style="text-align: left;">Sets"property" to value.</td></tr></tbody></table><h1 id="getanalysis">getanalysis</h1><table><colgroup><col style="width: 28%"><col style="width: 71%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?getanalysis;</td><td style="text-align: left;">Lists all the parameters in the analysiswindow.</td></tr><tr class="even"><td style="text-align: left;">getanalysis("property");</td><td style="text-align: left;">Returns the current value for theparticular property on the analysis window</td></tr></tbody></table><h1 id="findmodes---script-command">findmodes - Script command</h1><p><a href="https://optics.ansys.com/hc/en-us/articles/360020687354">MODE</a></p><p>Calculates the modes supported by the structure using the currentcalculation settings. This function is the script equivalent to the"Calculate Modes" button. Each mode will be saved as a D-CARD named"modeX", where X is the xth mode found. The D-CARD saves data such aseffective index and mode profile.</p><table><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">n=findmodes;</td><td style="text-align: left;">n will be equal to the number of modesfound.</td></tr></tbody></table><p><strong>Example</strong></p><p>To perform a frequency sweep on the first mode and plot thedispersion:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">switchtolayout</span>;<br><span class="hljs-attribute">findmodes</span>;selectmode(<span class="hljs-number">1</span>);setanalysis(<span class="hljs-string">&quot;track selected mode&quot;</span>,<span class="hljs-number">1</span>);setanalysis(<span class="hljs-string">&quot;detailed dispersion calculation&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-attribute">frequencysweep</span>;D=getdata(<span class="hljs-string">&quot;frequencysweep&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>);f=getdata(<span class="hljs-string">&quot;frequencysweep&quot;</span>,<span class="hljs-string">&quot;f_D&quot;</span>);<br><span class="hljs-attribute">plot</span>(c/f*<span class="hljs-number">1</span>e<span class="hljs-number">6</span>,D*<span class="hljs-number">1</span>e<span class="hljs-number">6</span>,<span class="hljs-string">&quot;Wavelength (um)&quot;</span>, <span class="hljs-string">&quot;Dispersion (ps/nm/km)&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="section">?</h1><ul><li><a href="https://support.lumerical.com/hc/en-us/articles/360034410434--">?</a>:Display output on screen.</li></ul><h1 id="getresult">getresult</h1><p>Get results from simulation objects. Results will be returned asdatasets.</p><table><colgroup><col style="width: 36%"><col style="width: 63%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">?getresult("monitor_name");</td><td style="text-align: left;">Returns the names of all the results forthe monitor. All the dataset and scalar matrix results will be returnedin this case.</td></tr><tr class="even"><td style="text-align: left;">R = getresult("monitor_name","T");</td><td style="text-align: left;">Returns the result T from the monitor. Tis a dataset.</td></tr></tbody></table><p><strong>Examples</strong></p><p>This example shows how to get the electric field dataset from amonitor. We then apply a number of operations to the dataset, such asfinding the maximum |E|^2 value, viewing the dataset with thevisualizer, and creating a plot of Ex at the first frequency point.</p><p>Note that E is a dataset, rather than a simple matrix based variable.Data within the dataset can be accessed with the '.' operator, as shownbelow.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">get</span> Electric field dataset<br>E<span class="hljs-operator">=</span>getresult(&quot;monitor&quot;,&quot;E&quot;);<br># output dataset <span class="hljs-keyword">value</span> <span class="hljs-keyword">to</span> prompt<br>?E;<br># <span class="hljs-keyword">check</span> size <span class="hljs-keyword">of</span> position vectors <span class="hljs-keyword">and</span> data matrices<br>?size(E.f);<br>?size(E.Ex);<br># find maximum <span class="hljs-operator">|</span>E<span class="hljs-operator">|</span><span class="hljs-operator">^</span><span class="hljs-number">2</span> <span class="hljs-keyword">value</span> <br>?<span class="hljs-built_in">max</span>(E.E2);<br># <span class="hljs-keyword">view</span> dataset <span class="hljs-keyword">with</span> visualizer<br>visualize(E);<br># <span class="hljs-keyword">select</span> <span class="hljs-keyword">first</span> frequency point <span class="hljs-keyword">of</span> Ex data, <span class="hljs-keyword">then</span> <span class="hljs-keyword">create</span> plot<br>Ex <span class="hljs-operator">=</span> pinch(E.Ex,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>); <br>image(E.x<span class="hljs-operator">*</span><span class="hljs-number">1e6</span>,E.y<span class="hljs-operator">*</span><span class="hljs-number">1e6</span>,Ex,&quot;x (um)&quot;,&quot;y (um)&quot;,&quot;Ex&quot;);<br> E vs x, y, z, lambda<span class="hljs-operator">/</span>f<br> <span class="hljs-keyword">result</span>: <br> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <br> <span class="hljs-keyword">result</span>: <br> <span class="hljs-number">343</span> <span class="hljs-number">255</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <br> <span class="hljs-keyword">result</span>: <br> <span class="hljs-number">3.223651</span> <br></code></pre></td></tr></table></figure><h1 id="num2str">num2str</h1><p>Converts an integer, floating point number, or matrix into a string.Matrices can only be 1D or 2D. Users can use the format script commandto change the precision of the output or since the 2019b r6 releases,users can specify the format by providing a second argument to thecommand.</p><table><colgroup><col style="width: 29%"><col style="width: 70%"></colgroup><thead><tr class="header"><th style="text-align: left;"><strong>Syntax</strong></th><th style="text-align: left;"><strong>Description</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">out = num2str(x);</td><td style="text-align: left;">Converts the number x into a string. x canalso be a 1D or 2D matrix. The tab character (rather than space) will beused as delimiter(分隔符) between columns.</td></tr><tr class="even"><td style="text-align: left;">out = num2str(x, format);</td><td style="text-align: left;">Converts the number x into a string. x canalso be a 1D or 2D matrix. The format type options include:<strong>integers</strong> : %u: unsigned integer, takes the absolutevalue of the input %d: decimal signed integer, rounds the input %i:decimal signed integer, rounds the input <strong>floating point</strong>: %f: double %g: double %G: double, capital 'E' used for the exponentialnotation <strong>exponential</strong> : %e: double %E: double, capital'E' used for the exponential notationWith the above format type options,both width and precision can be defined for the conversion. Boostformatting can also be used. These flags appear directly after the "%"in the format argument: <strong>flags</strong> : +: shows sign for allnumbers 0: pad to full width with leading zero</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inverse Design of Grating Coupler</title>
    <link href="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://optics.ansys.com/hc/en-us/articles/360042800573-Inverse-Design-of-Grating-Coupler-2D-">InverseDesign of Grating Coupler (2D) – Ansys Optics</a></p><p>在这个例子中，我们将会使用逆向设计工具箱（lumopt）来设计一个SOI光栅耦合器。相比于粒子群算法（particleswarmoptimization，PSO），这种优化算法能够在几次迭代后就能获得最佳结果。最佳设计将被导出到GDS文件中，以进行进一步的模拟或制造。</p><p><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220712154030222.png"></p><h1 id="overview">OVERVIEW</h1><p><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/workflow_-_Inverse_design_of_grating_coupler__2D_.png"></p><p>Lumerical的逆设计功能通过将基于梯度的优化例程的强大功能与麦克斯韦方程组基本属性中的效率相结合，提供了无与伦比的优化性能。此示例将演示如何使用逆向设计方法生成具有最大耦合效率的TE绝缘体硅（SOI）光栅耦合器设计。此外，我们将演示如何使用参数修改示例，以便您可以将此方法重用于自己的设计。</p><p>此示例广泛借鉴了 LumOpt 框架：</p><ul><li><a href="https://support.lumerical.com/hc/en-us/articles/360049853854">PhotonicInverse Design Overview - Python API</a></li><li><a href="https://support.lumerical.com/hc/en-us/articles/360050995394">GettingStarted with lumopt - python API</a></li><li><a href="https://support.lumerical.com/hc/en-us/articles/360052044913">OptimizableGeometry - PythonAPI</a>https://support.lumerical.com/hc/en-us/articles/360052044913)</li></ul><h2 id="步骤一在-mode-中定义初始仿真"><strong>步骤一：在 MODE中定义初始仿真</strong></h2><p>这一初始步骤的目标是为优化找到一个良好的起点。使用MODEFDE求解器，我们根据优化参数（中心波长，蚀刻深度，光纤角度）确定初始线性趾形光栅。</p><h2 id="步骤二使用2d-fdtd-线性优化切趾光栅"><strong>步骤二：使用2D FDTD线性优化切趾光栅</strong></h2><p>第二步是使用一组有限的参数来优化光栅。我们使用步骤 1中定义的切趾光栅作为起点。光栅的数量固定在25个，蚀刻深度固定在80nm。从步骤1获得的一组4个参数，作为光栅切趾的函数，用于提取初始参数集以最大化传输/耦合。</p><p>从上一步中找到的初始条件开始，我们现在使用光栅壁的x坐标作为自由参数（2x25个参数）来运行优化。</p><h3 id="包括制造约束">包括制造约束</h3><p>我们运行2D优化，设置最小特征尺寸约束（设置为100nm），以确保设备可制造。</p><h2 id="步骤3提取3d设计和gds文件还不太懂">步骤3：提取3D设计和GDS文件（还不太懂）</h2><p>带有弯曲光栅的优化光栅耦合器组件形状将导出为GDSII格式，并导出为3D模拟文件，可用于进一步的模拟和/或制造（掩模设计）。我们使用覆盖源区域的圆形光栅来确保收集所有光纤光。我们还使用短<a href="https://support.lumerical.com/hc/en-us/articles/360042799713-SOI-taper-design-varFDTD-and-FDTD-">线性锥度</a>连接到450nm宽波导。光栅和锥度的几何形状可以由设计人员进一步优化。</p><p><a href="https://support.lumerical.com/hc/en-us/articles/1500000306621">PhotonicInverse Design: Grating Coupler (3D)</a></p><h1 id="运行和结果运行模型的说明和关键结果的讨论">运行和结果(运行模型的说明和关键结果的讨论)</h1><h2 id="步骤1定义基本仿真参数">步骤1：定义基本仿真参数</h2><p>如果要按案例运行，则不需要执行此步骤，但是，根据需要修改初始模拟文件需要执行此步骤。</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.在模式下打开模拟文件 pid_grating_coupler_preliminary_design<span class="hljs-selector-class">.lms</span><br><span class="hljs-number">2</span>.修改所需的基本仿真参数，保存文件。<br><span class="hljs-number">3</span>.打开脚本文件 pid_grating_coupler_preliminary_design<span class="hljs-selector-class">.lsf</span><br><span class="hljs-number">4</span>.修改参数并运行脚本<br></code></pre></td></tr></table></figure><p>对于给定的中心波长<span class="math inline">\(\lambda_{c}\)</span>和给定的刻蚀深度<span class="math inline">\(e\)</span>，我们可以按照参考文献[1]，根据物理参数设计一个切趾光栅。在这里，我们进行简单地推导，更多关于变量的详细信息和精确定义，见参阅参考。</p><p>主要思想是使用切趾光栅的局部有效折射率。对于每一个单元，使用插值法，有效折射率可用下式近似计算：<span class="math display">\[n_{eff}=F\cdot{n_0}+(1-F)n_E\]</span> F是填充分数(占空比),<span class="math inline">\(n_0\)</span>是未刻蚀区域的有效折射率率，<span class="math inline">\(n_E\)</span>是部分刻蚀区域的有效折射率</p><p>为了确定这些有效指数，我们使用 MODE FDE求解器。对220nm高度的硅波导进行仿真，使用折射率为3.476683.47668的硅，以及折射率为1.444011.44401的背景材料（SiO2）。</p><p>我们可以写出布拉格条件的公式，用于计算光栅周期 <span class="math display">\[Λ=\frac{λ_c}{n_{eff}-n_{bg}sin\theta}\]</span> <span class="math inline">\(\theta\)</span>是入射光的入射角度,<span class="math inline">\(\lambda{c}\)</span>是中心波长,<span class="math inline">\(n_{bg}\)</span>是背景折射率</p><p>对于一个线性切趾光栅，填充因子随着波导的位置而改变 <span class="math display">\[F(x)=F_0-R \cdot x\]</span> R是切趾系数，<span class="math inline">\({F_0}\)</span>是初始的填充因子。在理想情况下，<span class="math inline">\(F_0\)</span>应该是1,因为我们以一个无刻蚀的波导开始,但是我们设置<span class="math inline">\(F_0=0.95\)</span>,目的是为了避免一些很小的间隔(trenches)。</p><p>在插值有效指数中使用线性切趾(Using the linear apodization in theinterpolated effective index:)： <span class="math display">\[n_{eff}(x)=F(x)n_0+(1-F(x))n_E=n_E+F(x)\Delta n\]</span></p><p>我们就能得到随着空间变化的光栅周期的函数： <span class="math display">\[Λ(x)=\frac{λ_c}{(n_{E}-n_{bg}sin\theta)+F(x)\Delta n}\]</span>为了找到良好的初始条件,我们对每个周期离散化处理，可以得到每个周期的填充因子<span class="math inline">\(F_i\)</span>以及周期<span class="math inline">\(Λ_i\)</span></p><p>至今，我们还剩唯一一个不知道的参数--<span class="math inline">\(R\)</span>。为了一个更加高效的优化，我们可以引入四个待优化的参数：<span class="math display">\[p=[x_0,R,a,b]\]</span> 相关计算公式如下: <span class="math display">\[F_i=F_0-R(x_{i-1}-x_0)\]</span></p><p><span class="math display">\[Λ_i=\frac{\lambda_c}{a+F_ib}\]</span></p><p><span class="math display">\[a=n_E-n_{bg}sin\theta\]</span></p><p><span class="math display">\[b=\Delta n\]</span></p><p>b是有效折射率的差值。b = neff_thick - neff_thin</p><figure><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220713231807189.png" alt="光栅耦合器结构"><figcaption aria-hidden="true">光栅耦合器结构</figcaption></figure><p>右图的下方的结构是传统的线性变迹光栅，周期是固定的。</p><p>右图的上方的结构是周期不固定的线性变迹</p><p>注意<span class="math inline">\(x_0\)</span>和R将单独定义。我们将<span class="math inline">\(x_0\)</span>设置为<span class="math inline">\(-2.5μm\)</span>，将<span class="math inline">\(R\)</span>设置为<span class="math inline">\(0.03μm^{-1}\)</span>(见参考[1])。如果你更改材料，几何形状，或者偏振（polarization），你应该进行这些参数的扫描，来找到一个合适的初始条件。</p><p>脚本<strong>pid_grating_coupler_preliminary_grating_design.lsf</strong>将会计算这些初始参数，并将结果保存在<strong>pid_grating_coupler_initial_params.json</strong>文件中，以便下一步使用。</p><h2 id="步骤二使用2d-fdyd优化切趾光栅">步骤二：使用2DFDYD优化切趾光栅</h2><p>我们首先需要找到光纤的最佳位置。</p><ol type="1"><li>用FDTD的编译器打开python脚本<strong>pid_grating_coupler_sweep_2D.py</strong></li><li>如果需要的话，可以修改参数。</li><li>运行脚本</li></ol><p>这个脚本会加载步骤一中的初始设计，并且运行光纤最佳位置的扫描，来找到最佳的位置。</p><figure><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220712155120278.png" alt="image-20220712155120278"><figcaption aria-hidden="true">image-20220712155120278</figcaption></figure><p>找到的最佳位置为<span class="math inline">\(4.2μm\)</span>，超过百分之60的传输率</p><p>The optimum position is found at 4.2μm, with a transmission over60%.</p><ol start="4" type="1"><li>用FDTD脚本编辑器,打开python 脚本<strong>pid_grating_coupler_2D_apodized.py</strong></li><li>如果需要的话,更新参数,并且运行脚本</li><li>打开脚本<strong>pid_grating_coupler_2D_1etch.py</strong></li><li>运行脚本</li></ol><p>在这一步,我们会使用从1到3的获得的参数,然后提取每个每个壁的x坐标作为自由参数。更加具体地说，参数将会是光栅的起始位置，蚀刻的宽度，以及每个光栅的齿的宽度。</p><p>脚本<strong>pid_grating_coupler_2D_apodized.py</strong>将这些参数保存到<strong>pid_optim_1.json</strong>文件中，这些参数可以用作起点。</p><p>我们在这一步中使用使用最小特征尺寸约束，将min_feature_size=0.1，这将确保，两个光栅的间隔将会大于<span class="math inline">\(100nm\)</span>。</p><figure><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220712155635544.png" alt="resuls_with_min_features_new"><figcaption aria-hidden="true">resuls_with_min_features_new</figcaption></figure><figure><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220712155957584.png" alt="optimization"><figcaption aria-hidden="true">optimization</figcaption></figure><p>最终的传输率约为60%，现在的光栅耦合器易于制造。优化的光栅参数保存在<strong>pid_optim_final.json</strong>。</p><h2 id="步骤三-提取-3d-设计和-gds">步骤三: 提取 3D 设计和 GDS</h2><ol type="1"><li>打开脚本<strong>pid_grating_coupler_3D.py</strong></li><li>如果需要，请修改设置</li><li>运行脚本</li></ol><p>该脚本将加载优化结果，设置相应的3D模拟，并从结构中提取GDS。</p><p><img src="/2022/07/08/Lumerical/%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E9%80%86%E8%AE%BE%E8%AE%A1/image-20220712160224645.png"></p><h1 id="一些重要的模型设置">一些重要的模型设置</h1><p>优化的主要参数在脚本的初始设置，并且保存在初始模拟文件<strong>pid_grating_coupler_2D_TE_base.fsp</strong>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Optimization global parameters</span><br><span class="hljs-attr">lambda_c</span> = <span class="hljs-number">1.55</span>e-<span class="hljs-number">6</span> <br><span class="hljs-attr">bandwidth_in_nm</span> = <span class="hljs-number">0</span> <span class="hljs-comment">#&lt; Only optimize for center frequency of 1550nm</span><br><span class="hljs-attr">F0</span> = <span class="hljs-number">0.95</span><br><span class="hljs-attr">height</span> = <span class="hljs-number">220</span>e-<span class="hljs-number">9</span><br><span class="hljs-attr">etch_depth</span> = <span class="hljs-number">80</span>e-<span class="hljs-number">9</span><br><span class="hljs-attr">y0</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">x_begin</span> = -<span class="hljs-number">5.1</span>e-<span class="hljs-number">6</span><br><span class="hljs-attr">x_end</span> = <span class="hljs-number">22</span>e-<span class="hljs-number">6</span><br><span class="hljs-attr">n_grates</span> = <span class="hljs-number">25</span><br><br><span class="hljs-attr">indexSi</span> = <span class="hljs-number">3.47668</span><br><span class="hljs-attr">indexSiO2</span> = <span class="hljs-number">1.44401</span><br></code></pre></td></tr></table></figure><ul><li><strong>偏振</strong>：所选的折射率值代表SOI芯片制造工艺。由于硅和氧化硅之间的折射率对比度很高，因此集成波导的两种基本模式（TE和TM）的有效折射率之间存在很大差异。因此，SOI光栅耦合器具有很强的偏振选择性。目前的设计主要是TEmode，因为这是最常见的选择，不过也可以针对TM模式设置优化。要将极化更改为TM 或者higher order mode，需要更改<strong><em>pid_grating_coupler_preliminary_design.lsf</em></strong> 和<strong><em>pid_grating_coupler</em></strong> python 文件的<strong>ModeMatch</strong> 类中的模式编号。此外，还应更改base fsp文件中的偏振角。对于 TM 优化，在这个配置中，模式编号为 2，偏振角为 0度。</li><li><strong>倾斜角度</strong>：耦合效率很大程度上取决于光纤如何与顶部氧化硅包层相遇。在本例中，我们使用高斯光束作为光纤光束输出的近似值。假设光纤的末端以很小的角度抛光，以便光纤在安装在顶部包层上时倾斜。这种倾斜可防止光反射到光纤中。</li><li><strong>蚀刻深度</strong>：耦合效率对光栅的周期、占空比和蚀刻深度高度敏感。为简单起见，这里采用固定的蚀刻深度，但是，如果可用的制造工艺提供了这种自由度，它也可以改变。</li><li><strong>衬底</strong>：如果制造的器件中存在硅衬底，则应将其包含在模拟中。衬底将对光的耦合方式产生明显影响，不能像其他器件设计中经常做的那样省略。</li><li><strong>品质因数</strong>（FOM）：该设计的目的是在所需波长下实现最佳耦合，选择优化品质因数作为通过1550nm处的光栅耦合器传输，优化算法将尝试最大化该值。Lumopt使用modepower coupling，当扫描光纤位置时，我们使用功率传输率。</li><li><strong>可优化几何形状的定义：</strong>固定y坐标的多边形，并且可修改的壁的x坐标以获得最佳几何形状。</li><li><strong>场监控器：</strong>场监控器DFT monitor (opt_field)被用于光栅中的收集光场的数据，用来计算光场的梯度，梯度被用于优化算法中。因此，场监控器的位置特别重要，因此场监控器应该覆盖全部的优化区域。</li><li><strong>品质因数场监控器</strong>：因为这个场监视器被用于计算优化所需的品质因数，（模式与输出波导的基本TE模式重叠），因此应该位于适当尺寸的光栅耦合器的输出博导中。</li><li><strong>光栅的高度和深度</strong>：几何对象的高度（深度）是根据制造过程选择的。这对于确保正确集合设置的3D仿真尤为重要。这是通过调整脚本中的height和etch_depth来完成的。将结构导出到GDS文件的脚本中需要用到这些值。</li><li><strong>参数边界和初始值</strong>：优化算法改变参数的范围以及这些参数的初始值由initial_params定义，在调用函数时将boundsarrays定义为函数 FunctionDefinedPolygonI 的输入参数。</li><li><strong>光谱范围</strong>:优化的光谱范围可以指定为数组“波长”以及优化中考虑的频率点数。请注意，选择大量频率点将使优化速度慢得多，并且在FDTD和Python环境之间传输大量数据时可能会导致问题。建议将此数字保持在尽可能低的水平，特别是对于3D 模拟。对于单频率优化，只需选择相同的开始和停止值，并将点数设置为1。</li><li><strong>最大迭代次数</strong>：虽然算法能够在品质因数的梯度低于某个阈值时停止优化，但用于定义优化算法的“max_iter”变量可用于限制算法能够执行的迭代次数。</li><li><strong>目标 FOM</strong> ：在定义 FOM时，可以使用“target_T_fwd”输入参数指定不同波长下 FOM的目标值。这应该是一个与波长数据长度相同的数组，并包含每个波长的目标FOM值（正向传输），该值可以小于1。对于所有波长，默认值为1。这使用户能够选择在设计光谱范围给出目标的Transmission。</li></ul><h1 id="使用自己的参数更新模型">使用自己的参数更新模型</h1><p><strong>几何：</strong>如果您需要为光栅耦合器定义自己的几何图形，包括SOI厚度（光栅高度）和蚀刻深度，则应在基本仿真文件和优化设置Python脚本中进行相应的更改。这可能需要更改基本脚本中的对象范围和位置，即python脚本中多边形的“etch_depth”参数，其值也会传递到脚本的GDS导出部分。源、仿真区域、网格覆盖以及场梯度和FOM 监视器的尺寸也应相应地进行调整，以确保它们正确覆盖整个结构。</p><p>在此示例中，我们使用<em>函数 FunctionDefinedPolygon</em>将光栅耦合器几何图形设置为多边形。或者，我们可以改用函数<em>ParametrizedGeometry</em>，从而在几何形状的设置方式上提供更大的灵活性。可以通过注释/取消注释来完成<em>FunctionDefinedPolygon</em>到<em>ParametrizedGeometry</em>的转换。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nix">def runGratingOptimization(bandwidth_in_nm, etch_depth, n_grates, params, working_dir):<br><br><span class="hljs-attr">bounds</span> = [(-<span class="hljs-number">4</span>,<span class="hljs-number">3</span>), <span class="hljs-comment">#&lt; Starting position (in um)</span><br> (<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>), <span class="hljs-comment">#&lt; Scaling parameter R</span><br> (<span class="hljs-number">1.5</span>,<span class="hljs-number">3</span>), <span class="hljs-comment">#&lt; Parameter a</span><br> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)] <span class="hljs-comment">#&lt; Parameter b</span><br><br> <span class="hljs-comment"># geometry = ParameterizedGeometry(func = etched_grating, </span><br> <span class="hljs-comment"># initial_params = params, </span><br> <span class="hljs-comment"># bounds = bounds, </span><br> <span class="hljs-comment"># dx = 1e-5)</span><br> <br> <span class="hljs-attr">geometry</span> = FunctionDefinedPolygon(<span class="hljs-attr">func</span> = grating_params_pos, <br> <span class="hljs-attr">initial_params</span> = params, <br> <span class="hljs-attr">bounds</span> = bounds, <br> <span class="hljs-attr">z</span> = <span class="hljs-number">0.0</span>, <br> <span class="hljs-attr">depth</span> = <span class="hljs-number">110</span>e-<span class="hljs-number">9</span>, <br> <span class="hljs-attr">eps_out</span> = indexSiO2 ** <span class="hljs-number">2</span>, <br> <span class="hljs-attr">eps_in</span> = indexSi ** <span class="hljs-number">2</span>, <br> <span class="hljs-attr">edge_precision</span> = <span class="hljs-number">5</span>, <br> <span class="hljs-attr">dx</span> = <span class="hljs-number">1</span>e-<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><strong>材料</strong>：在定义几何体时，通过调用函数DefinedPolygon（此处它们表示为折射率的平方）），模拟文件中中包含的材料（使几何体的材料（core）和围绕其周围的材料（cladding））的介电常数应传递给优化器。波导的折射率（非介电常数）（与可优化的几何体相同）也应在base仿真脚本中定义。</p><p><strong>光栅几何形状</strong>：我们使用圆形光栅进行3D模拟和GDS导出。可以使用更复杂的光栅形状，类似于<a href="https://kx.lumerical.com/t/compact-focusing-grating-couplers-for-silicon-on-insulator-integrated-circuits/6025/2">聚焦光栅耦合器</a>。</p><h1 id="进一步推动模型">进一步推动模型</h1><p>针对想要进一步自定义模型的用户的信息和提示</p><p><strong>锥度优化</strong>：3-D耦合器模型使用线性锥度部分连接到光栅开始时的集成波导。通过优化锥度形状，还可以提高耦合效率（参见SOI 锥度设计）。</p><p><strong>高效光栅耦合器</strong>：使用更复杂的光栅和混合的2-D/3-D优化策略，使用FDTD设计了在大带宽上效率高于90%的耦合器（参见参考文献）</p><h1 id="更多资源">更多资源</h1><p>Additional documentation, examples, and training material</p><h3 id="related-publications">Related publications</h3><ol type="1"><li>R. Marchetti, C. Lacava, A. Khokhar, X. Chen, I. Cristiani, D. J.Richardson, G. T. Reed, P. Petropoulos and P. Minzioni, “High-efficiencygrating-couplers: demonstration of a new design strategy,” ScientificReports 7, Article number: 16670, 2017.(https://www.nature.com/articles/s41598-017-16505-z);</li><li>Neil V. Sapra et.al, “Inverse design and demonstration of broadbandgrating couplers” IEEE Journal of Selected Topics in Quantum Electronics( Volume: 25, Issue: 3, May-June 2019 )</li><li>D. Taillaert, F. Van Laere, M. Ayre, W. Bogaerts, D. Van Thourhout,P. Bienstman and R. Baets, “Grating Couplers for Coupling betweenOptical Fibers and Nanophotonic Waveguides,” Japanese Journal of AppliedPhysics, vol. 45, no. 8a, pp. 6071-6077, 2006.</li><li>T. Watanabe, M. Ayata, U. Koch, Y. Fedoryshyn and J. Leuthold,“Perpendicular Grating Coupler Based on a Blazed Antiback-ReflectionStructure,” Journal of Lightwave Technology, vol. 35, no. 21, pp. 4663-4669, 2017.</li></ol><ul><li>https://support.lumerical.com/hc/en-us/articles/360036618513)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>Grating Coupler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>期末复习</title>
    <link href="/2022/06/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E6%9C%9F%E6%9C%AB/"/>
    <url>/2022/06/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E6%9C%9F%E6%9C%AB/</url>
    
    <content type="html"><![CDATA[<p>填空题</p><p>选择题</p><p>判断题</p><p>概念</p><p>设计题分析</p><p>给定功能</p><h1 id="第一章">第一章</h1><p>偶数个异或输出为0</p><p>数字量</p><p>信号量</p><p>采样定理</p><p>二进编码; 数的基; 数; 源码反码补码; 有符号数的补码;给一个有符号数;正数的补码和负数的补码是什么;整数和小数(小数的规则);0.5转换为小数(二进);逻辑门的输入和输出代表的不是绝对值;cmos和ttl的区间;表达一个波形设计参数,有周期,非周期,振幅,占空比,上升时间(定义:百分之10到百分之90);下降时间(定义);两个中位点作为宽度</p><p>方波不意味着周期</p><p>占空比的定义</p><p>时钟同步的定义:其他信号以时钟信号为基准</p><p>表达逻辑关系:</p><p>波形图</p><p>逻辑函数(逻辑方程)</p><p>逻辑图</p><p>真值表</p><p>基本逻辑操作:与或非; 通用门(与非和或非); 异或同或(性质)</p><p>固定功能芯片:加法器;编码器;译码器;数据选择器;数据分配器;生成校验码(奇偶校验码)</p><p>数据选择器和译码器(?)实现sop</p><p>奇偶校验的定义;里面用到的运算;原理;可能比较方便地实现一些功能;</p><p>11章</p><p>可编程逻辑:如何分类(复杂的简单的);结构;与或者非</p><p>ad变换需要什么</p><p>coms:2-2.3V, 0-0.8V正逻辑负逻辑</p><p>一般ttl和coms不混起来,有一个特殊的coms可以混起来</p><p>全加器半加器的概念</p><p>分配器是重用译码器(掌握)</p><p>移位寄存器,用途一,用途二</p><p>环形能配合译码器</p><p>计数器的模</p><p>计数器有三个异步同步</p><p>芯片至少有两个引脚接地和电源;</p><p>SSI,MSI,VLSI,ULSI</p><p>TTL,CMOS,BIMOS(TTL+CMOS)</p><p>数基</p><p>任何一个十进小数,能否表达为一个精确的二进制小数,不可能</p><p>BCD常用8421码</p><p>二进数转换十进数(防止出错)</p><p>格雷码二进码转换</p><p>德摩根律</p><p>COMS逻辑类型那个表</p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>resource</title>
    <link href="/2022/06/10/%E7%A8%8B%E8%AE%BE/%E8%B5%84%E6%BA%90/"/>
    <url>/2022/06/10/%E7%A8%8B%E8%AE%BE/%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p><strong>注意：以下世界观内容仿制《辐射4》背景故事，纯属虚构，切勿当真！</strong></p><p>After the nuclear firestorm in year 2077, human civilization is onthe verge of destruction, but new civilizations still exist on the oldand glorious wreckage. Survivors started building underground<strong>Safehouse</strong> to avoid ground fallout and explore newliving place. A Safehouse can not only provide rooms for surviving, butalso store many necessary types of living <strong>Resource</strong>.</p><p>在2077年的末世浩劫“核火风暴”之后，人类文明毁灭了，但没有完全毁灭，新的文明依然存在于旧日辉煌的残骸之上。幸存者为了躲避地面的辐射，找到新的生存空间，开始修建起<strong>地下避难所（Safehouse）</strong>。地下避难所不仅仅能提供人们居住的环境，而且还能存储各种各样的<strong>资源（Resource）</strong>。</p><h1 id="guiding">Guiding</h1><p>Assume that any kinds of Resource has its <strong>name</strong> and<strong>count</strong> in management.</p><p>假设在资源管理的概念中，每一种资源（Resource）都有对应的<strong>名称（name）</strong>和<strong>数量（count）</strong>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">struct</span> Resource &#123;<br>  <span class="hljs-built_in">string</span> name;<br>  <span class="hljs-built_in">int</span> count;<br><br>  <span class="hljs-constructor">Resource()</span>: name(<span class="hljs-string">&quot;&quot;</span>), count(<span class="hljs-number">0</span>) &#123;&#125;<br>  <span class="hljs-constructor">Resource(<span class="hljs-params">const</span> <span class="hljs-params">string</span>&amp; <span class="hljs-params">str</span>, <span class="hljs-params">const</span> <span class="hljs-params">int</span>&amp; <span class="hljs-params">c</span>)</span>: name(str), count(c) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>And a Safehouse can be regarded as <strong>a place for storing thesekinds of Resource</strong>.</p><p>而一个避难所（Safehouse）可以被视为<strong>存储这些资源的地方</strong>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Safehouse</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  Resource* _owns;  <span class="hljs-comment">// A place for storing many types of resources.</span><br>  <span class="hljs-built_in">int</span> _count_own_types;  <span class="hljs-comment">// How many types of resources has this Savehouse stored.</span><br><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-comment">// Some functions.</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>There are up to <strong>16</strong> kinds of Resource in the world,and a Safehouse may contain several kinds of them, each of which is ofcorresponding amount (or count). To manage the Resource in Safehouse,the regulator decided to use <strong>overloaded operator</strong> toexpress Resource changes, for instance, so here is the task for you:<strong>implement the operator overloading of class Safehouse</strong>,since you are the cleverest among all residents.</p><p>这个世界上最多一共有<strong>16</strong>种资源，每个避难所可能存储其中的几种，每一种资源都有其对应的数量。为了方便管理避难所的资源存储，避难所监管者决定采用<strong>重载的运算符（overloadedoperator）形式</strong>来表示避难所的资源存储变化概况。现在请你——避难所里最聪明的居民，来帮助他<strong>实现避难所的资源数量运算</strong>。</p><h1 id="details">Details</h1><p>The Implementation of Resource struct is not needed, because it hasbeen placed together with the announcement of class Safehouse in file"Safehouse.h". <strong>All you need to do is to realize some operatoroverloading functions of class Safehouse.</strong></p><p>你不需要实现用于表示资源的结构体，因为它的定义和避难所类的声明都放在"Safehouse.h"头文件中。<strong>你只需要为避难所类实现如下这些运算符重载即可。</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// &quot;Copy&quot; <span class="hljs-keyword">all</span> Resource <span class="hljs-keyword">from</span> another Safehouse <span class="hljs-keyword">to</span> <span class="hljs-keyword">current</span> Safehouse.<br>Safehouse&amp; <span class="hljs-keyword">operator</span> = (const Safehouse&amp; another);<br><br>// <span class="hljs-keyword">Add</span> a kind <span class="hljs-keyword">of</span> Resource <span class="hljs-keyword">to</span> target Safehouse.<br>// <span class="hljs-keyword">If</span> the Resource <span class="hljs-keyword">type</span> ALREADY <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> target Safehouse, just <span class="hljs-keyword">add</span> <span class="hljs-keyword">on</span> its existing count.<br>// <span class="hljs-keyword">If</span> the Resource <span class="hljs-keyword">type</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> target Safehouse, <span class="hljs-keyword">add</span> the <span class="hljs-built_in">new</span> <span class="hljs-keyword">type</span> totarget Safehouse <span class="hljs-keyword">with</span> corresponding count.<br>Safehouse <span class="hljs-keyword">operator</span> + (const Resource&amp; new_resource); <br><br>// <span class="hljs-keyword">Add</span> <span class="hljs-keyword">all</span> Resource existing <span class="hljs-keyword">in</span> another Safehouse <span class="hljs-keyword">to</span> target Safehouse.<br>// You can <span class="hljs-keyword">call</span> the overloaded <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;+ Resource&#x27;</span> above <span class="hljs-keyword">for</span> convenience.<br>Safehouse <span class="hljs-keyword">operator</span> + (const Safehouse&amp; another);<br><br>// <span class="hljs-keyword">Similar</span> <span class="hljs-keyword">to</span> the overloading <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;+ Resource&#x27;</span>.<br>Safehouse&amp; <span class="hljs-keyword">operator</span> += (const Resource&amp; new_resource);<br><br>// <span class="hljs-keyword">Similar</span> <span class="hljs-keyword">to</span> the overloading <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;+ Safehouse&#x27;</span>.<br>Safehouse&amp; <span class="hljs-keyword">operator</span> += (const Safehouse&amp; another);<br><br>// <span class="hljs-keyword">Get</span> the Resource <span class="hljs-keyword">object</span> at designated <span class="hljs-keyword">index</span>. You can assume that <span class="hljs-keyword">all</span> <span class="hljs-keyword">input</span> indexs are <span class="hljs-keyword">VALID</span>!<br>const Resource&amp; <span class="hljs-keyword">operator</span> [] (const <span class="hljs-type">int</span>&amp; <span class="hljs-keyword">index</span>) const;<br><br>// Compare <span class="hljs-keyword">current</span> Safehouse <span class="hljs-keyword">with</span> another Safehouse.<br>// &quot;Safehouse1 &gt;= Safehouse2&quot; <span class="hljs-keyword">is</span> satisfied, <span class="hljs-keyword">if</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">only</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">all</span> Resource <span class="hljs-keyword">types</span> existing <span class="hljs-keyword">in</span> Safehouse2 <span class="hljs-keyword">also</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> Safehouse1.<br>// Besides, <span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span> a <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> Resource, the corresponding amount <span class="hljs-keyword">in</span> Safehouse1 must be <span class="hljs-keyword">NOT</span> LESS THAN the corresponding amount <span class="hljs-keyword">in</span> Safehouse2.<br>// Otherwise, &quot;Safehouse1 &gt;= Safehouse2&quot; <span class="hljs-keyword">is</span> <span class="hljs-keyword">NOT</span> satisfied.<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &gt;= (const Safehouse&amp; another);<br><br>// Print <span class="hljs-keyword">all</span> existing Resource <span class="hljs-keyword">in</span> target Safehouse.<br>// The form <span class="hljs-keyword">of</span> output <span class="hljs-keyword">is</span> shown <span class="hljs-keyword">in</span> Sample Output.<br>friend ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream&amp; os, const Safehouse&amp; house);<br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>Some useful functions of class Safehouse have been implemented. Youcan use them for simplifying your own codes, or just ignore them.</p><p>在Safehouse类中实现了一些可以直接调用的函数。你可以调用它们以简化自己代码，也可以选择无视它们。</p><h2 id="sample-input">Sample Input</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Oil</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">Gunpowder</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">Leather</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">Plastic</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">Rubber</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">Lewel</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">Steel</span> <span class="hljs-number">14</span><br><span class="hljs-attribute">Iron</span> <span class="hljs-number">11</span><br><span class="hljs-attribute">Copper</span> <span class="hljs-number">22</span><br><span class="hljs-attribute">Zinc</span> <span class="hljs-number">13</span><br><span class="hljs-attribute">Wood</span> <span class="hljs-number">26</span><br><span class="hljs-attribute">Glass</span> <span class="hljs-number">17</span><br><span class="hljs-attribute">Fibre</span> <span class="hljs-number">34</span><br><span class="hljs-attribute">Grass</span> <span class="hljs-number">19</span><br><span class="hljs-attribute">Eletronic</span> <span class="hljs-number">38</span><br></code></pre></td></tr></table></figure><h2 id="sample-output-notice-how-to-put-a-safehouse-object-in-ostream">SampleOutput (Notice how to put a Safehouse object in ostream)</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">After</span> adding <span class="hljs-number">2</span> Oil to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><br><span class="hljs-attribute">After</span> adding <span class="hljs-number">4</span> Coal to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span>: <span class="hljs-number">4</span><br><br><span class="hljs-attribute">After</span> adding <span class="hljs-number">3</span> Gunpowder to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Gunpowder</span>: <span class="hljs-number">3</span><br><br><span class="hljs-attribute">After</span> adding <span class="hljs-number">6</span> Leather to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Gunpowder</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Leather</span>: <span class="hljs-number">6</span><br><br><span class="hljs-attribute">After</span> adding <span class="hljs-number">5</span> Plastic to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Gunpowder</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Leather</span>: <span class="hljs-number">6</span><br><span class="hljs-attribute">Plastic</span>: <span class="hljs-number">5</span><br><br><span class="hljs-attribute">After</span> adding <span class="hljs-number">10</span> Rubber to house<span class="hljs-number">1</span> &gt;&gt;&gt;<br><span class="hljs-attribute">Oil</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">Coal</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Gunpowder</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Leather</span>: <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Safehouse.h&quot;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Available resource types:</span><br><span class="hljs-comment">- Oil</span><br><span class="hljs-comment">- Coal</span><br><span class="hljs-comment">- Gunpowder</span><br><span class="hljs-comment">- Leather</span><br><span class="hljs-comment">- Plastic</span><br><span class="hljs-comment">- Rubber</span><br><span class="hljs-comment">- Lewel</span><br><span class="hljs-comment">- Steel</span><br><span class="hljs-comment">- Iron</span><br><span class="hljs-comment">- Copper</span><br><span class="hljs-comment">- Zinc </span><br><span class="hljs-comment">- Wood</span><br><span class="hljs-comment">- Glass</span><br><span class="hljs-comment">- Fibre</span><br><span class="hljs-comment">- Grass</span><br><span class="hljs-comment">- Electronic</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br>istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream&amp; is, Resource&amp; r) &#123;<br>is &gt;&gt; r.name &gt;&gt; r.count;<br><span class="hljs-keyword">return</span> is;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Safehouse house1;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;MAX_RESOURCE_TYPES; ++i) &#123;<br>Resource new_resource;<br>cin &gt;&gt; new_resource;<br>house1 += new_resource;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;After adding &quot;</span> &lt;&lt; new_resource.count &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; new_resource.name &lt;&lt; <span class="hljs-string">&quot; to house1 &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; house1 &lt;&lt; endl;<br>&#125;<br><br>Safehouse house2; <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;house1.<span class="hljs-built_in">GetCountOwnTypes</span>()/<span class="hljs-number">2</span>; ++i) &#123;<br>house2 = house2 + house1[i*<span class="hljs-number">2</span>];<br><br>cout &lt;&lt; <span class="hljs-string">&quot;After adding &quot;</span> &lt;&lt; house1.<span class="hljs-built_in">GetOwnsCount</span>(i*<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; house1.<span class="hljs-built_in">GetOwnsName</span>(i*<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-string">&quot; to house2 &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; house2 &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;house2 &gt;= house1? : &quot;</span> &lt;&lt; boolalpha &lt;&lt; (house2 &gt;= house1) &lt;&lt; endl;<br><br><br>Safehouse house3;<br>house3 = house1 + house3;<br>house3 += house2; <br>cout &lt;&lt; <span class="hljs-string">&quot;After adding house1 and house2 to house3 &gt;&gt;&gt;&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; house3 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;house3 &gt;= house1? : &quot;</span> &lt;&lt; boolalpha &lt;&lt; (house3 &gt;= house1) &lt;&lt; endl;<br><br>Safehouse house4 = house3;<br>house4 = house4;<br>cout &lt;&lt; <span class="hljs-string">&quot;After initializing house4 with house3 &gt;&gt;&gt; &quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; house4 &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="safehouse.hlock">safehouse.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __SAFEHOUSE__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __SAFEHOUSE__</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_RESOURCE_TYPES 16</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Resource</span> &#123;</span><br>string name;<br><span class="hljs-keyword">int</span> count;<br><br><span class="hljs-built_in">Resource</span>(): <span class="hljs-built_in">name</span>(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-built_in">count</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-built_in">Resource</span>(<span class="hljs-keyword">const</span> string&amp; str, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; c): <span class="hljs-built_in">name</span>(str), <span class="hljs-built_in">count</span>(c) &#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Safehouse</span> &#123;</span><br><br><span class="hljs-keyword">private</span>:<br>Resource* _owns;<br><span class="hljs-keyword">int</span> _count_own_types;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Safehouse</span>(): _owns(<span class="hljs-keyword">new</span> Resource[MAX_RESOURCE_TYPES]), _count_own_types(<span class="hljs-number">0</span>) &#123;&#125;<br>~<span class="hljs-built_in">Safehouse</span>() &#123;<span class="hljs-keyword">if</span>(_owns) <span class="hljs-keyword">delete</span>[] _owns;&#125;<br><br><span class="hljs-comment">// Below are some supporting functions.</span><br><br><span class="hljs-comment">// Copy constuctor for class Safehouse. </span><br><span class="hljs-built_in">Safehouse</span>(<span class="hljs-keyword">const</span> Safehouse&amp; another): _owns(<span class="hljs-keyword">new</span> Resource[MAX_RESOURCE_TYPES]), _count_own_types(another._count_own_types) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;_count_own_types; ++i) &#123;<br>_owns[i].name = another._owns[i].name;<br>_owns[i].count = another._owns[i].count;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Return how many different types of Resource does this Safehouse contain.</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetCountOwnTypes</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> _count_own_types;<br>&#125;<br><br><span class="hljs-comment">// Get the Resource name on designated index.</span><br><span class="hljs-function">string <span class="hljs-title">GetOwnsName</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; index)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">if</span>(index &gt;= _count_own_types || index &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> _owns[index].name;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Get the Resource count on designated index.</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetOwnsCount</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; index)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">if</span>(index &gt;= _count_own_types || index &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> _owns[index].count;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Find the first index of designated Resource type, return -1 if the designated Resource does not exist in Safehouse yet. </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IndexOfResource</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; resource_name)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;_count_own_types; ++i) &#123;<br><span class="hljs-keyword">if</span>(_owns[i].name == resource_name) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// Find the count of designated Resource type, return 0 if the designated Resource does not exist in Safehouse yet.</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CountOfResource</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; resource_name)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;_count_own_types; ++i) &#123;<br><span class="hljs-keyword">if</span>(_owns[i].name == resource_name) &#123;<br><span class="hljs-keyword">return</span> _owns[i].count;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// Your Implementation.</span><br>Safehouse&amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> Safehouse&amp; another);<br>Safehouse <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Resource&amp; new_resource);<br>Safehouse <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Safehouse&amp; another);<br>Safehouse&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Resource&amp; new_resource);<br>Safehouse&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Safehouse&amp; another);<br><span class="hljs-keyword">const</span> Resource&amp; <span class="hljs-keyword">operator</span> [] (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; index) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-keyword">const</span> Safehouse&amp; target);<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="hljs-keyword">const</span> Safehouse&amp; house);<br><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> </span><br><br><br></code></pre></td></tr></table></figure><h1 id="safehouse.cpp">safehouse.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Safehouse.h&gt;</span></span><br><br><br><br><br><br><br><br>Safehouse&amp; Safehouse::<span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> Safehouse&amp; another)&#123;<br>    <span class="hljs-keyword">if</span>(&amp;another == <span class="hljs-keyword">this</span>) <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    <br>    _count_own_types=another._count_own_types;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;_count_own_types;i++)&#123;<br>        _owns[i]=another._owns[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// Add a kind of Resource to target Safehouse.</span><br><span class="hljs-comment">// If the Resource type ALREADY exists in target Safehouse, just add on its existing count.</span><br><span class="hljs-comment">// If the Resource type NOT exists in target Safehouse, add the new type totarget Safehouse with corresponding count.</span><br>Safehouse Safehouse::<span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Resource&amp; n)&#123;<br>    Safehouse temp = (*<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">if</span>( temp.<span class="hljs-built_in">IndexOfResource</span>(n.name) != <span class="hljs-number">-1</span>)&#123;<br>        temp._owns[ <span class="hljs-built_in">IndexOfResource</span>(n.name)  ].count+=n.count;<br>        <span class="hljs-comment">//数量问题</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(_count_own_types==<span class="hljs-number">16</span>) <span class="hljs-keyword">return</span> temp;<br>        temp._owns[_count_own_types]=n;<br>        temp._count_own_types++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-comment">// Add all Resource existing in another Safehouse to target Safehouse.</span><br><span class="hljs-comment">// You can call the overloaded version of &#x27;+ Resource&#x27; above for convenience.</span><br>Safehouse Safehouse::<span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Safehouse&amp; a)&#123;<br>    Safehouse temp=(*<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;a._count_own_types;i++)&#123;<br>        temp = temp + a._owns[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-comment">// Similar to the overloading of &#x27;+ Resource&#x27;.</span><br>Safehouse&amp; Safehouse::<span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Resource&amp; n)&#123;<br>    <span class="hljs-keyword">if</span>( <span class="hljs-built_in">IndexOfResource</span>(n.name) != <span class="hljs-number">-1</span>)&#123;<br>        _owns[ <span class="hljs-built_in">IndexOfResource</span>(n.name)  ].count+=n.count;<br>        <span class="hljs-comment">//数量问题</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        _owns[_count_own_types]=n;<br>        _count_own_types++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// Similar to the overloading of &#x27;+ Safehouse&#x27;.</span><br>Safehouse&amp; Safehouse::<span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Safehouse&amp; a)&#123;<br>    <br>    (*<span class="hljs-keyword">this</span>) = (*<span class="hljs-keyword">this</span>) + a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// Get the Resource object at designated index. You can assume that all input indexs are VALID!</span><br><span class="hljs-keyword">const</span> Resource&amp; Safehouse::<span class="hljs-keyword">operator</span> [] (<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; index) <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> _owns[index];<br>&#125;<br><br><span class="hljs-comment">// Compare current Safehouse with another Safehouse.</span><br><span class="hljs-comment">// &quot;Safehouse1 &gt;= Safehouse2&quot; is satisfied, if and only if each of all Resource types existing in Safehouse2 also exists in Safehouse1.</span><br><span class="hljs-comment">// Besides, as for a type of Resource, the corresponding amount in Safehouse1 must be NOT LESS THAN the corresponding amount in Safehouse2.</span><br><span class="hljs-comment">// Otherwise, &quot;Safehouse1 &gt;= Safehouse2&quot; is NOT satisfied.</span><br><span class="hljs-keyword">bool</span> Safehouse::<span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-keyword">const</span> Safehouse&amp; a)&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;a._count_own_types;i++)&#123;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-built_in">IndexOfResource</span>( a._owns[i].name ) == <span class="hljs-number">-1</span> ) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-built_in">CountOfResource</span>( a._owns[i].name ) &lt; a.<span class="hljs-built_in">CountOfResource</span>( a._owns[i].name ) ) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// Print all existing Resource in target Safehouse.</span><br><span class="hljs-comment">// The form of output is shown in Sample Output.</span><br>ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="hljs-keyword">const</span> Safehouse&amp; house)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;house._count_own_types;i++)&#123;<br>        os&lt;&lt;house._owns[i].name&lt;&lt;<span class="hljs-string">&quot;: &quot;</span>&lt;&lt;house._owns[i].count&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> os;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字电路-Shift Registers</title>
    <link href="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/"/>
    <url>/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="basic-function-and-operations">basic function andoperations</h1><p>Shift Register Generator(SRG)</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531215951121.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531220923377.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531220943198.png"></p><h1 id="串进串出serial-in-serial-out">串进串出(serial in serialout)</h1><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531221125739.png"></p><h1 id="串进并出serial-in-parallel-out">串进并出(serial in parallelout)</h1><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531221315997.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531221805754.png"></p><h1 id="并进串出parallel-in-parallel-out">并进串出(parallel in parallelout)</h1><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531221914700.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531222018495.png"></p><h1 id="并进并出parallel-in-parallel-out">并进并出(parallel in parallelout)</h1><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531222200681.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531222247312.png"></p><h1 id="双向移位寄存器">双向移位寄存器</h1><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531222502390.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531222536434.png"></p><h1 id="移位寄存计数器shift-register-counter">移位寄存计数器(shiftregister counter)</h1><h2 id="纽环计数器重点">纽环计数器(重点)</h2><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531223224451.png"></p><p>初始状态一定要为0000</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531223457865.png"></p><h2 id="环形计数器重点">环形计数器(重点)</h2><p>10位环形计数器的电路逻辑图，模式=位数•模数是相同位数的扭环计数器的一半 •如果<span class="math inline">\(Q_0-Q_9\)</span>只有一个为1，其余为0，状态由1所在的位置决定，无需译码 •初始状态可以根据要求来设置</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531223944365.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224017810.png"></p><h1 id="移位寄存器应用">移位寄存器应用</h1><h2 id="移位寄存器应用示例延时电路">移位寄存器应用示例：延时电路</h2><p>原理：脉冲输入寄存器，每拍移动一位，经过n拍后输出，n位寄存器延迟n拍</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224048685.png"></p><p>延时电路示例：8位共延迟8拍，每拍1/500k=2us，延 时2*8=16us</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224112002.png"></p><h2 id="移位寄存器应用示例以74hc195构成环形计数器">移位寄存器应用示例：以74HC195构成环形计数器</h2><p>方法：<span class="math inline">\(Q_3\)</span>作为输入，<span class="math inline">\(Q_0~Q_3\)</span>初始状态为：1000</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224249524.png"></p><h2 id="移位寄存器应用示例数据的串行-并行转换电路">移位寄存器应用示例：数据的串行-并行转换电路</h2><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224326149.png"></p><p>数据的串行输入格式：0开始，8位数据，1结束</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224546114.png"></p><h2 id="通用异步收发器uart数据的串-并并-串转换">通用异步收发器（UART）：数据的串-并、并-串转换</h2><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224625993.png"></p><h1 id="逻辑符号">逻辑符号</h1><p>8位移位寄存器74HC164的关联标注逻辑符号 •共用控制块：上方带凹槽的方框•独立元件：下方的8个方框 •限制符号：SRG 8，表达8位移位寄存器•关联符号：C：控制，R：清零（Reset），箭号：移位</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224821725.png"></p><p>4位双向移位寄存器74HC194的关联标注逻辑符号•共用控制块：上方带凹槽的方框 •独立元件：下方的4个方框 •限制符号：SRG4，表达4位移位寄存器•关联符号：C：控制，M：模式，R：清零（Reset），箭号：移位</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531224856963.png"></p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531225229405.png"></p><p>需掌握的重点</p><p><img src="/2022/05/31/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E7%AC%AC%E4%B9%9D%E7%AB%A0/image-20220531230427960.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选数(dfs)</title>
    <link href="/2022/05/31/%E7%A8%8B%E8%AE%BE/%E9%80%89%E6%95%B0(dfs)/"/>
    <url>/2022/05/31/%E7%A8%8B%E8%AE%BE/%E9%80%89%E6%95%B0(dfs)/</url>
    
    <content type="html"><![CDATA[<h1 id="noip2002-普及组-选数">[NOIP2002 普及组] 选数</h1><h2 id="题目描述">题目描述</h2><p>已知 <span class="math inline">\(n\)</span> 个整数 <span class="math inline">\(x_1,x_2,\cdots,x_n\)</span>，以及 <span class="math inline">\(1\)</span> 个整数 <span class="math inline">\(k\)</span>（<span class="math inline">\(k&lt;n\)</span>）。从 <span class="math inline">\(n\)</span> 个整数中任选 <span class="math inline">\(k\)</span>个整数相加，可分别得到一系列的和。例如当 <span class="math inline">\(n=4\)</span>，<span class="math inline">\(k=3\)</span>，<span class="math inline">\(4\)</span> 个整数分别为 <span class="math inline">\(3,7,12,19\)</span>时，可得全部的组合与它们的和为：</p><p><span class="math inline">\(3+7+12=22\)</span></p><p><span class="math inline">\(3+7+19=29\)</span></p><p><span class="math inline">\(7+12+19=38\)</span></p><p><span class="math inline">\(3+12+19=34\)</span></p><p>现在，要求你计算出和为素数共有多少种。</p><p>例如上例，只有一种的和为素数：<span class="math inline">\(3+7+19=29\)</span>。</p><h2 id="输入格式">输入格式</h2><p>第一行两个空格隔开的整数 <span class="math inline">\(n,k\)</span>（<span class="math inline">\(1 \le n\le 20\)</span>，<span class="math inline">\(k&lt;n\)</span>）。</p><p>第二行 <span class="math inline">\(n\)</span> 个整数，分别为 <span class="math inline">\(x_1,x_2,\cdots,x_n\)</span>（<span class="math inline">\(1 \le x_i \le 5\times 10^6\)</span>）。</p><h2 id="输出格式">输出格式</h2><p>输出一个整数，表示种类数。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="提示">提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第二题</p><h1 id="提交代码">提交代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">int</span> n, k, x[<span class="hljs-number">21</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>, ans=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span></span>&#123;  <br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;t/<span class="hljs-number">2</span>;i++)&#123;<br>         <span class="hljs-keyword">if</span>(t%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br> <br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count, <span class="hljs-keyword">int</span> pos)</span></span>&#123;    <br>     <span class="hljs-keyword">if</span>(count &gt; k)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(sum))&#123;<br>            ans++;<br>         &#125;<br>         <span class="hljs-keyword">return</span>;    <br>     &#125;     <span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pos+<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>             sum += x[i];<br>             <span class="hljs-built_in">dfs</span>(count+<span class="hljs-number">1</span>, i);<br>             sum -= x[i];<br>         &#125;<br>     &#125;<br> &#125;<br> <br> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     cin &gt;&gt; n &gt;&gt; k;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; x[i];<br>     <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桶排序</title>
    <link href="/2022/05/31/%E7%A8%8B%E8%AE%BE/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/31/%E7%A8%8B%E8%AE%BE/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="深基9.例1选举学生会">【深基9.例1】选举学生会</h1><h2 id="题目描述">题目描述</h2><p>学校正在选举学生会成员，有 <span class="math inline">\(n(n\le999)\)</span> 名候选人，每名候选人编号分别从 1 到 <span class="math inline">\(n\)</span>，现在收集到了 <span class="math inline">\(m(m&lt;=2000000)\)</span>张选票，每张选票都写了一个候选人编号。现在想把这些堆积如山的选票按照投票数字从小到大排序。</p><h2 id="输入格式">输入格式</h2><p>输入 <span class="math inline">\(n\)</span> 和 <span class="math inline">\(m\)</span> 以及 <span class="math inline">\(m\)</span> 个选票上的数字。</p><h2 id="输出格式">输出格式</h2><p>求出排序后的选票编号。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>函数映射关系</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a,n,m,b[<span class="hljs-number">1000</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)cin&gt;&gt;a,++b[a]; <span class="hljs-comment">//记录票出现的次数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)<span class="hljs-keyword">while</span>(b[i]--)cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">//根据票出现的次数输出</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考<a href="https://zhuanlan.zhihu.com/p/125737294">【算法】排序算法之桶排序 -知乎 (zhihu.com)</a></p><p>假设数据分布在[0，100)之间，每个桶内部用链表表示，在数据入桶的同时插入排序。然后把各个桶中的数据合并。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> BUCKET_NUM = <span class="hljs-number">10</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>&#123;</span><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>)</span>:<span class="hljs-title">mData</span><span class="hljs-params">(i)</span>,<span class="hljs-title">mNext</span><span class="hljs-params">(<span class="hljs-literal">NULL</span>)</span></span>&#123;&#125;<br>ListNode* mNext;<br><span class="hljs-keyword">int</span> mData;<br>&#125;;<br><span class="hljs-function">ListNode* <span class="hljs-title">insert</span><span class="hljs-params">(ListNode* head,<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>ListNode dummyNode;<br>ListNode *newNode = <span class="hljs-keyword">new</span> ListNode(val);<br>ListNode *pre,*curr;<br>dummyNode.mNext = head;<br>pre = &amp;dummyNode;<br>curr = head;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">NULL</span>!=curr &amp;&amp; curr-&gt;mData&lt;=val)&#123;<br>pre = curr;<br>curr = curr-&gt;mNext;<br>&#125;<br>newNode-&gt;mNext = curr;<br>pre-&gt;mNext = newNode;<br><span class="hljs-keyword">return</span> dummyNode.mNext;<br>&#125;<br><span class="hljs-function">ListNode* <span class="hljs-title">Merge</span><span class="hljs-params">(ListNode *head1,ListNode *head2)</span></span>&#123;<br>ListNode dummyNode;<br>ListNode *dummy = &amp;dummyNode;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">NULL</span>!=head1 &amp;&amp; <span class="hljs-literal">NULL</span>!=head2)&#123;<br><span class="hljs-keyword">if</span>(head1-&gt;mData &lt;= head2-&gt;mData)&#123;<br>dummy-&gt;mNext = head1;<br>head1 = head1-&gt;mNext;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>dummy-&gt;mNext = head2;<br>head2 = head2-&gt;mNext;<br>&#125;<br>dummy = dummy-&gt;mNext;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>!=head1) dummy-&gt;mNext = head1;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>!=head2) dummy-&gt;mNext = head2;<br><br><span class="hljs-keyword">return</span> dummyNode.mNext;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BucketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;ListNode*&gt; <span class="hljs-title">buckets</span><span class="hljs-params">(BUCKET_NUM,(ListNode*)(<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br><span class="hljs-keyword">int</span> index = arr[i]/BUCKET_NUM;<br>ListNode *head = buckets.at(index);<br>buckets.at(index) = insert(head,arr[i]);<br>&#125;<br>ListNode *head = buckets.at(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;BUCKET_NUM;++i)&#123;<br>head = Merge(head,buckets.at(i));<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>arr[i] = head-&gt;mData;<br>head = head-&gt;mNext;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dfs</title>
    <link href="/2022/05/31/%E7%A8%8B%E8%AE%BE/dfs/"/>
    <url>/2022/05/31/%E7%A8%8B%E8%AE%BE/dfs/</url>
    
    <content type="html"><![CDATA[<h1 id="noip2002-普及组-选数">[NOIP2002 普及组] 选数</h1><h2 id="题目描述">题目描述</h2><p>已知 <span class="math inline">\(n\)</span> 个整数 <span class="math inline">\(x_1,x_2,\cdots,x_n\)</span>，以及 <span class="math inline">\(1\)</span> 个整数 <span class="math inline">\(k\)</span>（<span class="math inline">\(k&lt;n\)</span>）。从 <span class="math inline">\(n\)</span> 个整数中任选 <span class="math inline">\(k\)</span>个整数相加，可分别得到一系列的和。例如当 <span class="math inline">\(n=4\)</span>，<span class="math inline">\(k=3\)</span>，<span class="math inline">\(4\)</span> 个整数分别为 <span class="math inline">\(3,7,12,19\)</span>时，可得全部的组合与它们的和为：</p><p><span class="math inline">\(3+7+12=22\)</span></p><p><span class="math inline">\(3+7+19=29\)</span></p><p><span class="math inline">\(7+12+19=38\)</span></p><p><span class="math inline">\(3+12+19=34\)</span></p><p>现在，要求你计算出和为素数共有多少种。</p><p>例如上例，只有一种的和为素数：<span class="math inline">\(3+7+19=29\)</span>。</p><h2 id="输入格式">输入格式</h2><p>第一行两个空格隔开的整数 <span class="math inline">\(n,k\)</span>（<span class="math inline">\(1 \le n\le 20\)</span>，<span class="math inline">\(k&lt;n\)</span>）。</p><p>第二行 <span class="math inline">\(n\)</span> 个整数，分别为 <span class="math inline">\(x_1,x_2,\cdots,x_n\)</span>（<span class="math inline">\(1 \le x_i \le 5\times 10^6\)</span>）。</p><h2 id="输出格式">输出格式</h2><p>输出一个整数，表示种类数。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h2 id="提示">提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第二题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1</span> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span> </span><br> <span class="hljs-number">2</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <span class="hljs-number">3</span> <br> <span class="hljs-number">4</span> <span class="hljs-keyword">int</span> n, k, x[<span class="hljs-number">21</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br> <span class="hljs-number">5</span> <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>, ans=<span class="hljs-number">0</span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span></span>&#123;  #判断是否是素数<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">if</span>(t==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;t/<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-number">10</span>         <span class="hljs-keyword">if</span>(t%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">11</span>     &#125;<br><span class="hljs-number">12</span>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">13</span> &#125;<br><span class="hljs-number">14</span> <br><span class="hljs-number">15</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count, <span class="hljs-keyword">int</span> pos)</span></span>&#123;    <span class="hljs-meta">#count是当前有几个数被计算了，pos是他们的位置</span><br><span class="hljs-number">16</span>     <span class="hljs-keyword">if</span>(count &gt; k)&#123;<br><span class="hljs-number">17</span>         <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(sum))&#123;<br><span class="hljs-number">18</span>             ans++;<br><span class="hljs-number">19</span>         &#125;<br><span class="hljs-number">20</span>         <span class="hljs-keyword">return</span>;    #回溯<br><span class="hljs-number">21</span>     &#125;<span class="hljs-number">22</span>     <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-number">23</span>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pos+<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-number">24</span>             sum += x[i];<br><span class="hljs-number">25</span>             <span class="hljs-built_in">dfs</span>(count+<span class="hljs-number">1</span>, i);<br><span class="hljs-number">26</span>             sum -= x[i];<br><span class="hljs-number">27</span>         &#125;<br><span class="hljs-number">28</span>     &#125;<br><span class="hljs-number">29</span> &#125;<br><span class="hljs-number">30</span> <br><span class="hljs-number">31</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-number">32</span>     cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-number">33</span>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; x[i];<br><span class="hljs-number">34</span>     <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-number">35</span>     cout &lt;&lt; ans;<br><span class="hljs-number">36</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">37</span> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟</title>
    <link href="/2022/05/29/%E7%A8%8B%E8%AE%BE/%E7%81%AB%E6%98%9F%E4%BA%BA/"/>
    <url>/2022/05/29/%E7%A8%8B%E8%AE%BE/%E7%81%AB%E6%98%9F%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="火星人">火星人</h1><h2 id="题目描述">题目描述</h2><p>人类终于登上了火星的土地并且见到了神秘的火星人。人类和火星人都无法理解对方的语言，但是我们的科学家发明了一种用数字交流的方法。这种交流方法是这样的，首先，火星人把一个非常大的数字告诉人类科学家，科学家破解这个数字的含义后，再把一个很小的数字加到这个大数上面，把结果告诉火星人，作为人类的回答。</p><p>火星人用一种非常简单的方式来表示数字――掰手指。火星人只有一只手，但这只手上有成千上万的手指，这些手指排成一列，分别编号为<span class="math inline">\(1,2,3,\cdots\)</span>。火星人的任意两根手指都能随意交换位置，他们就是通过这方法计数的。</p><p>一个火星人用一个人类的手演示了如何用手指计数。如果把五根手指――拇指、食指、中指、无名指和小指分别编号为<span class="math inline">\(1,2,3,4\)</span> 和 <span class="math inline">\(5\)</span>，当它们按正常顺序排列时，形成了 <span class="math inline">\(5\)</span> 位数 <span class="math inline">\(12345\)</span>，当你交换无名指和小指的位置时，会形成<span class="math inline">\(5\)</span> 位数 <span class="math inline">\(12354\)</span>，当你把五个手指的顺序完全颠倒时，会形成<span class="math inline">\(54321\)</span>，在所有能够形成的 <span class="math inline">\(120\)</span> 个 <span class="math inline">\(5\)</span> 位数中，<span class="math inline">\(12345\)</span> 最小，它表示 <span class="math inline">\(1\)</span>；<span class="math inline">\(12354\)</span> 第二小，它表示 <span class="math inline">\(2\)</span>；<span class="math inline">\(54321\)</span> 最大，它表示 <span class="math inline">\(120\)</span>。下表展示了只有 <span class="math inline">\(3\)</span> 根手指时能够形成的 <span class="math inline">\(6\)</span> 个 <span class="math inline">\(3\)</span> 位数和它们代表的数字：</p><table><thead><tr class="header"><th style="text-align: center;">三进制数</th><th style="text-align: center;">代表的数字</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(123\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(132\)</span></td><td style="text-align: center;"><span class="math inline">\(2\)</span></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(213\)</span></td><td style="text-align: center;"><span class="math inline">\(3\)</span></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(231\)</span></td><td style="text-align: center;"><span class="math inline">\(4\)</span></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(312\)</span></td><td style="text-align: center;"><span class="math inline">\(5\)</span></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(321\)</span></td><td style="text-align: center;"><span class="math inline">\(6\)</span></td></tr></tbody></table><p>现在你有幸成为了第一个和火星人交流的地球人。一个火星人会让你看他的手指，科学家会告诉你要加上去的很小的数。你的任务是，把火星人用手指表示的数与科学家告诉你的数相加，并根据相加的结果改变火星人手指的排列顺序。输入数据保证这个结果不会超出火星人手指能表示的范围。</p><h2 id="输入格式">输入格式</h2><p>共三行。<br>第一行一个正整数 <span class="math inline">\(N\)</span>，表示火星人手指的数目（<span class="math inline">\(1 \le N \le 10000\)</span>）。<br>第二行是一个正整数 <span class="math inline">\(M\)</span>，表示要加上去的小整数（<span class="math inline">\(1 \le M \le 100\)</span>）。<br>下一行是 <span class="math inline">\(1\)</span> 到 <span class="math inline">\(N\)</span> 这 <span class="math inline">\(N\)</span>个整数的一个排列，用空格隔开，表示火星人手指的排列顺序。</p><h2 id="输出格式">输出格式</h2><p><span class="math inline">\(N\)</span>个整数，表示改变后的火星人手指的排列顺序。每两个相邻的数中间用一个空格分开，不能有多余的空格。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>对于 <span class="math inline">\(30\%\)</span> 的数据，<span class="math inline">\(N \le 15\)</span>。</p><p>对于 <span class="math inline">\(60\%\)</span> 的数据，<span class="math inline">\(N \le 50\)</span>。</p><p>对于 <span class="math inline">\(100\%\)</span> 的数据，<span class="math inline">\(N \le 10000\)</span>。</p><h1 id="题解">题解</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> b[<span class="hljs-number">10000</span>+<span class="hljs-number">1</span>]; <br><span class="hljs-keyword">int</span> i,j,k,m,n,t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cin&gt;&gt;n&gt;&gt;m;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    cin&gt;&gt;b[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    cout&lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>  cout&lt;&lt;b[n]&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-comment">//增1 共M次 </span><br>  &#123;<br>     <span class="hljs-keyword">for</span>(j=n<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">1</span>;j--)<span class="hljs-comment">//找到最后可增加的位，即定位 </span><br>       <span class="hljs-keyword">if</span>(b[j]&lt;b[j+<span class="hljs-number">1</span>])<span class="hljs-comment">//例如12354加1，则只有3可增加位数 </span><br>         <span class="hljs-keyword">break</span>;<br>     <span class="hljs-keyword">for</span>(k=n;k&gt;=<span class="hljs-number">1</span>;k--)<span class="hljs-comment">//找到最小可增加的数字 </span><br>       <span class="hljs-keyword">if</span>(b[k]&gt;b[j])<span class="hljs-comment">//例如12354加1，最小可增加的数字是4 </span><br>         <span class="hljs-keyword">break</span>;<br>     t=b[j];<span class="hljs-comment">//交换，把原排列增大 ，</span><br>     b[j]=b[k];<span class="hljs-comment">//例如12354加1，即3和4交换，交换结果为12453 </span><br>     b[k]=t;  <span class="hljs-comment">//但12453并不是最终结果，而是12435即要排序 </span><br>     j=j+<span class="hljs-number">1</span>;<span class="hljs-comment">//向后移一位 </span><br>     k=n;<br>     <span class="hljs-keyword">while</span>((j&lt;k))<span class="hljs-comment">//把后面的逆序，相当于从小到大排序 </span><br>     &#123;<br>       t=b[j];  <br>       b[j]=b[k];<br>       b[k]=t;<br>       j++;<br>       k--;<br>     &#125;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">init</span>();<br>  <span class="hljs-built_in">work</span>();<br>  <span class="hljs-built_in">out</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template and stack</title>
    <link href="/2022/05/26/%E7%A8%8B%E8%AE%BE/template%20and%20stack/"/>
    <url>/2022/05/26/%E7%A8%8B%E8%AE%BE/template%20and%20stack/</url>
    
    <content type="html"><![CDATA[<p>队列模拟栈</p><h1 id="description">Description</h1><p>In this assignment, you need to complete Class <code>Stack</code>'sdeclaration and definition with templates. The different thing is thatthe <code>Stack</code> is implemented by two queues. Following is theexample of <code>Stack</code> in integer:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> &#123;</span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stack</span>(); <span class="hljs-comment">// constructor.</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; data)</span></span>; <span class="hljs-comment">// push operation.</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// return the value in the top and pop it out of the stack.</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// return the value in top.</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// return size of the stack.</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// check whether is empty.</span><br><br>  <span class="hljs-keyword">private</span>:<br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q1; <span class="hljs-comment">// two queues.</span><br>    queue&lt;<span class="hljs-keyword">int</span>&gt; q2;<br>    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// the number of elements.</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>And you need to define a <code>print</code> function to printthe content in the Stack from top to bottom. The format is: everyelement is followed by a blank space and an endl in theend.</strong></p><h1 id="hint">Hint</h1><ol type="1"><li>You are not allowed to use any STL except <code>queue</code>.</li><li>For more detail, see the codes in <code>main.cpp</code>.</li></ol><p><em>出题人：黎洋</em></p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Stack.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;exception&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackForbidden</span> :</span> <span class="hljs-keyword">public</span> exception &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">what</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Please do not use Stack in stl..&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    Stack&lt;<span class="hljs-keyword">int</span>&gt; stack;<br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">88</span>);<br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">44</span>);<br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">99</span>);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; stack.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!stack.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; stack.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(stack);<br><br>    stack.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-built_in">print</span>(stack);<br><br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">777</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; stack.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!stack.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; stack.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(stack);<br><br>    stack.<span class="hljs-built_in">pop</span>();<br>    stack.<span class="hljs-built_in">pop</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; stack.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(stack);<br>    stack.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (!stack.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; stack.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;it is empty now.&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    Stack&lt;<span class="hljs-keyword">double</span>&gt; stack1;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        stack1.<span class="hljs-built_in">push</span>(i + <span class="hljs-number">0.01</span>);<br>    &#125;<br>    <span class="hljs-built_in">print</span>(stack1);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        stack1.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; stack1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (!stack1.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; stack1.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(stack1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(_GLIBCXX_STACK)</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">StackForbidden</span>();<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-built_in">test1</span>();<br>    <span class="hljs-built_in">test2</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="stack.h">stack.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> &#123;</span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stack</span>()&#123;<br>        count = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-comment">// constructor.</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; data)</span></span>&#123;<br>        q1.<span class="hljs-built_in">push</span>(data);<br>        ++count;<br>    &#125; <span class="hljs-comment">// push operation.</span><br>    <span class="hljs-function">T <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(!q2.<span class="hljs-built_in">empty</span>()) q2.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(count)&#123;<br>            --count;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i)&#123;<br>                q2.<span class="hljs-built_in">push</span>(q1.<span class="hljs-built_in">front</span>());<br>                q1.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(q1, q2);<br>        &#125;<br>        <span class="hljs-keyword">return</span> q1.<span class="hljs-built_in">front</span>();<br>    &#125; <span class="hljs-comment">// return the value in the top and pop it out of the stack.</span><br>    <span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> q1.<span class="hljs-built_in">back</span>();<br>    &#125; <span class="hljs-comment">// return the value in top.</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;  <span class="hljs-comment">// return size of the stack.</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-comment">// check whether is empty.</span><br>    <span class="hljs-comment">//friend void print(Stack&lt;TT&gt;&amp; s);</span><br>  <span class="hljs-keyword">private</span>:<br>    queue&lt;T&gt; q1; <span class="hljs-comment">// two queues.</span><br>    queue&lt;T&gt; q2;<br>    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// the number of elements.</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;class TT&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Stack&lt;TT&gt; queue)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; queue.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Stack</span>();<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; data)</span></span>;<br>        <span class="hljs-function">T <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">private</span>:<br>        queue&lt;T&gt; q1;<br>        queue&lt;T&gt; q2;<br>        <span class="hljs-keyword">int</span> count;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>Stack&lt;T&gt;::<span class="hljs-built_in">Stack</span>() &#123;<br>    count = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> Stack&lt;T&gt;::<span class="hljs-built_in">size</span>() <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">bool</span> Stack&lt;T&gt;::<span class="hljs-built_in">empty</span>() &#123;<br>    <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">void</span> Stack&lt;T&gt;::<span class="hljs-built_in">push</span>(<span class="hljs-keyword">const</span> T&amp; data) &#123;<br>    <span class="hljs-keyword">if</span> (q1.<span class="hljs-built_in">empty</span>() &amp;&amp; q2.<span class="hljs-built_in">empty</span>()) &#123;<br>        q1.<span class="hljs-built_in">push</span>(data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!q1.<span class="hljs-built_in">empty</span>()) q1.<span class="hljs-built_in">push</span>(data);<br>        <span class="hljs-keyword">else</span> q2.<span class="hljs-built_in">push</span>(data);<br>    &#125;<br>    count++;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T Stack&lt;T&gt;::<span class="hljs-built_in">top</span>() &#123;<br>    <span class="hljs-keyword">if</span> (!q1.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> q1.<span class="hljs-built_in">back</span>();<br>    <span class="hljs-keyword">return</span> q2.<span class="hljs-built_in">back</span>();<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>T Stack&lt;T&gt;::<span class="hljs-built_in">pop</span>() &#123;<br>    T value;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (q1.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">while</span> (q2.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) &#123;<br>                q1.<span class="hljs-built_in">push</span>(q2.<span class="hljs-built_in">front</span>());<br>                q2.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            value = q2.<span class="hljs-built_in">front</span>();<br>            q2.<span class="hljs-built_in">pop</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (q1.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>) &#123;<br>                q2.<span class="hljs-built_in">push</span>(q1.<span class="hljs-built_in">front</span>());<br>                q1.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            value = q1.<span class="hljs-built_in">front</span>();<br>            q1.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        count--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Stack&lt;T&gt; stack)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; stack.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        stack.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> &#123;</span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stack</span>()&#123;<br>        count = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-comment">// constructor.</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; data)</span></span>&#123;<br>        q2.<span class="hljs-built_in">push</span>(data);<br>        <span class="hljs-keyword">while</span>(!q1.<span class="hljs-built_in">empty</span>())&#123;<br>            q2.<span class="hljs-built_in">push</span>(q1.<span class="hljs-built_in">front</span>());<br>            q1.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(q1,q2);<br>    &#125; <span class="hljs-comment">// push operation.</span><br>    <span class="hljs-function">T <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    T r = q1.<span class="hljs-built_in">front</span>();<br>    q1.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> r;<br>    &#125; <span class="hljs-comment">// return the value in the top and pop it out of the stack.</span><br>    <span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> q1.<span class="hljs-built_in">front</span>();<br>    &#125; <span class="hljs-comment">// return the value in top.</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;  <span class="hljs-comment">// return size of the stack.</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> q1.<span class="hljs-built_in">empty</span>();<br>    &#125; <span class="hljs-comment">// check whether is empty.</span><br><br>  <span class="hljs-keyword">private</span>:<br>    queue&lt;T&gt; q1; <span class="hljs-comment">// two queues.</span><br>    queue&lt;T&gt; q2;<br>    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// the number of elements.</span><br>&#125;;<br><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Stack &lt;T&gt; stack)</span></span>&#123;<br>    <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; stack.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        stack.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template(queue)</title>
    <link href="/2022/05/24/%E7%A8%8B%E8%AE%BE/queue%20with%20template/"/>
    <url>/2022/05/24/%E7%A8%8B%E8%AE%BE/queue%20with%20template/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Please modify class <code>Queue</code>'s declaration and definitionso as to finish the test from <code>main.cpp</code>.</p><p><strong>Attention:</strong> please use template you have learned inthe class to finish this assignment and DO NOT add or modify any memeberfunctions or member variables.</p><p><strong>Warning:</strong> DO NOT USE <code>queue</code> in STL.</p><p>The <code>Queue</code>'s declaration with element type<code>int</code> is below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> &#123;</span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Queue</span>();<br><br>    <span class="hljs-built_in">Queue</span>(<span class="hljs-keyword">const</span> Queue &amp; another);<br>    ~<span class="hljs-built_in">Queue</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">back</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> element)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Queue &amp; queue)</span></span>;<br><br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>      <span class="hljs-keyword">int</span> element;<br>      Node* next;<br>      <span class="hljs-built_in">Node</span>(<span class="hljs-keyword">int</span> ele, Node* n = <span class="hljs-literal">NULL</span>) &#123;<br>        element = ele;<br>        next = n;<br>      &#125;<br>    &#125;;<br>    Node* front_node;<br>    Node* back_node;<br>    <span class="hljs-keyword">int</span> node_num;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>如果你对类中的成员函数有疑问，函数的具体作用，请参见：<a href="http://www.cplusplus.com/reference/queue/queue/?kw=queue">www.cplusplus.com里的queue内容</a></p><p>Author: 黎洋</p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Queue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Job</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Job</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pri = <span class="hljs-number">0</span>)</span> </span>&#123;<br>            id = number++;<br>            priority = pri;<br>        &#125;<br>        <span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            stringstream ss;<br>            ss &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; priority &lt;&lt; <span class="hljs-string">&quot;]&quot;</span>;<br>            <span class="hljs-keyword">return</span> ss.<span class="hljs-built_in">str</span>();<br>        &#125;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> number;<br>        <span class="hljs-keyword">int</span> id;<br>        <span class="hljs-keyword">int</span> priority;<br>&#125;;<br><br><span class="hljs-keyword">int</span> Job::number = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;class T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Queue&lt;T&gt; queue)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; queue.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// test case 1: integer..</span><br>    Queue&lt;<span class="hljs-keyword">int</span>&gt; que;<br>    <span class="hljs-keyword">int</span> m, n;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) que.<span class="hljs-built_in">push</span>(i + <span class="hljs-number">0.01</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; que.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>        cout &lt;&lt; que.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; que.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (que.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; <span class="hljs-string">&quot;The queue is empty!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;The queue is NOT empty!&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">// test case 2: double..</span><br>    Queue&lt;<span class="hljs-keyword">double</span>&gt; que1;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) que1.<span class="hljs-built_in">push</span>(i + <span class="hljs-number">0.01</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) que1.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (!que1.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; que1.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>        cout &lt;&lt; que1.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; que1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (que1.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; <span class="hljs-string">&quot;The queue is empty!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;The queue is NOT empty!&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">// test case 3: user defined class..</span><br>    Queue&lt;Job&gt; que2;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) que2.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Job</span>(i));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) que2.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">if</span> (!que2.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; que2.<span class="hljs-built_in">front</span>().<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>        cout &lt;&lt; que2.<span class="hljs-built_in">back</span>().<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The size is: &quot;</span> &lt;&lt; que2.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (que2.<span class="hljs-built_in">empty</span>()) cout &lt;&lt; <span class="hljs-string">&quot;The queue is empty!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;The queue is NOT empty!&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">// test case 4: swap function..</span><br>    Queue&lt;<span class="hljs-keyword">int</span>&gt; que3, que4;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) que3.<span class="hljs-built_in">push</span>(i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) que4.<span class="hljs-built_in">push</span>(m - i);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Before Swap....&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(que3);<br>    <span class="hljs-built_in">print</span>(que4);<br><br>    que3.<span class="hljs-built_in">swap</span>(que4);<br>    cout &lt;&lt; <span class="hljs-string">&quot;After Swap....&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(que3);<br>    <span class="hljs-built_in">print</span>(que4);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="queue.h">Queue.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>&#123;</span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Queue</span>()&#123;<br>      front_node = <span class="hljs-literal">NULL</span>;<br>      back_node = <span class="hljs-literal">NULL</span>;<br>      node_num = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">Queue</span>(<span class="hljs-keyword">const</span> Queue &amp; another):<span class="hljs-built_in">node_num</span>(<span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">for</span>(Node* i = another.front_node; i != another.back_node; i = i-&gt;next)&#123;<br>        <span class="hljs-built_in">push</span>(i-&gt;element);<br>      &#125;<br>      <span class="hljs-built_in">push</span>(another.back_node-&gt;element);<br>    &#125;<br>    ~<span class="hljs-built_in">Queue</span>()&#123;<br>      <span class="hljs-keyword">while</span>(front_node)&#123;<br>        Node* temp = front_node;<br>        front_node = front_node-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>      &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> node_num == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> node_num;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>      <span class="hljs-keyword">return</span> front_node-&gt;element;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">back</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>      <span class="hljs-keyword">return</span> back_node-&gt;element;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T element)</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">empty</span>())&#123;<br>        Node* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(element);<br>        back_node = temp;<br>        front_node = temp;<br>        node_num = <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        Node* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(element);<br>        back_node-&gt;next = temp;<br>        back_node = temp;<br>        ++node_num;<br>      &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">empty</span>())&#123;<br>        --node_num;<br>        Node* temp = front_node;<br>        front_node = front_node-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>      &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Queue &amp; queue)</span></span>&#123;<br>      Node* temp = front_node;<br>      front_node = queue.front_node;<br>      queue.front_node = temp;<br>      temp = back_node;<br>      back_node = queue.back_node;<br>      queue.back_node = temp;<br>      <span class="hljs-keyword">int</span> temp1 = node_num;<br>      node_num = queue.node_num;<br>      queue.node_num = temp1;<br>    &#125;<br><br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>      T element;<br>      Node* next;<br>      <span class="hljs-built_in">Node</span>(T  ele, Node* n = <span class="hljs-literal">NULL</span>) &#123;<br>        element = ele;<br>        next = n;<br>      &#125;<br>    &#125;;<br>    Node* front_node;<br>    Node* back_node;<br>    <span class="hljs-keyword">int</span> node_num;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="queue.h-1">Queue.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Queue</span>();<br> <br>  <span class="hljs-built_in">Queue</span>(<span class="hljs-keyword">const</span> Queue&lt;ElementType&gt;&amp; another);<br>  ~<span class="hljs-built_in">Queue</span>();<br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function">ElementType <span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>  <span class="hljs-function">ElementType <span class="hljs-title">back</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ElementType element)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Queue&lt;ElementType&gt;&amp; queue)</span></span>;<br> <br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    ElementType element;<br>    Node* next;<br>    <span class="hljs-built_in">Node</span>(ElementType ele, Node* n = <span class="hljs-literal">NULL</span>) &#123;<br>      element = ele;<br>      next = n;<br>    &#125;<br>  &#125;;<br>  Node* front_node;<br>  Node* back_node;<br>  <span class="hljs-keyword">int</span> node_num;<br>&#125;;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br>Queue&lt;ElementType&gt;::<span class="hljs-built_in">Queue</span>(<span class="hljs-keyword">const</span> Queue&lt;ElementType&gt;&amp; another) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;another) <span class="hljs-keyword">return</span>;<br>  front_node = back_node = <span class="hljs-literal">NULL</span>;<br>  node_num = <span class="hljs-number">0</span>;<br>  Node* temp = another.front_node;<br>  <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-built_in">push</span>(temp-&gt;element);<br>    temp = temp-&gt;next;<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br>Queue&lt;ElementType&gt;::<span class="hljs-built_in">Queue</span>() &#123;<br>  front_node = back_node = <span class="hljs-literal">NULL</span>;<br>  node_num = <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br>Queue&lt;ElementType&gt;::~<span class="hljs-built_in">Queue</span>() &#123;<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-built_in">pop</span>();<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-keyword">bool</span> Queue&lt;ElementType&gt;::<span class="hljs-built_in">empty</span>() &#123;<br>  <span class="hljs-keyword">return</span> node_num == <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-keyword">int</span> Queue&lt;ElementType&gt;::<span class="hljs-built_in">size</span>() &#123;<br>  <span class="hljs-keyword">return</span> node_num;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br>ElementType Queue&lt;ElementType&gt;::<span class="hljs-built_in">front</span>() <span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-keyword">return</span> front_node-&gt;element;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br>ElementType Queue&lt;ElementType&gt;::<span class="hljs-built_in">back</span>() <span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-keyword">return</span> back_node-&gt;element;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-keyword">void</span> Queue&lt;ElementType&gt;::<span class="hljs-built_in">push</span>(ElementType element) &#123;<br>  <span class="hljs-keyword">if</span> (front_node == <span class="hljs-literal">NULL</span>) &#123;<br>    front_node = back_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(element);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    back_node-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(element);<br>    back_node = back_node-&gt;next;<br>  &#125;<br>  node_num++;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-keyword">void</span> Queue&lt;ElementType&gt;::<span class="hljs-built_in">pop</span>() &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">delete</span> front_node;<br>    front_node = back_node = <span class="hljs-literal">NULL</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    Node* temp = front_node;<br>    front_node = front_node-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;<br>  &#125;<br>  node_num--;<br>&#125;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType&gt;<br><span class="hljs-keyword">void</span> Queue&lt;ElementType&gt;::<span class="hljs-built_in">swap</span>(Queue&lt;ElementType&gt;&amp; queue) &#123;<br>  <span class="hljs-keyword">int</span> old_size = <span class="hljs-built_in">size</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">empty</span>()) &#123;<br>    queue.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">front</span>());<br>    <span class="hljs-built_in">pop</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (queue.<span class="hljs-built_in">size</span>() &gt; old_size) &#123;<br>    <span class="hljs-built_in">push</span>(queue.<span class="hljs-built_in">front</span>());<br>    queue.<span class="hljs-built_in">pop</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stack(指针gou&#39;jian)</title>
    <link href="/2022/05/23/%E7%A8%8B%E8%AE%BE/stack/"/>
    <url>/2022/05/23/%E7%A8%8B%E8%AE%BE/stack/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>构建使用指针构建动态堆栈。</p><p>已知每一个数据节点的结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ELEMENT;  <span class="hljs-comment">// 为堆栈元素类型起一个别名</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>     ELEMENT element;<span class="hljs-comment">// 存放堆栈的元素</span><br>     NODE* link;<span class="hljs-comment">// 指向下一个结点的链接</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>类声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">STACK</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-built_in">STACK</span>();   <span class="hljs-comment">// 构造函数，设置栈顶为空指针</span><br>     ~<span class="hljs-built_in">STACK</span>(); <span class="hljs-comment">// 析构函数，释放堆栈结点占用的存储空间</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ELEMENT obj)</span></span>;  <span class="hljs-comment">// 将元素obj压入栈顶</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 将当前栈顶的元素弹出栈中。要求：栈不为空。</span><br>     <span class="hljs-function">ELEMENT <span class="hljs-title">get_top</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 返回当前栈顶的元素值。要求：栈不为空。</span><br>     <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 判断当前堆栈是否为空，空则返回true，非空则返回false</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 自顶向下显示堆栈中的元素</span><br><br><span class="hljs-keyword">private</span>:<br>    NODE* top;<span class="hljs-comment">// 堆栈的栈顶</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">20 </span><span class="hljs-number">19</span> <span class="hljs-number">18</span> <span class="hljs-number">17</span> <span class="hljs-number">16</span> <span class="hljs-number">15</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span> <span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">19</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">18</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">17</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">16</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">15</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">14</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">13</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">11</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">13 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">14 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">15 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">16 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">18 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">19 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="stack.hlock">STACK.H(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> STACK_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACK_H</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ELEMENT;  <span class="hljs-comment">// 为堆栈元素类型起一个别名</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>     ELEMENT element;<span class="hljs-comment">// 存放堆栈的元素</span><br>     NODE* link;<span class="hljs-comment">// 指向下一个结点的链接</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">STACK</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-built_in">STACK</span>();   <span class="hljs-comment">// 构造函数，设置栈顶为空指针</span><br>     ~<span class="hljs-built_in">STACK</span>(); <span class="hljs-comment">// 析构函数，释放堆栈结点占用的存储空间</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ELEMENT obj)</span></span>;  <span class="hljs-comment">// 将元素obj压入栈顶</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 将当前栈顶的元素弹出栈中。要求：栈不为空。</span><br>     <span class="hljs-function">ELEMENT <span class="hljs-title">get_top</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 返回当前栈顶的元素值。要求：栈不为空。</span><br>     <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 判断当前堆栈是否为空，空则返回true，非空则返回false</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;  <span class="hljs-comment">// 自顶向下显示堆栈中的元素</span><br><br><span class="hljs-keyword">private</span>:<br>    NODE* top;<span class="hljs-comment">// 堆栈的栈顶</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;STACK.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    STACK turner;       <span class="hljs-comment">// 声明一个元素为整数类型的堆栈</span><br>    ELEMENT user_input; <span class="hljs-comment">// 用户输入的元素（即整数类型）</span><br>    <span class="hljs-keyword">int</span> loop;           <span class="hljs-comment">// 循环变量</span><br>    <span class="hljs-keyword">int</span> max_input = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">for</span> (loop = <span class="hljs-number">1</span>; loop &lt;= max_input; loop++) <span class="hljs-comment">// 由用户输入若干个元素</span><br>    &#123;<br>        turner.<span class="hljs-built_in">push</span>(loop); <span class="hljs-comment">// 将用户输入的元素压入栈中</span><br>    &#125;<br><br>    turner.<span class="hljs-built_in">display</span>(); <span class="hljs-comment">// 测试堆栈中的内容</span><br><br>    <span class="hljs-keyword">for</span> (loop = <span class="hljs-number">1</span>; loop &lt;= max_input; loop++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!turner.<span class="hljs-built_in">is_empty</span>()) <span class="hljs-comment">// 仅当堆栈不为空时才处理</span><br>        &#123;<br>            user_input = turner.<span class="hljs-built_in">get_top</span>();        <span class="hljs-comment">// 取出栈顶元素的值</span><br>            turner.<span class="hljs-built_in">pop</span>();                         <span class="hljs-comment">// 将栈顶元素弹出</span><br>            cout &lt;&lt;loop&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; user_input &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="stack.cpp">STACK.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;STACK.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br>STACK::<span class="hljs-built_in">STACK</span>()<br>&#123;<br>     top = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 将栈顶置为空</span><br>&#125;<br><br>STACK::~<span class="hljs-built_in">STACK</span>()<br>&#123;<br>    NODE* ptr;   <span class="hljs-comment">// 指向堆栈结点的临时指针</span><br><br>   <span class="hljs-keyword">while</span> (top != <span class="hljs-literal">NULL</span>)   <span class="hljs-comment">// 从上到下释放堆栈的结点，注意循环体中语句的次序</span><br>   &#123;<br>        ptr = top;             <span class="hljs-comment">// 先记住将被摘下来的栈顶结点</span><br>        top = top-&gt;link;<span class="hljs-comment">// 摘下栈顶结点</span><br>        <span class="hljs-keyword">delete</span> ptr;<span class="hljs-comment">// 释放刚才被摘下来的结点</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">STACK::push</span><span class="hljs-params">(ELEMENT obj)</span>  <span class="hljs-comment">// 将obj压入堆栈的栈顶</span></span><br><span class="hljs-function"></span>&#123;<br>    NODE* temp;<br>    temp = <span class="hljs-keyword">new</span> NODE;   <span class="hljs-comment">// 创建一个新结点</span><br>    <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>)         <span class="hljs-comment">// 内存分配成功时</span><br>   &#123;<br>        temp-&gt;link = top; <br>        temp-&gt;element = obj;<br>        top = temp;<br>    &#125; <br>    <span class="hljs-keyword">else</span>   <span class="hljs-comment">// 内存分配失败时作异常处理</span><br>   &#123;<br>          cout &lt;&lt; <span class="hljs-string">&quot;Error: No enough memory.&quot;</span>&lt;&lt; endl;<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">// 终止程序</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">STACK::pop</span><span class="hljs-params">()</span> <span class="hljs-comment">// 将堆栈当前的栈顶元素弹出</span></span><br><span class="hljs-function"></span>&#123;<br>       NODE* temp;<br>       <span class="hljs-keyword">if</span> (top != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 堆栈不为空时才处理</span><br>      &#123;<br>             temp = top;<span class="hljs-comment">// 将栈顶元素弹出堆栈</span><br>top = top-&gt;link;<br><span class="hljs-keyword">delete</span> temp;<span class="hljs-comment">// 释放被弹出结点占用的存储空间</span><br>       &#125;<br>       <span class="hljs-keyword">else</span>    <span class="hljs-comment">// 空栈时作异常处理</span><br>      &#123;<br>               cout &lt;&lt; <span class="hljs-string">&quot;Error: Pop from empty stack.\n&quot;</span>;<br>               <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 终止程序</span><br>       &#125;<br>&#125;<br><span class="hljs-function">ELEMENT <span class="hljs-title">STACK::get_top</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span>  <span class="hljs-comment">// 返回当前栈顶的元素值</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">NULL</span>)    <span class="hljs-comment">// 空栈时作异常处理</span><br>    &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error: Get top from empty stack.\n&quot;</span>;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);          <span class="hljs-comment">// 终止程序</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> top-&gt;element;    <span class="hljs-comment">// 返回栈顶的当前值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">STACK::is_empty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> <span class="hljs-comment">// 判断当前堆栈是否为空，空则返回trur，非空则返回false</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">return</span> (top == <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">STACK::display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span>  <span class="hljs-comment">// 自顶向下显示堆栈中的元素</span></span><br><span class="hljs-function"></span>&#123;<br>     NODE* loop;<br><br>    loop = top;<br>    <span class="hljs-keyword">while</span> (loop != <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">// 以空指针作为链的结束标记</span><br>    &#123; <br>         cout &lt;&lt; loop-&gt;element &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-comment">// 将当前结点的元素输出</span><br>         loop = loop-&gt;link;     <span class="hljs-comment">// 指向下一个结点</span><br>     &#125;<br>  cout&lt;&lt;endl;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="stack.cpp-1">stack.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>NODE* top;<span class="hljs-comment">// 堆栈的栈顶</span><br><br>STACK:: <span class="hljs-built_in">STACK</span>()&#123;<br>    top = <span class="hljs-literal">NULL</span>;<br>&#125;   <span class="hljs-comment">// 构造函数，设置栈顶为空指针</span><br>STACK:: ~<span class="hljs-built_in">STACK</span>()&#123;<br>    <span class="hljs-keyword">while</span>(top != <span class="hljs-literal">NULL</span>)&#123;<br>        NODE* temp = top;<br>        top = top -&gt; link;<br>        <span class="hljs-keyword">delete</span> top;<br>    &#125;<br>&#125; <span class="hljs-comment">// 析构函数，释放堆栈结点占用的存储空间</span><br><br><span class="hljs-keyword">void</span> STACK:: <span class="hljs-built_in">push</span>(ELEMENT obj)&#123;<br>    NODE* temp = <span class="hljs-keyword">new</span> NODE;<br>    temp -&gt; element = obj;<br>    temp -&gt; link = top;<br>    top = temp;<br>&#125;  <span class="hljs-comment">// 将元素obj压入栈顶</span><br><span class="hljs-keyword">void</span> STACK:: <span class="hljs-built_in">pop</span>()&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">is_empty</span>())&#123;<br>    NODE* temp = top;<br>        top = top -&gt; link;<br>        <span class="hljs-keyword">delete</span> temp;<br>    &#125;<br>&#125;  <span class="hljs-comment">// 将当前栈顶的元素弹出栈中。要求：栈不为空。</span><br>ELEMENT STACK:: <span class="hljs-built_in">get_top</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">is_empty</span>())&#123;<br>        <span class="hljs-keyword">return</span> top -&gt; element;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;  <span class="hljs-comment">// 返回当前栈顶的元素值。要求：栈不为空。</span><br><span class="hljs-keyword">bool</span> STACK:: <span class="hljs-built_in">is_empty</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(!top) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;  <span class="hljs-comment">// 判断当前堆栈是否为空，空则返回true，非空则返回false</span><br><span class="hljs-keyword">void</span> STACK:: <span class="hljs-built_in">display</span>() <span class="hljs-keyword">const</span>&#123;<br>    NODE* temp = top;<br>    <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">NULL</span>)&#123;<br>        cout &lt;&lt; temp -&gt; element &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp -&gt; link;<br><span class="hljs-keyword">if</span>(temp) cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; endl;<br>    &#125;<br>&#125;  <span class="hljs-comment">// 自顶向下显示堆栈中的元素</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template(func)</title>
    <link href="/2022/05/23/%E7%A8%8B%E8%AE%BE/template(func)/"/>
    <url>/2022/05/23/%E7%A8%8B%E8%AE%BE/template(func)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Implement the 3 functions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T v1, <span class="hljs-keyword">const</span> T v2)</span></span><br><span class="hljs-function"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T v)</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> v2)</span></span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> generic <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> demoFunc()<br><span class="hljs-keyword">the</span> arguments: <span class="hljs-number">2.8</span> <span class="hljs-number">8.5</span><br><span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> generic <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> demoFunc()<br><span class="hljs-keyword">the</span> argument: <span class="hljs-number">3</span><br><span class="hljs-keyword">the</span> ordinary <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> demoFunc()<br><span class="hljs-keyword">the</span> arguments: <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">the</span> ordinary <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> demoFunc()<br><span class="hljs-keyword">the</span> arguments: <span class="hljs-number">65</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;demo.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> ch1 = <span class="hljs-string">&#x27;A&#x27;</span>, ch2 = <span class="hljs-string">&#x27;B&#x27;</span>;<br>    <span class="hljs-keyword">int</span> iv1 = <span class="hljs-number">3</span>, iv2 = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">double</span> dv1 = <span class="hljs-number">2.8</span>, dv2 = <span class="hljs-number">8.5</span>;<br><br>    <span class="hljs-comment">// 调用第一个函数模板的实例</span><br>    <span class="hljs-built_in">demoFunc</span>(dv1, dv2);<br><br>    <span class="hljs-comment">// 调用第二个函数模板的实例</span><br>    <span class="hljs-built_in">demoFunc</span>(iv1);<br><br>    <span class="hljs-comment">// 调用非模板函数demoFunc(int, int)</span><br>    <span class="hljs-built_in">demoFunc</span>(iv1, iv2);<br><br>    <span class="hljs-comment">// 调用非模板函数demoFunc(int, int)（进行隐式类型转换）</span><br>    <span class="hljs-built_in">demoFunc</span>(ch1, iv2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="demo.h">demo.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T v1, <span class="hljs-keyword">const</span> T v2)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the first generic version of demoFunc()&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;the arguments: &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; v2 &lt;&lt; endl; <br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T v)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the second generic version of demoFunc()&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;the argument: &quot;</span> &lt;&lt; v  &lt;&lt; endl; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demoFunc</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> v2)</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the ordinary version of demoFunc()&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;the arguments: &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; v2 &lt;&lt; endl; <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template(class)</title>
    <link href="/2022/05/23/%E7%A8%8B%E8%AE%BE/template(class)/"/>
    <url>/2022/05/23/%E7%A8%8B%E8%AE%BE/template(class)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Implement the following template:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stack</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ElementType obj)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">ElementType <span class="hljs-title">getTop</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    ElementType elements[N]; <span class="hljs-comment">// 堆栈中存放的元素</span><br>    std::<span class="hljs-keyword">size_t</span> count;       <span class="hljs-comment">// 堆栈中现有元素的数目</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="output">Output</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>2<br>0<br>1<br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p><strong>Note: size_t is in header <cstddef>.</cstddef></strong></p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;array_basedGStack.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Stack&lt;<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>&gt; stack; <span class="hljs-comment">// 声明一个保存10个int型元素的堆栈</span><br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>    stack.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>    cout &lt;&lt; stack.<span class="hljs-built_in">getTop</span>() &lt;&lt; endl;<br>    stack.<span class="hljs-built_in">pop</span>();<br>    cout &lt;&lt; stack.<span class="hljs-built_in">getTop</span>() &lt;&lt; endl;<br>    stack.<span class="hljs-built_in">pop</span>();<br>    cout &lt;&lt; stack.<span class="hljs-built_in">isEmpty</span>() &lt;&lt; endl;<br>    stack.<span class="hljs-built_in">pop</span>();<br>    cout &lt;&lt; stack.<span class="hljs-built_in">isEmpty</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="array_basedgstack.hpp">array_basedGStack.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Stack</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(ElementType obj)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">ElementType <span class="hljs-title">getTop</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    ElementType elements[N]; <span class="hljs-comment">// 堆栈中存放的元素</span><br>    std::<span class="hljs-keyword">size_t</span> count;       <span class="hljs-comment">// 堆栈中现有元素的数目</span><br>&#125;;<br><br><span class="hljs-comment">// #include &quot;array_basedGStack.cpp&quot; // 包含源文件</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br>Stack&lt;ElementType, N&gt;::<span class="hljs-built_in">Stack</span>() <span class="hljs-comment">// 将堆栈初始化为空栈</span><br>&#123;<br>    count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 将元素数目置为0</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-keyword">void</span> Stack&lt;ElementType, N&gt;::<span class="hljs-built_in">push</span>(ElementType obj)<br><span class="hljs-comment">// 将元素obj压入堆栈</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (count &lt; N)<br>    &#123; <span class="hljs-comment">// 堆栈未满</span><br>        elements[count] = obj;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123; <span class="hljs-comment">// 堆栈已满</span><br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">logic_error</span>(<span class="hljs-string">&quot;push onto full stack&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-keyword">void</span> Stack&lt;ElementType, N&gt;::<span class="hljs-built_in">pop</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isEmpty</span>())<br>        count--;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-keyword">bool</span> Stack&lt;ElementType, N&gt;::<span class="hljs-built_in">isEmpty</span>() <span class="hljs-keyword">const</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> ElementType, std::<span class="hljs-keyword">size_t</span> N&gt;<br>ElementType Stack&lt;ElementType, N&gt;::<span class="hljs-built_in">getTop</span>() <span class="hljs-keyword">const</span><br>&#123;<br>    <span class="hljs-keyword">return</span> elements[count - <span class="hljs-number">1</span>];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template</title>
    <link href="/2022/05/23/%E7%A8%8B%E8%AE%BE/template/"/>
    <url>/2022/05/23/%E7%A8%8B%E8%AE%BE/template/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Implement the following function template:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T,  std::<span class="hljs-keyword">size_t</span> N&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printValues</span><span class="hljs-params">(T (&amp;arr)[N])</span></span><br></code></pre></td></tr></table></figure><p>In this function, you need print the values in the input array.</p><h1 id="sample-output">Sample Output</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">4</span><br><span class="hljs-attribute">5</span><br><span class="hljs-attribute">6</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">3</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">4</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;printArray.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> intArr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-keyword">double</span> dblArr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1.2</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">4.5</span>&#125;;<br><br>    <span class="hljs-built_in">printValues</span>(intArr); <span class="hljs-comment">// 生成函数实例printValues(int (&amp;) [6])</span><br>    <span class="hljs-built_in">printValues</span>(dblArr); <span class="hljs-comment">// 生成函数实例printValues(double (&amp;) [4])</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="printarrlist.hpp">printarrlist.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T,  <span class="hljs-keyword">size_t</span> N&gt;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printValues</span><span class="hljs-params">(T (&amp;arr)[N])</span></span>&#123;<br>    <span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; N)&#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; endl;<br>        ++i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩具谜题</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%8E%A9%E5%85%B7%E8%B0%9C%E9%A2%98/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%8E%A9%E5%85%B7%E8%B0%9C%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="玩具谜题">玩具谜题</h1><h2 id="题目背景">题目背景</h2><p>NOIP2016 提高组 D1T1</p><h2 id="题目描述">题目描述</h2><p>小南有一套可爱的玩具小人, 它们各有不同的职业。</p><p>有一天, 这些玩具小人把小南的眼镜藏了起来。小南发现玩具小人们围成了一个圈,它们有的面朝圈内,有的面朝圈外。如下图:</p><p><img src="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%8E%A9%E5%85%B7%E8%B0%9C%E9%A2%98/0u7em9pi.png"></p><p>这时<span class="math inline">\(singer\)</span>告诉小南一个谜題:“眼镜藏在我左数第3个玩具小人的右数第<span class="math inline">\(1\)</span>个玩具小人的左数第<span class="math inline">\(2\)</span>个玩具小人那里。 ”</p><p>小南发现, 这个谜题中玩具小人的朝向非常关键,因为朝内和朝外的玩具小人的左右方向是相反的: 面朝圈内的玩具小人,它的左边是顺时针方向, 右边是逆时针方向; 而面向圈外的玩具小人,它的左边是逆时针方向, 右边是顺时针方向。</p><p>小南一边艰难地辨认着玩具小人, 一边数着:</p><p><span class="math inline">\(singer\)</span>朝内, 左数第<span class="math inline">\(3\)</span>个是<span class="math inline">\(archer\)</span>。</p><p><span class="math inline">\(archer\)</span>朝外,右数第<span class="math inline">\(1\)</span>个是<span class="math inline">\(thinker\)</span>。</p><p><span class="math inline">\(thinker\)</span>朝外, 左数第<span class="math inline">\(2\)</span>个是<span class="math inline">\(write\)</span>r。</p><p>所以眼镜藏在<span class="math inline">\(writer\)</span>这里!</p><p>虽然成功找回了眼镜, 但小南并没有放心。如果下次有更多的玩具小人藏他的眼镜, 或是谜題的长度更长,他可能就无法找到眼镜了 。 所以小南希望你写程序帮他解决类似的谜題。这样的谜題具体可以描述为:</p><p>有 <span class="math inline">\(n\)</span>个玩具小人围成一圈,已知它们的职业和朝向。现在第<span class="math inline">\(1\)</span>个玩具小人告诉小南一个包含<span class="math inline">\(m\)</span>条指令的谜題, 其中第 <span class="math inline">\(z\)</span>条指令形如“左数/右数第$ s$,个玩具小人”。你需要输出依次数完这些指令后,到达的玩具小人的职业。</p><h2 id="输入格式">输入格式</h2><p>输入的第一行包含两个正整数 <span class="math inline">\(n,m\)</span>，表示玩具小人的个数和指令的条数。</p><p>接下来 <span class="math inline">\(n\)</span>行，每行包含一个整数和一个字符串，以逆时针为顺序给出每个玩具小人的朝向和职业。其中<span class="math inline">\(0\)</span> 表示朝向圈内，<span class="math inline">\(1\)</span> 表示朝向圈外。保证不会出现其他的数。字符串长度不超过 <span class="math inline">\(10\)</span>且仅由小写字母构成，字符串不为空，并且字符串两两不同。整数和字符串之间用一个空格隔开。</p><p>接下来 <span class="math inline">\(m\)</span> 行，其中第 <span class="math inline">\(i\)</span> 行包含两个整数 <span class="math inline">\(a_i,s_i\)</span>，表示第 <span class="math inline">\(i\)</span> 条指令。若 <span class="math inline">\(a_i=0\)</span>，表示向左数 <span class="math inline">\(s_i\)</span> 个人；若 <span class="math inline">\(a_i=1\)</span>，表示向右数 <span class="math inline">\(s_i\)</span> 个人。 保证 <span class="math inline">\(a_i\)</span> 不会出现其他的数，<span class="math inline">\(1 \le s_i &lt; n\)</span>。</p><h2 id="输出格式">输出格式</h2><p>输出一个字符串，表示从第一个读入的小人开始，依次数完 <span class="math inline">\(m\)</span> 条指令后到达的小人的职业。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span>singer<br><span class="hljs-symbol">0 </span>reader<br><span class="hljs-symbol">0 </span>mengbier <br><span class="hljs-symbol">1 </span>thinker<br><span class="hljs-symbol">1 </span>archer<br><span class="hljs-symbol">0 </span>writer<br><span class="hljs-symbol">1 </span>mogician <br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">writer</span><br></code></pre></td></tr></table></figure><h2 id="样例-2">样例 #2</h2><h3 id="样例输入-2">样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span>C<br><span class="hljs-symbol">0 </span>r<br><span class="hljs-symbol">0 </span>P<br><span class="hljs-symbol">1 </span>d<br><span class="hljs-symbol">1 </span>e<br><span class="hljs-symbol">1 </span>m<br><span class="hljs-symbol">1 </span>t<br><span class="hljs-symbol">1 </span>y<br><span class="hljs-symbol">1 </span>u<br><span class="hljs-symbol">0 </span>V<br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2">样例输出 #2</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>【样例1说明】</p><p>这组数据就是【题目描述】 中提到的例子。</p><p>【子任务】</p><p>子任务会给出部分测试数据的特点。 如果你在解决题目中遇到了困难,可以尝试只解决一部分测试数据。</p><p>每个测试点的数据规模及特点如下表:</p><p><img src="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%8E%A9%E5%85%B7%E8%B0%9C%E9%A2%98/3439.png"></p><p>其中一些简写的列意义如下:</p><p>• 全朝内: 若为“√”, 表示该测试点保证所有的玩具小人都朝向圈内;</p><p>全左数:若为“√”,表示该测试点保证所有的指令都向左数,即对任意的</p><p><span class="math inline">\(1≤z≤m, a_i=0\)</span>;</p><p><span class="math inline">\(s=1\)</span>:若为“√”,表示该测试点保证所有的指令都只数1个,即对任意的</p><p><span class="math inline">\(1≤z≤m,s_i=1\)</span>;</p><p>职业长度为<span class="math inline">\(1\)</span>:若为“√”,表示该测试点保证所有玩具小人的职业一定是一个</p><p>长度为<span class="math inline">\(1\)</span>的字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>co <span class="hljs-keyword">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> people[n];<br>    string people1 [n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;people[i];<br>        cin&gt;&gt;people1 [i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>[m][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        cin&gt;&gt;<span class="hljs-keyword">operator</span>[i][<span class="hljs-number">0</span>]&gt;&gt;<span class="hljs-keyword">operator</span>[i][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">operator</span> [i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> &amp;&amp; people[ans] == <span class="hljs-number">0</span> )&#123;<br>ans += <span class="hljs-keyword">operator</span>[i][<span class="hljs-number">1</span>];<br>            ans%=n;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">operator</span> [i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span> &amp;&amp; people[ans] == <span class="hljs-number">1</span> )&#123;<br>ans -= <span class="hljs-keyword">operator</span>[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>)ans+=n;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">operator</span> [i][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &amp;&amp; people[ans] == <span class="hljs-number">0</span> )&#123;<br>            ans -= <span class="hljs-keyword">operator</span>[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>)ans+=n;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">operator</span> [i][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &amp;&amp; people[ans] == <span class="hljs-number">1</span> )&#123;<br>ans += <span class="hljs-keyword">operator</span>[i][<span class="hljs-number">1</span>];<br>            ans %=n;<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; people1[ans];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说假话</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%AF%B4%E5%81%87%E8%AF%9D/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%AF%B4%E5%81%87%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>在《三体》中的三体文明接触了人类文明以后逐渐开始学会了说假话，于是三体社会中流行起了聚在一起评论别人说的话是真是假的活动。有一天，<em>N</em>个人（编号范围[0,<em>N</em>−1]）聚在一起，每个人都说了一句："*a**i*说的是真/假话"。现在，围观的你想知道他们每个人说的是真还是假？</p><h2 id="输入格式">输入格式</h2><p>第一行一个整数<em>N</em>，表示有<em>N</em>个人</p><p>后面接着<em>N</em>行，其中第<em>i</em>行表示编号为i的人说的话，每行有两个整数<em>a<strong>i<em>和</em>b</strong>i</em>，表示编号为<em>i</em>的人说编号为<em>a<strong>i<em>的人说的是真话(</em>b</strong>i</em>=1)或假话(*b**i*=0)</p><p>数据范围1&lt;=<em>N</em>&lt;=15,0&lt;=<em>a<strong>i<em>&lt;</em>N<em>,</em>b</strong>i</em>∈{0,1}</p><h2 id="输出格式">输出格式</h2><p><em>N</em>个整数，第<em>i</em>个整数为1表示编号为 <em>i</em>的人实际在说真话，为0表示编号为 <em>i</em> 的人实际在说假话。若有多种情况，则输出字典序最小的一个。</p><h2 id="样例输入1">样例输入1</h2><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="样例输出1">样例输出1</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="样例输入2">样例输入2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="样例输出2">样例输出2</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="hint">Hint</h2><h3 id="样例输入1-1">样例输入1</h3><p>0号和1号互相说对方说谎，那么有4种情况</p><p>1.若0,1实际都在说谎：0说谎所以他说的是假的，从而1说的是真的，这就与1实际在说谎矛盾</p><p>2.实际0在说谎，1在说真话：0说谎所以他说的是假的，从而1说的是真的，不矛盾；1在说真话所以0在说谎，不矛盾</p><p>3.实际1在说谎，0在说真话：1说谎所以他说的是假的，从而0说的是真的，不矛盾；0在说真话所以1在说谎，不矛盾</p><p>4.若0，1实际都在说真话：0说真话所以1在说谎，这就与1实际在说真话矛盾</p><p>故只有2，3两种情况是逻辑自治的，其中情况2为“0 1”而情况3为“10”，所以输出小的那一个“0 1”</p><h3 id="样例输入2-1">样例输入2</h3><p>只有两种情况是逻辑自治的：</p><p>1.0号1号都在说谎，2号在说真话</p><p>2.0号1号都在说真话，2号在说谎 情况1为“0 0 1”，情况2为“1 10”，所以输出小的那个“0 0 1”</p><h1 id="main.cpp">main.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> test [<span class="hljs-number">15</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> ans [<span class="hljs-number">15</span>][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>( now == n )&#123;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n ;i++)&#123;<br>            <span class="hljs-keyword">if</span>( ans[i][<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> &amp;&amp; test [ ans[i][<span class="hljs-number">0</span>] ] == <span class="hljs-number">1</span> &amp;&amp; test[i] == <span class="hljs-number">1</span>)  <br>flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>( ans[i][<span class="hljs-number">1</span>] == <span class="hljs-number">1</span> &amp;&amp; test [ ans[i][<span class="hljs-number">0</span>] ] == <span class="hljs-number">0</span> &amp;&amp; test[i] == <span class="hljs-number">1</span>)  <br>flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>( ans[i][<span class="hljs-number">1</span>] == <span class="hljs-number">1</span> &amp;&amp; test [ ans[i][<span class="hljs-number">0</span>] ] == <span class="hljs-number">1</span> &amp;&amp; test[i] == <span class="hljs-number">0</span>)  <br>flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>( ans[i][<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> &amp;&amp; test [ ans[i][<span class="hljs-number">0</span>] ] == <span class="hljs-number">0</span> &amp;&amp; test[i] == <span class="hljs-number">0</span>)  <br>flag=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                cout &lt;&lt; test [i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>; <br>    &#125;<br>    <br>    test[ now ] = <span class="hljs-number">0</span> ;<br>    <span class="hljs-built_in">dfs</span>( now + <span class="hljs-number">1</span> , n );<br>    test[ now ] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>( now + <span class="hljs-number">1</span>, n);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin &gt;&gt; ans[i][<span class="hljs-number">0</span>];<br>        cin &gt;&gt; ans[i][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络类</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%B1%BB/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>深度神经网络由若干不同类型的层组成。每一层可以视为一个函数，方便起见，在本题中我们设定所有层的输入和输出都是长度为<em>n</em> 的一维向量，即<strong>x</strong>∈R<em>n</em>。为了方便地搭建深度神经网络，你需要先在layer.hpp中设计一个表示层的抽象基类<code>Layer</code>，所有具体的层类型都继承自该基类，并且所有具体的层类型都要有一个<code>forward</code> 方法，用以计算前向结果。在 linear.hpp中已经实现了一个 <code>Linear</code> 层，你可以参考该层的实现来设计<code>Layer</code>。<code>Linear</code> 层的数学定义如下：</p><p>Linear(<strong>x</strong>)=W<strong>x</strong>+<strong>b</strong></p><p>其中 <em>W</em>∈R<em>n</em>×<em>n</em>,<strong>b</strong>∈R<em>n</em>为参数，应当在构造 <code>Linear</code> 层时输入。</p><p>然后，你需要再在 conv.hpp 中实现一个 <code>Conv</code>层，该层的数学定义如下：</p><p><span class="math display">\[Conv_i(x)=\sum_{j=0}^{2m}k_jX_{i−m+j}\]</span></p><p>其中 <span class="math display">\[k∈R^{2m+1}\]</span>为参数，应当在构造 <code>Conv</code> 层时输入。</p><p>例如，当<em>m</em>=1时，<em>o<strong>u</strong>t<strong>p</strong>u<strong>t<em>的其中一个维度，如</em>o</strong>u<strong>t</strong>p<strong>u</strong>t</em>[2]=<em>k</em>[0]∗<em>x</em>[1]+<em>k</em>[1]∗<em>x</em>[2]+<em>k</em>[2]∗<em>x</em>[3]。注意若有超出范围的部分则不需要计算，例如*o<strong>u</strong>t<strong>p</strong>u**t<em>[0]=</em>k<em>[1]∗</em>x<em>[0]+</em>k<em>[2]∗</em>x<em>[1]，这里不存在</em>x*[−1]就不用算它。</p><h1 id="conv.hpp">conv.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Conv</span>:</span> <span class="hljs-keyword">public</span> Layer&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> * K;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> m;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Conv</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b,<span class="hljs-keyword">double</span> * k):<span class="hljs-built_in">n</span>(a),<span class="hljs-built_in">m</span>(b)&#123;<br>        K = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [<span class="hljs-number">2</span>*m+<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">memcpy</span>( K , k , (<span class="hljs-number">2</span>*m+<span class="hljs-number">1</span>) * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>) );<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-keyword">double</span> *input,<span class="hljs-keyword">double</span> *output)</span><span class="hljs-keyword">const</span></span>&#123;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; n ;i++)&#123;<br>            <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">2</span>*m +<span class="hljs-number">1</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i-m+j &lt; <span class="hljs-number">0</span> ) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(i-m+j &gt;= n ) <span class="hljs-keyword">continue</span>;<br>                sum += K[j] * input [ i- m +j ]; <br>            &#125;<br>            output[i] = sum;<br>            sum = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    ~<span class="hljs-built_in">Conv</span>()&#123;<br>        <span class="hljs-keyword">delete</span> [] K;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="layer.hpp">layer.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>  LAYER_H_</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  LAYER_H_</span><br><br><br>    <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Layer</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> input, <span class="hljs-keyword">double</span> * output)</span><span class="hljs-keyword">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Layer</span>()&#123;&#125;;<br><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h1 id="linear.hlock">linear.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;layer.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;new_tensor.hpp&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linear</span>:</span> <span class="hljs-keyword">public</span> Layer &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> _W;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> _b;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> _n;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Linear</span>(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> W, <span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> b): _W(<span class="hljs-built_in">new_tensor_2d</span>(n, W)), _b(<span class="hljs-built_in">new_tensor_1d</span>(n, b)), _n(n) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> input, <span class="hljs-keyword">double</span> * output)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; _n; ++i) &#123;<br>            output[i] = _b[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; _n; ++j)<br>                output[i] += _W[i][j] * input[j];<br>        &#125;<br>    &#125;<br>    ~<span class="hljs-built_in">Linear</span>() &#123;<br>        <span class="hljs-keyword">delete</span>[] _b;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; _n; ++i)<br>            <span class="hljs-keyword">delete</span>[] _W[i];<br>        <span class="hljs-keyword">delete</span>[] _W;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;layer.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;linear.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;conv.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> d, n, m, type_mark;<br>    <span class="hljs-keyword">double</span> **W, *b, *k;<br>    std::cin &gt;&gt; d &gt;&gt; n;<br>    Layer ** layers = <span class="hljs-keyword">new</span> Layer * [d];<br>    W = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> * [n];<br>    b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [n];<br>    k = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        W[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i) &#123;<br>        std::cin &gt;&gt; type_mark;<br>        <span class="hljs-keyword">if</span> (type_mark == <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">// Linear</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; n; ++x)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; n; ++y)<br>                    std::cin &gt;&gt; W[x][y];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; n; ++x)<br>                std::cin &gt;&gt; b[x];<br>            layers[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Linear</span>(n, W, b);<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// Conv</span><br>            std::cin &gt;&gt; m;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">2</span>*m+<span class="hljs-number">1</span>; ++x)<br>                std::cin &gt;&gt; k[x];<br>            layers[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Conv</span>(n, m, k);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">double</span> * x = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [n];<br>    <span class="hljs-keyword">double</span> ** y = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> * [d];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i)<br>        y[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [n];<br>    <span class="hljs-keyword">int</span> T;<br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setiosflags</span>(std::ios::fixed) &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (std::cin &gt;&gt; T; T &gt; <span class="hljs-number">0</span>; --T) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>            std::cin &gt;&gt; x[i];<br>        layers[<span class="hljs-number">0</span>]-&gt;forward(x, y[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; d; ++i)<br>            layers[i]-&gt;forward(y[i<span class="hljs-number">-1</span>], y[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; ++i)<br>            std::cout &lt;&lt; y[d<span class="hljs-number">-1</span>][i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        std::cout &lt;&lt; y[d<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>] &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; ++i) &#123;<br>        <span class="hljs-keyword">delete</span> layers[i];<br>        <span class="hljs-keyword">delete</span> [] y[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span> [] layers;<br>    <span class="hljs-keyword">delete</span> [] y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">delete</span> [] W[i];<br>    <span class="hljs-keyword">delete</span> [] W;<br>    <span class="hljs-keyword">delete</span> [] b;<br>    <span class="hljs-keyword">delete</span> [] k;<br>    <span class="hljs-keyword">delete</span> [] x;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="new_tensor.hpplock">new_tensor.hpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">double</span> * <span class="hljs-title">new_tensor_1d</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> source)</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> * target = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[n];<br>    <span class="hljs-built_in">memcpy</span>(target, source, n * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> * <span class="hljs-title">new_tensor_2d</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">double</span> * <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> source)</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> * * target = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> * [n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        target[i] = <span class="hljs-built_in">new_tensor_1d</span>(n, source[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>请在 orderedList.hpp 中定义以下三个类：</p><ol type="1"><li><p>抽象</p><p>基类</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">OrderedList</span><br></code></pre></td></tr></table></figure><p>，表示一个整数链表，有以下方法：</p><ul><li>构造函数：无参数，创建一个空的链表；</li><li><code>void insert(int val)</code> 向链表中插入一个元素，在<code>OrderedList</code> 中该方法应当为纯虚函数；</li><li><code>void printList() const</code>依次在屏幕上输出链表中的元素，元素之间用空格分隔，输出完整个链表后换行；</li><li>析构函数：释放链表所占用的空间。</li></ul></li><li><p><strong>具体</strong>类<code>AscendOrderedList</code>，表示一个升序的链表，继承自<code>OrderedList</code>，需要重载 <code>void insert(int val)</code>函数来实现升序。</p></li><li><p><strong>具体</strong>类<code>DescendOrderedList</code>，表示一个降序的链表，继承自<code>OrderedList</code>，需要重载 <code>void insert(int val)</code>函数来实现降序。</p></li></ol><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;orderedList.hpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, x;<br>    OrderedList * a = <span class="hljs-keyword">new</span> AscendOrderedList, * d = <span class="hljs-keyword">new</span> DescendOrderedList;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        std::cin &gt;&gt; x;<br>        a-&gt;<span class="hljs-built_in">insert</span>(x);<br>        d-&gt;<span class="hljs-built_in">insert</span>(x);<br>    &#125;<br>    a-&gt;<span class="hljs-built_in">printList</span>();<br>    d-&gt;<span class="hljs-built_in">printList</span>();<br>    <span class="hljs-keyword">delete</span> a;<br>    <span class="hljs-keyword">delete</span> d;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="orderlist.hpp">orderlist.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">node</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> data;<br>    node * Node;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        Node = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> a)&#123;<br>        data = a;<br>        Node = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// node(int a, node * b): data(a)&#123;</span><br>    <span class="hljs-comment">//     node* temp = b;</span><br>    <span class="hljs-comment">//     while(temp-&gt;Node != NULL)&#123;</span><br>    <span class="hljs-comment">//         temp = temp -&gt; Node;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderedList</span>&#123;</span><br><span class="hljs-keyword">public</span>:   <br>    node* head;<br><br>    <span class="hljs-built_in">OrderedList</span>()&#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> ();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>        node* temp = head;<br>        <span class="hljs-keyword">if</span>(temp -&gt; Node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp = temp -&gt; Node;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-literal">NULL</span>)&#123;<br>            cout&lt;&lt;temp -&gt; data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            temp = temp -&gt; Node;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">OrderedList</span>()&#123;<br>        node * temp = head;<br>        <span class="hljs-keyword">while</span>(temp -&gt; Node != <span class="hljs-literal">NULL</span>)&#123;<br>            node* a = temp;<br>            temp = temp -&gt; Node;<br>            <span class="hljs-keyword">delete</span> a;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> temp;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AscendOrderedList</span> :</span> <span class="hljs-keyword">public</span> OrderedList&#123; <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        node* temp = head;<br>        <span class="hljs-keyword">if</span>(temp -&gt; Node == <span class="hljs-literal">NULL</span>)&#123;<br>            temp -&gt; Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        temp = temp -&gt; Node;<br>        <span class="hljs-keyword">while</span>(temp -&gt;data &lt;= val &amp;&amp; temp -&gt; Node != <span class="hljs-literal">NULL</span> )&#123;<br>            temp = temp -&gt; Node;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(  temp -&gt; data &gt; val )&#123;<br>            node* a = head;<br>            <span class="hljs-keyword">while</span>(a-&gt;Node != temp)&#123;<br>                a = a -&gt;Node;<br>            &#125;<br>            a-&gt;Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            a-&gt;Node-&gt;Node = temp;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( temp -&gt; Node == <span class="hljs-literal">NULL</span> )&#123;<br>            temp -&gt; Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br><br>    &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DescendOrderedList</span> :</span> <span class="hljs-keyword">public</span> OrderedList&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        node* temp = head;<br>        <span class="hljs-keyword">if</span>(temp -&gt; Node == <span class="hljs-literal">NULL</span>)&#123;<br>            temp -&gt; Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        temp = temp -&gt; Node;<br>        <span class="hljs-keyword">while</span>(temp -&gt;data &gt;= val &amp;&amp; temp -&gt; Node != <span class="hljs-literal">NULL</span> )&#123;<br>            temp = temp -&gt; Node;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(  temp -&gt; data &lt; val )&#123;<br>            node* a = head;<br>            <span class="hljs-keyword">while</span>(a-&gt;Node != temp)&#123;<br>                a = a -&gt;Node;<br>            &#125;<br>            a-&gt;Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            a-&gt;Node-&gt;Node = temp;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span>( temp -&gt; Node == <span class="hljs-literal">NULL</span> )&#123;<br>            temp -&gt; Node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span> (val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多态</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E6%80%81/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Design a class named <code>Person</code> and its two derived classesnamed<code>Student</code> and <code>Employee</code>. Make<code>Faculty</code> and <code>Staff</code> derived classes of<code>Employee</code>.</p><p><code>Person</code> class has the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">string name;<br>string address;<br>string phoneNumber;<br>string email;<br></code></pre></td></tr></table></figure><p><code>Student</code> class has the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">class_status</span>&#123;</span>frssman,sophomore,junior,senior&#125;; <br>class_status status;<br></code></pre></td></tr></table></figure><p><code>Employee</code> class has the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string office;<br><span class="hljs-keyword">int</span> salary;<br>MyDate dateHired;<br></code></pre></td></tr></table></figure><p><code>Faculty</code> class has the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string officeHours;<br><span class="hljs-keyword">int</span> rank;<br></code></pre></td></tr></table></figure><p><code>Staff</code> class has the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string title;<br></code></pre></td></tr></table></figure><p><code>MyDate</code> class contains the following members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> year;<br><span class="hljs-keyword">int</span> month;<br><span class="hljs-keyword">int</span> day;<br></code></pre></td></tr></table></figure><p>Override the <code>toString</code> function in each class to displaythe class name. For example, in <code>Employee</code> class:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Make sure that the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>  cout &lt;&lt; p.<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>&#125;<br><br>Person person;<br>Student student;<br>Employee employee;<br>Faculty faculty;<br>Staff staff;<br><span class="hljs-built_in">f</span>(person);<br><span class="hljs-built_in">f</span>(student);<br><span class="hljs-built_in">f</span>(employee);<br><span class="hljs-built_in">f</span>(faculty);<br><span class="hljs-built_in">f</span>(staff);<br></code></pre></td></tr></table></figure><p>outputs:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Person</span><br><span class="hljs-attribute">Student</span><br><span class="hljs-attribute">Employee</span><br><span class="hljs-attribute">Faculty</span><br><span class="hljs-attribute">Staff</span><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    string name;<br>    string address;<br>    string phoneNumber;<br>    string email;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&quot;</span>;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span>  <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">class_status</span>&#123;</span>frssman,sophomore,junior,senior&#125;; <br>    class_status status;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&quot;</span>;<br>    &#125;<br><br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDate</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br><br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span>:</span> <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">public</span>:<br>    string office;<br>    <span class="hljs-keyword">int</span> salary;<br>    MyDate dateHired;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&quot;</span>;<br>    &#125;<br><br>&#125;;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Faculty</span>:</span> <span class="hljs-keyword">public</span> Employee&#123;<br><span class="hljs-keyword">public</span>:<br>    string officeHours;<br>    <span class="hljs-keyword">int</span> rank;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Faculty&quot;</span>;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Staff</span> :</span> <span class="hljs-keyword">public</span> Employee&#123;<br><span class="hljs-keyword">public</span>:<br>    string title;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Staff&quot;</span>;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(Person p)</span></span><br><span class="hljs-function"></span>&#123;<br>  cout &lt;&lt; p.<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(Employee e)</span></span><br><span class="hljs-function"></span>&#123;<br>  cout &lt;&lt; e.<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>  cout &lt;&lt; p.<span class="hljs-built_in">toString</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Person person;<br>  Student student;<br>  Employee employee;<br>  Faculty faculty;<br>  Staff staff;<br><br>  <span class="hljs-built_in">f1</span>(person);<br>  <span class="hljs-built_in">f1</span>(student);<br>  <span class="hljs-built_in">f1</span>(employee);<br>  <span class="hljs-built_in">f1</span>(faculty);<br>  <span class="hljs-built_in">f1</span>(staff);<br>  <br>  <span class="hljs-built_in">f2</span>(employee);<br>  <span class="hljs-built_in">f2</span>(faculty);<br>  <span class="hljs-built_in">f2</span>(staff);<br>  <br>  <span class="hljs-built_in">f</span>(person);<br>  <span class="hljs-built_in">f</span>(student);<br>  <span class="hljs-built_in">f</span>(employee);<br>  <span class="hljs-built_in">f</span>(faculty);<br>  <span class="hljs-built_in">f</span>(staff);<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚函数</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cinstance-of">C++:Instance of</h1><h2 id="description">Description</h2><p>在Java语言里边，所有的对象都会继承Object类，但C++却是没有的</p><p>例如以下的一些类：</p><p>class Object;</p><p>class Animal:public Object;</p><p>class Dog:public Animal;</p><p>class Cat:public Animal;</p><p>class Vehicle:public Object;</p><p>class Bus:public Vehicle;</p><p>class Car:public Vehicle;</p><p>class Person:public Object;</p><p>class Student:public Person;</p><p>class Teacher:public Person;</p><hr><p>我们知道对象是可以向上向下转型的，就例如</p><p>Animal* animal = new Dog();</p><p>因为继承本身就是一种is-a的关系，狗就是动物，因此这样赋值是没问题的。</p><p>但是问题来了。倘若别人传递上述代码的animal对象给你，你这个时候却不知道它原本是Dog这个类的（在Java里边是有instanceof 可以判断的），于是现在你的任务来了。</p><p>请完成以下函数以及类，使得满足instanceof函数可以返回该对象的类型名字。（注意这里的类全部都还没定义，你可以根据自己的思路去完成定义，完成的方法不限，能AC即可）</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><span class="hljs-keyword">public</span> Object;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><span class="hljs-keyword">public</span> Animal;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><span class="hljs-keyword">public</span> Animal;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span>:</span><span class="hljs-keyword">public</span> Object;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bus</span>:</span><span class="hljs-keyword">public</span> Vehicle;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><span class="hljs-keyword">public</span> Vehicle;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><span class="hljs-keyword">public</span> Object;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><span class="hljs-keyword">public</span> Animal;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>:</span><span class="hljs-keyword">public</span> Animal;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 一个Object对象</span><br><span class="hljs-comment">* 返回这个对象实例实际的类型名</span><br><span class="hljs-comment">* 例如： Object *obj = new Bus();</span><br><span class="hljs-comment">* 则instanceof(*obj) == &quot;Bus&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function">string <span class="hljs-title">instanceof</span><span class="hljs-params">(Object obj)</span></span>;<br></code></pre></td></tr></table></figure><h1 id="input">Input</h1><p>N/A</p><h1 id="output">Output</h1><p>N/A</p><h1 id="sample_input">Sample_Input</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">样例测试:<br><br>Object *obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dog</span>();<br>cout &lt;&lt; <span class="hljs-built_in">instanceof</span>(*obj) &lt;&lt; endl;<br>Object *obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Car</span>();<br>cout &lt;&lt; <span class="hljs-built_in">instanceof</span>(*obj) &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h1 id="sample_ouput">Sample_Ouput</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Dog</span><br><span class="hljs-attribute">Car</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>无需提交主函数！</p><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Object *obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dog</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Animal</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Car</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Bus</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Vehicle</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Teacher</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Person</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    cout &lt;&lt; <span class="hljs-built_in">instanceof</span> (*obj) &lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> obj;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    string a;<br>    <br>    <span class="hljs-built_in">Object</span>():<span class="hljs-built_in">a</span>(<span class="hljs-string">&quot;Object&quot;</span>)&#123;&#125; <br>    <span class="hljs-built_in">Object</span>(string b):<span class="hljs-built_in">a</span>(b)&#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Object</span>()&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><span class="hljs-keyword">public</span> Object&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Animal</span>():<span class="hljs-built_in">Object</span>(<span class="hljs-string">&quot;Animal&quot;</span>)&#123;&#125;<br>    <span class="hljs-built_in">Animal</span>(string a):<span class="hljs-built_in">Object</span>(a)&#123;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><span class="hljs-keyword">public</span> Animal&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Dog</span>():<span class="hljs-built_in">Animal</span>(<span class="hljs-string">&quot;Dog&quot;</span>)&#123;&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><span class="hljs-keyword">public</span> Animal&#123;<br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">Cat</span>():<span class="hljs-built_in">Animal</span>(<span class="hljs-string">&quot;Cat&quot;</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span>:</span><span class="hljs-keyword">public</span> Object&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Vehicle</span>():<span class="hljs-built_in">Object</span>(<span class="hljs-string">&quot;Vehicle&quot;</span>)&#123;&#125;<br>    <span class="hljs-built_in">Vehicle</span>(string a):<span class="hljs-built_in">Object</span>(a)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bus</span>:</span><span class="hljs-keyword">public</span> Vehicle&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Bus</span>():<span class="hljs-built_in">Vehicle</span>(<span class="hljs-string">&quot;Bus&quot;</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><span class="hljs-keyword">public</span> Vehicle&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Car</span>():<span class="hljs-built_in">Vehicle</span>(<span class="hljs-string">&quot;Car&quot;</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><span class="hljs-keyword">public</span> Object&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>():<span class="hljs-built_in">Object</span>(<span class="hljs-string">&quot;Person&quot;</span>)&#123;&#125;<br>    <span class="hljs-built_in">Person</span>(string a):<span class="hljs-built_in">Object</span>(a)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Student</span>():<span class="hljs-built_in">Person</span>(<span class="hljs-string">&quot;Student&quot;</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>:</span><span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Teacher</span>():<span class="hljs-built_in">Person</span>(<span class="hljs-string">&quot;Teacher&quot;</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 一个Object对象</span><br><span class="hljs-comment">* 返回这个对象实例实际的类型名</span><br><span class="hljs-comment">* 例如： Object *obj = new Bus();</span><br><span class="hljs-comment">* 则instanceof(*obj) == &quot;Bus&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function">string <span class="hljs-title">instanceof</span><span class="hljs-params">(Object&amp; obj)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> obj.a;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象类</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>声明一个Shape抽象类，在此基础上派生出Rectangle类和Circle类，两者都有GetArea（）和GetPerim（）函数，用来计算面积和周长，麻烦封装以上各类，编写程序。需要提交类shape、Rectangle、Cricle类</p><h1 id="input">Input</h1><p>第一行输入n，表示n个测试例子；接下来有n行，每一行输入数，a、b、c，表示矩形的宽、长，以及圆形的半径</p><h1 id="output">Output</h1><p>对应每一行输入：</p><p>第一行输出矩形的面积、周长</p><p>第二行输出圆形的面积、周长</p><h1 id="sample_input">Sample_Input</h1><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="sample_ouput">Sample_Ouput</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">8</span><br><span class="hljs-number">28.26</span> <span class="hljs-number">18.84</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>const double PI = 3.14； (Already defined)</p><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-keyword">double</span> n,a,b,c;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>Shape *s;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Rectangle</span>(a,b);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(c);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> :</span><span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">double</span> wid;<br>    <span class="hljs-keyword">double</span> leng;<br>    <span class="hljs-built_in">Rectangle</span>(<span class="hljs-keyword">double</span> a,<span class="hljs-keyword">double</span> b):<span class="hljs-built_in">wid</span>(a),<span class="hljs-built_in">leng</span>(b)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> wid*leng;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*(wid+leng);<br>    &#125;   <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> :</span><span class="hljs-keyword">public</span> Shape&#123;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">double</span> rad;<br><br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-keyword">double</span> a):<span class="hljs-built_in">rad</span>(a)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> rad*rad*PI;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*PI*rad;<br>    &#125;   <br>&#125;;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传参</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>写出3组<code>Plus</code>函数的声明与实现，类型分别为<code>int</code>，<code>double</code>，<code>string</code>。</p><p>主函数如下，注意只需要实现Plus函数和包含相关的头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">int</span> n;<br>   <span class="hljs-keyword">int</span> a,b;<br>   <span class="hljs-keyword">double</span> c,d;<br>   std::string str1,str2;<br>   std::cin&gt;&gt;n;<br>   <span class="hljs-keyword">while</span>(n--)<br>   &#123;<br>      std::cin &gt;&gt; a &gt;&gt; b ;<br>      std::cin &gt;&gt; c &gt;&gt; d;<br>      std::cin &gt;&gt; str1 &gt;&gt; str2;<br>      std::cout &lt;&lt; <span class="hljs-built_in">myplus</span>(a, b) &lt;&lt; endl;<br>      std::cout &lt;&lt; <span class="hljs-built_in">myplus</span>(d, c) &lt;&lt; endl;<br>      std::cout &lt;&lt; <span class="hljs-built_in">myplus</span>(str1, str2) &lt;&lt; endl;<br>   &#125; <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="sample-input">Sample Input</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">2</span>.<span class="hljs-number">5</span> <span class="hljs-number">3</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">women</span> day<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>6<br>womenday<br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p><strong>PS：Please add <code>std::</code> before using the stringtype.</strong></p><h1 id="framework.cpplock">framework.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function">std::string <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string&amp; a, <span class="hljs-keyword">const</span> std::string&amp; b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function">std::string <span class="hljs-title">myplus</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string&amp; a, <span class="hljs-keyword">const</span> std::string&amp; b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="description-1">Description</h1><p>As shown in the following code segment, op is an object of classNumber. Please implement Number in which you should:</p><ol type="1"><li>write the member functions of add and sub with one int parameterrespectively.</li><li>write a constructor with one int parameter.</li><li>write a print function to print the result.</li></ol><p>Number op(1);</p><p>op.add(2).sub(3).add(4)</p><p>op.print(); // output：4</p><h1 id="input">Input</h1><h1 id="output">Output</h1><h1 id="sample_input">Sample_Input</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Sample Test<br>    Number n(1);<br>    n.<span class="hljs-builtin-name">add</span>(2).sub(3).<span class="hljs-builtin-name">add</span>(4);<br>    n.<span class="hljs-builtin-name">print</span>();<br></code></pre></td></tr></table></figure><h1 id="sample_ouput">Sample_Ouput</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h1 id="hint-1">Hint</h1><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-function">Number <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>n.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">sub</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">add</span>(<span class="hljs-number">4</span>);<br>n.<span class="hljs-built_in">print</span>();<br><br><br><span class="hljs-function">Number <span class="hljs-title">n1</span><span class="hljs-params">(<span class="hljs-number">-1</span>)</span></span>;<br>n1.<span class="hljs-built_in">sub</span>(<span class="hljs-number">12</span>).<span class="hljs-built_in">sub</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">sub</span>(<span class="hljs-number">4</span>);<br>n1.<span class="hljs-built_in">print</span>();<br><br><br><span class="hljs-function">Number <span class="hljs-title">n2</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>n2.<span class="hljs-built_in">add</span>(<span class="hljs-number">-13</span>).<span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>);<br>n2.<span class="hljs-built_in">add</span>(<span class="hljs-number">13</span>);<br>n2.<span class="hljs-built_in">print</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="source.h-1">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Number</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">int</span> a)&#123;<br>        n=a;<br>    &#125;<br><br>    <span class="hljs-function">Number&amp; <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        n+=a;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function">Number&amp; <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        n-=a;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;n&lt;&lt;endl;<br>    &#125;<br><br><br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tiger and cat</title>
    <link href="/2022/05/22/%E7%A8%8B%E8%AE%BE/Tiger%20and%20cat/"/>
    <url>/2022/05/22/%E7%A8%8B%E8%AE%BE/Tiger%20and%20cat/</url>
    
    <content type="html"><![CDATA[<h1 id="猫科动物和老虎">猫科动物和老虎</h1><h1 id="description">Description</h1><p>下面是不完整的继承类定义，</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cat</span>();<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tiger</span> :</span> <span class="hljs-keyword">public</span> Cat<br>&#123;<br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tiger</span>(<span class="hljs-keyword">int</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>试完成其定义(你可以根据需要增加必要的构造函数和析构函数)，使得主函数main运行后能得到其后结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Cat bc;<br>    <span class="hljs-function">Tiger <span class="hljs-title">dc</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span>;<br>    <span class="hljs-function">Tiger <span class="hljs-title">dc1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果： Default Constructor of Cat is Running Constructor of Catis Running 6 Constructor of Tiger is Running 6 Constructor of Cat isRunning 18 Constructor of Tiger is Running 18 Destructor of Tiger isRunning 18 Destructor of Cat is Running 18 Destructor of Tiger isRunning 6 Destructor of Cat is Running 6 Destructor of Cat is Running0</p><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-function">Tiger <span class="hljs-title">t1</span><span class="hljs-params">(<span class="hljs-number">9</span>)</span></span>;<br> Cat c1;<br> <span class="hljs-function">Tiger <span class="hljs-title">t2</span><span class="hljs-params">(<span class="hljs-number">25</span>)</span></span>;<br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cat</span>():<span class="hljs-built_in">data</span>(<span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Default Constructor of Cat is Running&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">Cat</span>(<span class="hljs-keyword">int</span> a):<span class="hljs-built_in">data</span>(a)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Constructor of Cat is Running &quot;</span>&lt;&lt;data&lt;&lt;endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Cat</span>()&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Destructor of Cat is Running &quot;</span>&lt;&lt;data&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tiger</span> :</span> <span class="hljs-keyword">public</span> Cat<br>&#123;<br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Tiger</span>(<span class="hljs-keyword">int</span> a):<span class="hljs-built_in">Cat</span>(a),<span class="hljs-built_in">data</span>(a)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Constructor of Tiger is Running &quot;</span>&lt;&lt;data&lt;&lt;endl;<br>    &#125;<br><br><br><br>    ~<span class="hljs-built_in">Tiger</span>()&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Destructor of Tiger is Running &quot;</span>&lt;&lt;data&lt;&lt;endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>time(继承)</title>
    <link href="/2022/05/14/%E7%A8%8B%E8%AE%BE/time/"/>
    <url>/2022/05/14/%E7%A8%8B%E8%AE%BE/time/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>需要实现的是一下两个类，<code>time</code>作为父类，<code>ExtTime</code>作为子类，以下是两个类的声明，你需要做的是，实现这两个类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Time</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> : <br>       <span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">Set</span> <span class="hljs-params">( <span class="hljs-keyword">int</span>  hours , <span class="hljs-keyword">int</span>  minutes , <span class="hljs-keyword">int</span>  seconds )</span> </span>;<br>       <span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">Increment</span> <span class="hljs-params">( )</span> </span>;<br>       <span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">Write</span> <span class="hljs-params">( )</span>  <span class="hljs-keyword">const</span> </span>;<br>       <span class="hljs-built_in">Time</span> ( <span class="hljs-keyword">int</span>  initHrs, <span class="hljs-keyword">int</span>  initMins,  <span class="hljs-keyword">int</span>  initSecs ) ;  <span class="hljs-comment">// constructor </span><br>       <span class="hljs-built_in">Time</span> ( ) ;    <span class="hljs-comment">//  default constructor</span><br><br><span class="hljs-keyword">private</span> :<br>       <span class="hljs-keyword">int</span> hrs ;           <br>       <span class="hljs-keyword">int</span> mins ;          <br>       <span class="hljs-keyword">int</span> secs ;<br>&#125; <br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">ExtTime</span>  :</span>  <span class="hljs-keyword">public</span>  Time<span class="hljs-comment">// Time is the base class</span><br>&#123;<br><span class="hljs-keyword">public</span> :<br>        <span class="hljs-built_in">ExtTime</span> ( <span class="hljs-keyword">int</span>  initHrs ,  <span class="hljs-keyword">int</span>  initMins ,  <span class="hljs-keyword">int</span>  initSecs ,<br>  ZoneType    initZone ) ;      <span class="hljs-comment">// constructor</span><br>        <span class="hljs-built_in">ExtTime</span> ( ) ;              <span class="hljs-comment">// default constructor</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Set</span> <span class="hljs-params">( <span class="hljs-keyword">int</span>  hours,  <span class="hljs-keyword">int</span>  minutes,  <span class="hljs-keyword">int</span>   seconds ,</span></span><br><span class="hljs-params"><span class="hljs-function">                         ZoneType   timeZone )</span> </span>;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Write</span> <span class="hljs-params">( )</span>  <span class="hljs-keyword">const</span> </span>;<br>        <br><span class="hljs-keyword">private</span> :<br>ZoneType  zone ; <span class="hljs-comment">//  added data member</span><br>&#125; ;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">time1</span>: <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span> CDT<br><span class="hljs-attribute">time2</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> EST<br><span class="hljs-attribute">New</span> time<span class="hljs-number">2</span>: <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">55</span> PST<br><span class="hljs-attribute">Incrementing</span> time<span class="hljs-number">2</span>:<br><span class="hljs-attribute">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">55</span> PST<br><span class="hljs-attribute">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">56</span> PST<br><span class="hljs-attribute">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">57</span> PST<br><span class="hljs-attribute">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">58</span> PST<br><span class="hljs-attribute">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">59</span> PST<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> PST<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span> PST<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">02</span> PST<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">03</span> PST<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span> PST<br><span class="hljs-attribute">time3</span>: <span class="hljs-number">01</span>:<span class="hljs-number">02</span>:<span class="hljs-number">03</span><br><br><span class="hljs-attribute">03</span>:<span class="hljs-number">04</span>:<span class="hljs-number">05</span><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ExtTime.h&quot;</span>            <span class="hljs-comment">//程序4_4</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Time.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ExtTime <span class="hljs-title">time1</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>, CDT)</span></span>;<br>    ExtTime time2;<br>    <span class="hljs-keyword">int</span>     count;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;time1: &quot;</span>;<br>    time1.<span class="hljs-built_in">Write</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;time2: &quot;</span>;<br>    time2.<span class="hljs-built_in">Write</span>();<br>    cout &lt;&lt; endl;<br><br>    time2.<span class="hljs-built_in">Set</span>(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">55</span>, PST);<br>    cout &lt;&lt; <span class="hljs-string">&quot;New time2: &quot;</span>;<br>    time2.<span class="hljs-built_in">Write</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Incrementing time2:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (count = <span class="hljs-number">1</span>; count &lt;= <span class="hljs-number">10</span>; count++)<br>    &#123;<br>        time2.<span class="hljs-built_in">Write</span>();<br>        cout &lt;&lt; endl;<br>        time2.<span class="hljs-built_in">Increment</span>();<br>    &#125;<br><br>    <span class="hljs-function">Time <span class="hljs-title">time3</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;time3: &quot;</span>;<br>    time3.<span class="hljs-built_in">Write</span>();<br>    cout &lt;&lt; endl &lt;&lt; endl;<br>    time1.Time::<span class="hljs-built_in">Set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>); <br>    time1.Time::<span class="hljs-built_in">Write</span>();<br>    <br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="exttime.hlock">ExtTime.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ExtTime_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ExtTime_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span>   <span class="hljs-meta-string">&quot;Time.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">ZoneType</span> &#123;</span>EST, CST, MST, PST, EDT, CDT, MDT, PDT &#125; ;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">ExtTime</span>  :</span>  <span class="hljs-keyword">public</span>  Time<span class="hljs-comment">// Time is the base class</span><br>&#123;<br><span class="hljs-keyword">public</span> :<br>        <span class="hljs-built_in">ExtTime</span> ( <span class="hljs-keyword">int</span>  initHrs ,  <span class="hljs-keyword">int</span>  initMins ,  <span class="hljs-keyword">int</span>  initSecs ,<br>  ZoneType    initZone ) ;      <span class="hljs-comment">// constructor</span><br>        <span class="hljs-built_in">ExtTime</span> ( ) ;              <span class="hljs-comment">// default constructor</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Set</span> <span class="hljs-params">( <span class="hljs-keyword">int</span>  hours,  <span class="hljs-keyword">int</span>  minutes,  <span class="hljs-keyword">int</span>   seconds ,</span></span><br><span class="hljs-params"><span class="hljs-function">                         ZoneType   timeZone )</span> </span>;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Write</span> <span class="hljs-params">( )</span>  <span class="hljs-keyword">const</span> </span>;<br>        <br><span class="hljs-keyword">private</span> :<br>ZoneType  zone ; <span class="hljs-comment">//  added data member</span><br>&#125; ;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="time.h">Time.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> Time_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Time_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Time</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hours, <span class="hljs-keyword">int</span> minutes, <span class="hljs-keyword">int</span> seconds)</span></span>;<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Increment</span><span class="hljs-params">()</span></span>;<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>      <span class="hljs-built_in">Time</span>(<span class="hljs-keyword">int</span> initHrs, <span class="hljs-keyword">int</span> initMins, <span class="hljs-keyword">int</span> initSecs); <span class="hljs-comment">// constructor</span><br>      <span class="hljs-built_in">Time</span>();                                        <span class="hljs-comment">//  default constructor</span><br><br><span class="hljs-keyword">private</span>:<br>      <span class="hljs-keyword">int</span> hrs;<br>      <span class="hljs-keyword">int</span> mins;<br>      <span class="hljs-keyword">int</span> secs;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="time.cpp">Time.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Time.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>Time::<span class="hljs-built_in">Time</span>(  <span class="hljs-keyword">int</span> initHrs,  <span class="hljs-keyword">int</span> initMins, <span class="hljs-keyword">int</span> initSecs )<br>&#123;<br>    hrs = initHrs;<br>    mins = initMins;<br>    secs = initSecs;<br>&#125;<br><br>Time::<span class="hljs-built_in">Time</span>()<br>&#123;<br>    hrs = <span class="hljs-number">0</span>;<br>    mins = <span class="hljs-number">0</span>;<br>    secs = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Set</span><span class="hljs-params">( <span class="hljs-keyword">int</span> hours, <span class="hljs-keyword">int</span> minutes, <span class="hljs-keyword">int</span> seconds )</span></span><br><span class="hljs-function"></span>&#123;<br>    hrs = hours;<br>    mins = minutes;<br>    secs = seconds;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Increment</span><span class="hljs-params">()</span>    <span class="hljs-comment">//  IMPLEMENTATION FILE ( time.cpp )</span></span><br><span class="hljs-function"></span>&#123;<br>    secs++;<br>    <span class="hljs-keyword">if</span> (secs &gt; <span class="hljs-number">59</span>)<br>    &#123;<br>        secs = <span class="hljs-number">0</span>;<br>        mins++;<br>        <span class="hljs-keyword">if</span> (mins &gt; <span class="hljs-number">59</span>)<br>        &#123;<br>            mins = <span class="hljs-number">0</span>;<br>            hrs++;<br>            <span class="hljs-keyword">if</span> (hrs &gt; <span class="hljs-number">23</span>)<br>                hrs = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Write</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (hrs &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; hrs &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (mins &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; mins &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (secs &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; secs;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="exttime.cpp">ExtTime.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Time.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hours, <span class="hljs-keyword">int</span> minutes, <span class="hljs-keyword">int</span> seconds)</span></span>&#123;<br>      hrs = hours;<br>      mins = minutes;<br>      secs = seconds;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Increment</span><span class="hljs-params">()</span></span>&#123;<br>      secs++;<br>      <span class="hljs-keyword">if</span>(secs == <span class="hljs-number">60</span>)&#123;<br>            secs = <span class="hljs-number">0</span>;<br>            mins++;<br>            <span class="hljs-keyword">if</span>(mins == <span class="hljs-number">60</span>)&#123;<br>                  mins = <span class="hljs-number">0</span>;<br>                  hrs++;<br>                  <span class="hljs-keyword">if</span>(hrs == <span class="hljs-number">24</span>)&#123;<br>                        hrs = <span class="hljs-number">0</span>;<br>                  &#125;<br>            &#125;<br>      &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Write</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>      cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&lt;&lt; hrs &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&lt;&lt; mins &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&lt;&lt; secs;<br>&#125;<br>Time::<span class="hljs-built_in">Time</span>(<span class="hljs-keyword">int</span> initHrs, <span class="hljs-keyword">int</span> initMins, <span class="hljs-keyword">int</span> initSecs):<span class="hljs-built_in">hrs</span>(initHrs), <span class="hljs-built_in">mins</span>(initMins), <span class="hljs-built_in">secs</span>(initSecs)&#123;&#125;<br>Time::<span class="hljs-built_in">Time</span>():<span class="hljs-built_in">hrs</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">mins</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">secs</span>(<span class="hljs-number">0</span>)&#123;&#125;    <br></code></pre></td></tr></table></figure><h1 id="参考答案">参考答案</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Time.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>Time::<span class="hljs-built_in">Time</span>(  <span class="hljs-keyword">int</span> initHrs,  <span class="hljs-keyword">int</span> initMins, <span class="hljs-keyword">int</span> initSecs )<br>&#123;<br>    hrs = initHrs;<br>    mins = initMins;<br>    secs = initSecs;<br>&#125;<br><br>Time::<span class="hljs-built_in">Time</span>()<br>&#123;<br>    hrs = <span class="hljs-number">0</span>;<br>    mins = <span class="hljs-number">0</span>;<br>    secs = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Set</span><span class="hljs-params">( <span class="hljs-keyword">int</span> hours, <span class="hljs-keyword">int</span> minutes, <span class="hljs-keyword">int</span> seconds )</span></span><br><span class="hljs-function"></span>&#123;<br>    hrs = hours;<br>    mins = minutes;<br>    secs = seconds;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Increment</span><span class="hljs-params">()</span>    <span class="hljs-comment">//  IMPLEMENTATION FILE ( time.cpp )</span></span><br><span class="hljs-function"></span>&#123;<br>    secs++;<br>    <span class="hljs-keyword">if</span> (secs &gt; <span class="hljs-number">59</span>)<br>    &#123;<br>        secs = <span class="hljs-number">0</span>;<br>        mins++;<br>        <span class="hljs-keyword">if</span> (mins &gt; <span class="hljs-number">59</span>)<br>        &#123;<br>            mins = <span class="hljs-number">0</span>;<br>            hrs++;<br>            <span class="hljs-keyword">if</span> (hrs &gt; <span class="hljs-number">23</span>)<br>                hrs = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Time::Write</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (hrs &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; hrs &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (mins &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; mins &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">if</span> (secs &lt; <span class="hljs-number">10</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>    cout &lt;&lt; secs;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ExtTime.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ExtTime::<span class="hljs-built_in">ExtTime</span>(  <span class="hljs-keyword">int</span> initHrs,  <br>                                  <span class="hljs-keyword">int</span> initMins, <br>                                  <span class="hljs-keyword">int</span> initSecs, <br>                                  ZoneType initZone )<br>                                : <span class="hljs-built_in">Time</span>(initHrs, initMins, initSecs)<br>&#123;<br>      zone = initZone;<br>&#125;<br><br>ExtTime::<span class="hljs-built_in">ExtTime</span>()<br>&#123;<br>    zone = EST;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ExtTime::Set</span><span class="hljs-params">( <span class="hljs-keyword">int</span> hours, </span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-keyword">int</span> minutes, </span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-keyword">int</span> seconds,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 ZoneType timeZone )</span></span><br><span class="hljs-function"></span>&#123;<br>    Time::<span class="hljs-built_in">Set</span>(hours, minutes, seconds);   <span class="hljs-comment">//调用基类函数。Why?</span><br>    zone = timeZone;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ExtTime::Write</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">static</span> string zoneString[<span class="hljs-number">8</span>] =<br>    &#123;  <span class="hljs-string">&quot;EST&quot;</span>, <span class="hljs-string">&quot;CST&quot;</span>, <span class="hljs-string">&quot;MST&quot;</span>, <span class="hljs-string">&quot;PST&quot;</span>, <span class="hljs-string">&quot;EDT&quot;</span>, <span class="hljs-string">&quot;CDT&quot;</span>, <span class="hljs-string">&quot;MDT&quot;</span>, <span class="hljs-string">&quot;PDT&quot;</span> &#125;;<br><br>    Time::<span class="hljs-built_in">Write</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; zoneString[zone];<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shape(多态)</title>
    <link href="/2022/05/14/%E7%A8%8B%E8%AE%BE/shape(%E5%A4%9A%E6%80%81)/"/>
    <url>/2022/05/14/%E7%A8%8B%E8%AE%BE/shape(%E5%A4%9A%E6%80%81)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>声明一个<code>Shape</code>抽象类，在此基础上派生出<code>Rectangle</code>类和<code>Circle</code>类，两者都有<code>GetArea()</code>和<code>GetPerim()</code>函数，用来计算面积和周长，麻烦封装以上各类，编写程序。需要提交类<code>Shape</code>、<code>Rectangle</code>、<code>Cricle</code>。</p><p>以下是主函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> n,a,b,c;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>Shape *s;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Rectangle</span>(a,b);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(c);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="input">Input</h1><p>第一行输入<code>n</code>，表示<em>n</em>个测试例子；接下来有<em>n</em>行，每一行输入数<code>a</code>、<code>b</code>、<code>c</code>，表示矩形的宽、长，以及圆形的半径。</p><p><strong>输入处理已经由框架代码处理，你无需另外处理。</strong></p><h1 id="output">Output</h1><p>对应每一行输入：</p><ul><li>第一行输出矩形的面积、周长；</li><li>第二行输出圆形的面积、周长。</li></ul><p><strong>输出处理已经由框架代码处理，你无需另外处理。</strong></p><h1 id="sample-input">Sample Input</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">8</span><br><span class="hljs-number">28.26</span> <span class="hljs-number">18.84</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>我们已经为你定义了圆周率<code>PI</code>，请勿使用其他数值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><h1 id="framework.cpplock">framework.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-keyword">double</span> n,a,b,c;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>Shape *s;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Rectangle</span>(a,b);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(c);<br>cout&lt;&lt;s-&gt;<span class="hljs-built_in">GetArea</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s-&gt;<span class="hljs-built_in">GetPerim</span>()&lt;&lt;endl;<br><span class="hljs-keyword">delete</span> s;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>:</span> <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">double</span> length;<br><span class="hljs-keyword">double</span> height;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Rectangle</span>(<span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> h) &#123;<br>length = l;<br>height = h;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> length * height;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*(length + height);<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>:</span> <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">double</span> radius;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Circle</span>(<span class="hljs-keyword">double</span> r) &#123;<br>radius = r;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetArea</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * radius * radius;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">GetPerim</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">6.28</span> * radius;<br>&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多态</title>
    <link href="/2022/05/14/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E6%80%81(%E6%B7%98%E5%AE%9D%E6%8E%92%E5%BA%8F)/"/>
    <url>/2022/05/14/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E6%80%81(%E6%B7%98%E5%AE%9D%E6%8E%92%E5%BA%8F)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>FengGor除了是个房地产商外，像大多数女生一样，她也是喜欢逛淘宝的。我们都知道，在淘宝上有很多很多的商品。当然，FengGor挑的一般都是最贵的，但是偶尔也是要看看销量参考一下的啊。因此，她希望淘宝能够按照她想要的方式来排序：当她想要按价格排序，商品就按价格排序；当她想要按销量排序，商品就按销量排序（都是按照从大到小排序）。淘宝这种大公司肯定已经提供这个功能的啊。不过，作为一个程序猿，她希望大家也来用C++模拟实现一下。</p><p>代表商品的结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TaoBaoItem</span> &#123;</span><br>  <span class="hljs-keyword">int</span> price;<br>  <span class="hljs-keyword">int</span> volume_of_sales;<br>&#125;;<br></code></pre></td></tr></table></figure><p>为了能实现不同的排序方式，她特意抽象出了一个接口出来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortInterface</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">SortInterface</span>() &#123;&#125;;<br> <br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>接下来，她要你们实现的类如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortByPrice</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortBySales</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaoBao</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">TaoBao</span>(SortInterface* strategy);<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetSortStrategy</span><span class="hljs-params">(SortInterface* strategy)</span></span>;<br> <br>  <span class="hljs-comment">// Use current strategy_ to do the sort.</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>;<br> <br> <span class="hljs-keyword">private</span>:<br>  SortInterface *strategy_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>你提交的实现可能会被测试框架用如下的方式进行调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TaoBaoItem</span> &#123;</span><br>  <span class="hljs-keyword">int</span> price;<br>  <span class="hljs-keyword">int</span> volume_of_sales;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortInterface</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">SortInterface</span>() &#123;&#125;;<br><br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.cpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printItem</span><span class="hljs-params">(TaoBaoItem arr[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>    cout &lt;&lt; arr[i].price &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; arr[i].volume_of_sales &lt;&lt; endl;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>  TaoBaoItem item[<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">10</span>&#125;<br>  &#125;;<br>  SortByPrice price;<br>  SortBySales sales;<br><br>  <span class="hljs-function">TaoBao <span class="hljs-title">taobao</span><span class="hljs-params">(&amp;price)</span></span>; <br>  taobao.<span class="hljs-built_in">sort</span>(item, <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">printItem</span>(item, <span class="hljs-number">4</span>);<br>  <br>  taobao.<span class="hljs-built_in">SetSortStrategy</span>(&amp;sales);<br>  taobao.<span class="hljs-built_in">sort</span>(item, <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">printItem</span>(item, <span class="hljs-number">4</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><ul><li>这其实是一种叫做“策略模式”的设计模式，有兴趣的同学查阅该条目的维基百科页面（<a href="https://zh.wikipedia.org/wiki/策略模式">中文</a>，<a href="https://en.wikipedia.org/wiki/Strategy_pattern">英文</a>）。不过，这个题目最主要的目的是想让大家体验一下多态带来的好处。</li><li>关于排序的实现，大家可以尝试使用<code>std::sort</code>函数，使用方法请自行查找。</li></ul><h1 id="framework.cpplock">framework.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TaoBaoItem</span> &#123;</span><br>  <span class="hljs-keyword">int</span> price;<br>  <span class="hljs-keyword">int</span> volume_of_sales;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortInterface</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">SortInterface</span>() &#123;&#125;;<br><br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printItem</span><span class="hljs-params">(TaoBaoItem arr[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>    cout &lt;&lt; arr[i].price &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; arr[i].volume_of_sales &lt;&lt; endl;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>  TaoBaoItem item[<span class="hljs-number">4</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>, <span class="hljs-number">10</span>&#125;<br>  &#125;;<br>  SortByPrice price;<br>  SortBySales sales;<br><br>  <span class="hljs-function">TaoBao <span class="hljs-title">taobao</span><span class="hljs-params">(&amp;price)</span></span>; <br>  taobao.<span class="hljs-built_in">sort</span>(item, <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">printItem</span>(item, <span class="hljs-number">4</span>);<br>  <br>  taobao.<span class="hljs-built_in">SetSortStrategy</span>(&amp;sales);<br>  taobao.<span class="hljs-built_in">sort</span>(item, <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">printItem</span>(item, <span class="hljs-number">4</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SOURCE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SOURCE_H</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortByPrice</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>   TaoBaoItem temp;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; size - i - <span class="hljs-number">1</span>; j++) &#123;<br>     <span class="hljs-keyword">if</span>(item[j].price &lt; item[j + <span class="hljs-number">1</span>].price) &#123;<br>      temp = item[j];<br>      item[j] = item[j + <span class="hljs-number">1</span>];<br>      item[j + <span class="hljs-number">1</span>] = temp;<br>     &#125;<br>    &#125;<br>   &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortBySales</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>   TaoBaoItem temp;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; size - i - <span class="hljs-number">1</span>; j++) &#123;<br>     <span class="hljs-keyword">if</span>(item[j].volume_of_sales &lt; item[j + <span class="hljs-number">1</span>].volume_of_sales) &#123;<br>      temp = item[j];<br>      item[j] = item[j + <span class="hljs-number">1</span>];<br>      item[j + <span class="hljs-number">1</span>] = temp;<br>     &#125;<br>    &#125;<br>   &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaoBao</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">TaoBao</span>(SortInterface* strategy) &#123;<br>   <span class="hljs-keyword">this</span>-&gt;strategy_ = strategy;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetSortStrategy</span><span class="hljs-params">(SortInterface* strategy)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>-&gt;strategy_ = strategy;<br>  &#125;<br><br>  <span class="hljs-comment">// Use current strategy_ to do the sort.</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>   <span class="hljs-keyword">this</span>-&gt;strategy_-&gt;<span class="hljs-built_in">DoSort</span>(item, size);<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  SortInterface *strategy_;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(TaoBaoItem&amp; a, TaoBaoItem&amp; b)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> a.price &gt; b.price;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(TaoBaoItem&amp; a, TaoBaoItem&amp; b)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> a.volume_of_sales &gt; b.volume_of_sales;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortByPrice</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-built_in">sort</span>(item, item + size, cmp1);<br>  &#125;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortBySales</span> :</span> <span class="hljs-keyword">public</span> SortInterface &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoSort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-built_in">sort</span>(item, item + size, cmp2);<br>  &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaoBao</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">TaoBao</span>(SortInterface* strategy)&#123;<br>    strategy_ = strategy;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetSortStrategy</span><span class="hljs-params">(SortInterface* strategy)</span></span>&#123;<br>    strategy_ = strategy;<br>  &#125;<br> <br>  <span class="hljs-comment">// Use current strategy_ to do the sort.</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(TaoBaoItem item[], <span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    strategy_-&gt;<span class="hljs-built_in">DoSort</span>(item, size);<br>  &#125;<br> <br> <span class="hljs-keyword">private</span>:<br>  SortInterface *strategy_;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Product and Factory</title>
    <link href="/2022/05/14/%E7%A8%8B%E8%AE%BE/Product%20and%20Factory/"/>
    <url>/2022/05/14/%E7%A8%8B%E8%AE%BE/Product%20and%20Factory/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>在软件设计中，一个对象的创建可能没有它看上去那么容易。比如课程管理系统中，一个课程的创建依赖于许多业务逻辑。某些情况下，将对象的创建和使用分离开来，是一个不错的选择，这让我们可以更优雅地组织代码，降低各模块的耦合性。我们将使用 Product 和 Factory 的概念：</p><ul><li>当客户端需要某个 Product 时，并不直接拿到它，而是通过一个 Factory拿到</li><li>只有 Factory 关心如何创建这个 Product，而客户端无需关心</li><li>客户端拿到 Product，即可使用它支持的各种方法</li></ul><p>依次阅读 Hint中给出的三个链接，理解这三种模式和它们之间的关系，理解“产品等级结构”、“产品族”。根据给出的信息，应用“抽象工厂模式”，完成该程序。</p><h1 id="sample-input-1">Sample Input 1</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h1 id="sample-output-1">Sample Output 1</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Apple Laptop compiles <span class="hljs-keyword">a</span> cpp program.<br>Apple MobilePhone sends <span class="hljs-keyword">a</span> <span class="hljs-keyword">short</span> message.<br></code></pre></td></tr></table></figure><h1 id="sample-input-2">Sample Input 2</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h1 id="sample-output-2">Sample Output 2</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Xiaomi Laptop compiles <span class="hljs-keyword">a</span> cpp program.<br>Xiaomi MobilePhone sends <span class="hljs-keyword">a</span> <span class="hljs-keyword">short</span> message.<br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><ul><li>关键知识点：抽象类（接口继承）、多态</li><li>Laptop 可以 compileCppProgram，MobilePhone 可以sendShortMessage</li><li>想要 AppleLaptop 或 AppleMobilePhone，去找 AppleFactory</li><li>想要 XiaomiLaptop 或 XiaomiMobilePhone，去找 XiaomiFactory</li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">简单工厂模式</a></li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html">工厂方法模式</a></li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html">抽象工厂模式</a></li></ul><h1 id="client.cpplock">Client.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Product.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Factory.hpp&quot;</span></span><br><span class="hljs-keyword">using</span> std::cin;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>  Factory* factory = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">int</span> choose;<br>  cin &gt;&gt; choose;<br><br>  <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (choose) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>      factory = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AppleFactory</span>();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">default</span>:<br>      factory = <span class="hljs-keyword">new</span> <span class="hljs-built_in">XiaomiFactory</span>();<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br><br>  Laptop* laptop = factory-&gt;<span class="hljs-built_in">produceLaptop</span>();<br>  MobilePhone* phone = factory-&gt;<span class="hljs-built_in">produceMobilePhone</span>();<br><br>  laptop-&gt;<span class="hljs-built_in">compileCppProgram</span>();<br>  phone-&gt;<span class="hljs-built_in">sendShortMessage</span>();<br><br>  <span class="hljs-keyword">delete</span> laptop;<br>  <span class="hljs-keyword">delete</span> phone;<br><br>  <span class="hljs-keyword">delete</span> factory;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">test</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="factory.hpp">Factory.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> FACTORY_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FACTORY_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Product.hpp&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> Laptop* <span class="hljs-title">produceLaptop</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> MobilePhone* <span class="hljs-title">produceMobilePhone</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Factory</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleFactory</span> :</span> <span class="hljs-keyword">public</span> Factory &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Laptop* <span class="hljs-title">produceLaptop</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">AppleLaptop</span>(); &#125;<br>  <span class="hljs-function">MobilePhone* <span class="hljs-title">produceMobilePhone</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">AppleMobilePhone</span>(); &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaomiFactory</span> :</span> <span class="hljs-keyword">public</span> Factory &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Laptop* <span class="hljs-title">produceLaptop</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">XiaomiLaptop</span>(); &#125;<br>  <span class="hljs-function">MobilePhone* <span class="hljs-title">produceMobilePhone</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">XiaomiMobilePhone</span>(); &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="product.hpp">Product.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> PRODUCT_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PRODUCT_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Laptop</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compileCppProgram</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Laptop</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleLaptop</span> :</span> <span class="hljs-keyword">public</span> Laptop &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compileCppProgram</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Apple Laptop compiles a cpp program.&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaomiLaptop</span> :</span> <span class="hljs-keyword">public</span> Laptop &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compileCppProgram</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Xiaomi Laptop compiles a cpp program.&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobilePhone</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendShortMessage</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">MobilePhone</span>() &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleMobilePhone</span> :</span> <span class="hljs-keyword">public</span> MobilePhone &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendShortMessage</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Apple MobilePhone sends a short message.&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XiaomiMobilePhone</span> :</span> <span class="hljs-keyword">public</span> MobilePhone &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendShortMessage</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Xiaomi MobilePhone sends a short message.&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚函数(virtual destructor)</title>
    <link href="/2022/05/14/%E7%A8%8B%E8%AE%BE/destructor/"/>
    <url>/2022/05/14/%E7%A8%8B%E8%AE%BE/destructor/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>下面是不完整的继承类定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Prin</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Prin come form class A&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> &#123;</span><br><span class="hljs-keyword">char</span> *buf;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Prin</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Prin come from class B&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>试完成其定义（你可以根据需要增加必要的构造函数、析构函数），使得主函数<code>main</code>运行后能得到预期结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(A *a)</span> </span>&#123;<br><span class="hljs-keyword">delete</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A *a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">10</span>);<br>a-&gt;<span class="hljs-built_in">Prin</span>();<br><span class="hljs-built_in">fun</span>(a);<br>B *b =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">20</span>);<br><span class="hljs-built_in">fun</span>(b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Prin come <span class="hljs-keyword">from</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">B</span><br><span class="hljs-symbol">B::</span>~<span class="hljs-symbol">B</span>()<span class="hljs-symbol">called</span><br><span class="hljs-symbol">A::</span>~<span class="hljs-symbol">A</span>()<span class="hljs-symbol">called</span><br><span class="hljs-symbol">B::</span>~<span class="hljs-symbol">B</span>()<span class="hljs-symbol">called</span><br><span class="hljs-symbol">A::</span>~<span class="hljs-symbol">A</span>()<span class="hljs-symbol">called</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><ul><li>Virtual destructor!</li><li>Only need to submit class <code>A</code> and <code>B</code>.</li><li>Please check your spelling carefully.</li></ul><h1 id="source.cpp">source.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Prin</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Prin come form class A&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">A</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;A::~A()called&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span> <span class="hljs-keyword">public</span> A &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span> *buf;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">B</span>(<span class="hljs-keyword">int</span>)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Prin</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Prin come from class B&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">B</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;B::~B()called&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="framework.cpplock">framework.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.cpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(A *a)</span> </span>&#123;<br> <span class="hljs-keyword">delete</span> a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br> A *a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">10</span>);<br> a-&gt;<span class="hljs-built_in">Prin</span>();<br> <span class="hljs-built_in">fun</span>(a);<br> B *b =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">20</span>);<br> <span class="hljs-built_in">fun</span>(b);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>polymorphism多态(一个接口，多种方法)</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/vitual%20class(%E5%A4%9A%E6%80%81)/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/vitual%20class(%E5%A4%9A%E6%80%81)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>There are 4 classes, <code>Figure</code> is the base class, both<code>Triangle</code>, <code>Rectangle</code> and <code>Circle</code>are all inherited from it.</p><p><code>Figure</code> class is like following:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIGURE</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">// get_area()被声明为纯虚函数</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">double</span> x_size, y_size;<br>&#125;;<br></code></pre></td></tr></table></figure><p>You should implement <code>Figure</code>, <code>Triangle</code>,<code>Rectange</code>, <code>Circle</code> class.</p><h1 id="sample-output">Sample Output</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Area of <span class="hljs-built_in">triangle</span> <span class="hljs-built_in">is</span> <span class="hljs-number">60</span><br>Area of <span class="hljs-built_in">rectangle</span> <span class="hljs-built_in">is</span> <span class="hljs-number">120</span><br>Area of circle <span class="hljs-built_in">is</span> <span class="hljs-number">706.858</span><br></code></pre></td></tr></table></figure><h1 id="figure.hlock">Figure.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> FIGURE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FIGURE_H</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14159</span>; <span class="hljs-comment">// 圆周率常量</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIGURE</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">// get_area()被声明为纯虚函数</span><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">double</span> x_size, y_size;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Triangle.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Rectangel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Circle.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>       TRIANGLE triangle; <br>       RECTANGLE rectangle;<br>       CIRCLE circle;<br><br>        <span class="hljs-comment">// 处理三角形</span><br>        triangle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">// 设置三角形的底和高</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of triangle is &quot;</span> &lt;&lt; triangle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        <span class="hljs-comment">// 处理矩形</span><br>        rectangle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">// 设置矩形的长和宽</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of rectangle is &quot;</span> &lt;&lt; rectangle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        <span class="hljs-comment">// 处理圆</span><br>        circle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>);<span class="hljs-comment">// 设置圆的半径</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of circle is &quot;</span> &lt;&lt; circle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="figure.cpp">Figure.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">FIGURE::get_area</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FIGURE::set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span></span>&#123;<br>    x_size = x;<br>    y_size = y;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="triangle.h">Triangle.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TRIANGLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * y_size / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="rectangle.h">Rectangle.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RECTANGLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * y_size ;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="circle.h">Circle.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CIRCLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * x_size * PI;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Complex class(重载、格式控制)</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/simple%20complex%20class/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/simple%20complex%20class/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>You need to define a class named <code>complex</code> which hasprivate two members, one is real which represents the real part of thecomplex, and another is imag which represents the imaginary part of thecomplex, both of them are integer;</p><p>The class has some member functions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><span class="hljs-comment">//print the complex with this form like 3 + 4i, if the real part and the imaginary part both are 0, you need to print 0;</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><span class="hljs-comment">//like the function&#x27;s name, you need to return the moduli of the complex;</span><br></code></pre></td></tr></table></figure><p>What's more, you need to finish two friend function, overload "+" and"-", the rule follow the rules of the complex.</p><h1 id="sample-input">Sample Input</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>-<span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-3</span>i<br>5<span class="hljs-string">+2</span>i<br>5.09902 7.07107<br>5<span class="hljs-string">-1</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-5</span>i<br></code></pre></td></tr></table></figure><h1 id="complex.hpplock">complex.hpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">complex</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b);<br>    complex <span class="hljs-keyword">operator</span>=(complex&amp; other);<br>    complex <span class="hljs-keyword">operator</span>+(complex&amp; other);<br>    complex <span class="hljs-keyword">operator</span>-(complex&amp; other);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> real;<br>    <span class="hljs-keyword">int</span> imag;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;complex.hpp&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> real, imag;<br>  cin &gt;&gt; real &gt;&gt; imag;<br>  <span class="hljs-function">complex <span class="hljs-title">a</span><span class="hljs-params">(real, imag)</span></span>;<br>  a.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  cin &gt;&gt; real &gt;&gt; imag;<br>  <span class="hljs-function">complex <span class="hljs-title">b</span><span class="hljs-params">(real, imag)</span></span>;<br>  b.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  complex c = a + b;<br>  complex d = a - b;<br>  cout &lt;&lt; c.<span class="hljs-built_in">getModuli</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; d.<span class="hljs-built_in">getModuli</span>() &lt;&lt; endl;<br>  c.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  d.<span class="hljs-built_in">display</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="complex.cpp">complex.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;complex.hpp&quot;</span></span><br>complex::<span class="hljs-built_in">complex</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)&#123;<br>    real = a;<br>    imag = b;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span>=(complex&amp; other)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;real = other.real;<br>    <span class="hljs-keyword">this</span>-&gt;imag = other.imag;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span>+(complex&amp; other)&#123;<br>    <span class="hljs-function">complex <span class="hljs-title">temp</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    temp.real = <span class="hljs-keyword">this</span>-&gt;real + other.real;<br>    temp.imag = <span class="hljs-keyword">this</span>-&gt;imag + other.imag;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span> - (complex&amp; other)&#123;<br>    <span class="hljs-function">complex <span class="hljs-title">temp</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    temp.real = <span class="hljs-keyword">this</span>-&gt;real - other.real;<br>    temp.imag = <span class="hljs-keyword">this</span>-&gt;imag - other.imag;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">complex::display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!real &amp;&amp; !imag ) cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!real) cout &lt;&lt; noshowpos &lt;&lt; imag &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( !imag) cout&lt;&lt; noshowpos&lt;&lt; real;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; noshowpos&lt;&lt; real &lt;&lt;showpos &lt;&lt; imag &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    cout &lt;&lt; noshowpos;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">complex::getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(real * real + imag * imag);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>point class 3（继承）</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/point%20class3(%E7%BB%A7%E6%89%BF)/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/point%20class3(%E7%BB%A7%E6%89%BF)/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>在先前<code>Point Class2</code>的题目中，使用的方法是用三维的<code>ThreeDPoint</code>继承二维的<code>TwoDPoint</code>，我们可以发现，将二维点作为基类其实是不具有继承意义的。</p><p>为了实现一个具有真实继承意义的<code>Point</code>基类，我们在基类<code>Point</code>中让点的维度作为一个变量存在，这样多维度的点我们只需要继承基类就可以得到了，同时避免了<code>Distance</code>方法的重写。</p><p>请在<code>derivedPoint.h</code>、<code>derivedPoint.cpp</code>、<code>point.cpp</code>中分别完成类的声明和定义。</p><h1 id="hint">Hint</h1><p>请根据<code>main.cpp</code>和<code>point.h</code>的内容完成代码编写</p><p>在<code>getDistance</code>方法中，如果两个点维度不同，那么返回<code>-1</code></p><p>出现额外方法：</p><ol type="1"><li><code>getAbsSlope</code>为获取斜率的绝对值，如果斜率无穷则返回<code>-1</code></li><li><code>isOnAxis</code>为判断点是否在坐标轴上，是返回<code>true</code>，否则返回<code>false</code></li></ol><h1 id="point.h">point.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> POINT_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> POINT_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> *coordinate; <span class="hljs-comment">// 记录坐标的数组</span><br><span class="hljs-keyword">int</span> dim; <span class="hljs-comment">// 维度</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> dim); <span class="hljs-comment">// 初始化为原点坐标</span><br><span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> dim, <span class="hljs-keyword">int</span> *coordinate);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDimension</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getDistance</span><span class="hljs-params">(Point&amp; another)</span></span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Point</span>();<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;point.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;derivedPoint.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> point1[<span class="hljs-number">2</span>], point2[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> point[<span class="hljs-number">3</span>];<br>cin &gt;&gt; point1[<span class="hljs-number">0</span>] &gt;&gt; point1[<span class="hljs-number">1</span>];<br>cin &gt;&gt; point2[<span class="hljs-number">0</span>] &gt;&gt; point2[<span class="hljs-number">1</span>];<br>cin &gt;&gt; point[<span class="hljs-number">0</span>] &gt;&gt; point[<span class="hljs-number">1</span>] &gt;&gt; point[<span class="hljs-number">2</span>];<br><br><br><span class="hljs-function">TwoDPoint <span class="hljs-title">p1</span><span class="hljs-params">(point1)</span>, <span class="hljs-title">p2</span><span class="hljs-params">(point2)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Distance between p1 and p2 is &quot;</span> &lt;&lt; p1.<span class="hljs-built_in">getDistance</span>(p2) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;The absolute slope of the line through p1 and p2 is &quot;</span> &lt;&lt; p1.<span class="hljs-built_in">getAbsSlope</span>(p2) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;X = &quot;</span> &lt;&lt; p2.<span class="hljs-built_in">getX</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Y = &quot;</span> &lt;&lt; p2.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br><br><span class="hljs-function">ThreeDPoint <span class="hljs-title">p</span><span class="hljs-params">(point)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Distance between p1 and p is &quot;</span> &lt;&lt; p1.<span class="hljs-built_in">getDistance</span>(p) &lt;&lt; endl;<br><span class="hljs-keyword">if</span>(p.<span class="hljs-built_in">isOnAxis</span>()) cout &lt;&lt; <span class="hljs-string">&quot;ThreeDPoint is on the axis.\n&quot;</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;ThreeDPoint is not on the axis.\n&quot;</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="derived-point.cpp">derived point.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;point.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoDPoint</span>:</span><span class="hljs-keyword">public</span> Point&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TwoDPoint</span>(<span class="hljs-keyword">int</span>* p):<span class="hljs-built_in">Point</span>(<span class="hljs-number">2</span>, p)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getAbsSlope</span><span class="hljs-params">(TwoDPoint&amp; another)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>) - another.<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>) == <span class="hljs-number">0</span>) )<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> * <span class="hljs-built_in">abs</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">1</span>) - another.<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">1</span>)) / <span class="hljs-built_in">abs</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>) - another.<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreeDPoint</span>:</span><span class="hljs-keyword">public</span> Point&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ThreeDPoint</span>(<span class="hljs-keyword">int</span>* p):<span class="hljs-built_in">Point</span>(<span class="hljs-number">3</span>, p)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isOnAxis</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> !<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">0</span>) || !<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">1</span>) || !<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getByIndex</span>(<span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="point.cpp">point.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;point.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> newdim)&#123;<br>    dim = newdim;<br>    coordinate = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[dim];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dim; i++)&#123;<br>        coordinate[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> newdim, <span class="hljs-keyword">int</span> *newcoordinate)&#123;<br>    dim = newdim;<br>    coordinate = newcoordinate;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::getDimension</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> dim;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::getByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ind)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> coordinate[ind];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Point::getDistance</span><span class="hljs-params">(Point&amp; another)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(dim != another.dim) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">double</span> s = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">int</span> dim1 = dim;<br>    <span class="hljs-keyword">while</span>(dim1 &gt; <span class="hljs-number">0</span>)&#123;<br>        --dim1;<br>        s += (<span class="hljs-keyword">this</span>-&gt;coordinate[dim1] - another.coordinate[dim1])*(<span class="hljs-keyword">this</span>-&gt;coordinate[dim1] - another.coordinate[dim1]);<br>    &#125;<br>    <span class="hljs-comment">//cout &lt;&lt; sqrt(s) &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(s);<br>&#125;<br>Point::~<span class="hljs-built_in">Point</span>()&#123;<br>    <span class="hljs-comment">//delete []coordinate;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>point class 2（继承）</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/point%20class2(%E7%BB%A7%E6%89%BF)/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/point%20class2(%E7%BB%A7%E6%89%BF)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Recall the "Point" class before, we want to create<code>TwoDPoint</code> class to model a point in a two-dimensionalspace.(Default value <code>(0,0)</code>, <code>int</code>). It hasfunctions to get its coordinates <code>getX()</code>,<code>getY()</code> and a member function to calculate the distancebetween it and another TwoDPoint <code>distance</code>(return type<code>double</code>).</p><p>Based on <code>TwoDPoint</code>, create a class named<code>ThreeDPoint</code> to model a point in a three-dimensionalspace.<code>x</code>, <code>y</code>, <code>z</code> represent x-, y-and z-coordinates(Default value <code>(0,0,0)</code>,<code>int</code>).Let <code>ThreeDPoint</code> be derived from<code>TwoDPoint</code>, adding function <code>getZ()</code> and overloadthe member function<code>distance</code>.</p><h1 id="hint">Hint</h1><p>Get to know details in <code>framework.cpp</code> and try to separatedeclaration and definition in <code>Points.h</code> and<code>Points.cpp</code> .</p><h1 id="framwork.cpplock">framwork.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Points.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="hljs-keyword">const</span> TwoDPoint&amp; point)<br>&#123;<br>    out &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt; point.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; point.<span class="hljs-built_in">getY</span>() &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span>;<br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="hljs-keyword">const</span> ThreeDPoint&amp; point)<br>&#123;<br>    out &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt; point.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; point.<span class="hljs-built_in">getY</span>() &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; point.<span class="hljs-built_in">getZ</span>() &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span>;<br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//2-D Point</span><br>  TwoDPoint pa1, pa;<br>  <span class="hljs-keyword">int</span> pa2_x, pa2_y;<br>  cin &gt;&gt; pa2_x &gt;&gt; pa2_y;<br>  <span class="hljs-function">TwoDPoint <span class="hljs-title">pa2</span><span class="hljs-params">(pa2_x,pa2_y)</span></span>;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Distance between &quot;</span> &lt;&lt; pa1 &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; pa2 &lt;&lt;<span class="hljs-string">&quot; is &quot;</span>&lt;&lt;pa1.<span class="hljs-built_in">distance</span>(pa2) &lt;&lt; endl;<br>  <br>  <span class="hljs-comment">//3-D Point</span><br>  ThreeDPoint pb1;<br>  <span class="hljs-keyword">int</span> pb2_x, pb2_y, pb2_z, pb3_x, pb3_y, pb3_z;<br>  cin &gt;&gt; pb2_x &gt;&gt; pb2_y &gt;&gt; pb2_z;<br>  cin &gt;&gt; pb3_x &gt;&gt; pb3_y &gt;&gt; pb3_z;<br>  <span class="hljs-function">ThreeDPoint <span class="hljs-title">pb2</span><span class="hljs-params">(pb2_x, pb2_y, pb2_z)</span>, <span class="hljs-title">pb3</span><span class="hljs-params">(pb3_x, pb3_y, pb3_z)</span></span>;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Distance between &quot;</span> &lt;&lt; pb1 &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; pb2 &lt;&lt;<span class="hljs-string">&quot; is &quot;</span>&lt;&lt;pb1.<span class="hljs-built_in">distance</span>(pb2) &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Distance between &quot;</span> &lt;&lt; pb1 &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; pb3 &lt;&lt;<span class="hljs-string">&quot; is &quot;</span>&lt;&lt;pb1.<span class="hljs-built_in">distance</span>(pb3) &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="points.hpp">points.hpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoDPoint</span>&#123;</span><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">int</span> x, y;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TwoDPoint</span>(<span class="hljs-keyword">int</span> xx = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> yy = <span class="hljs-number">0</span>):<span class="hljs-built_in">x</span>(xx), <span class="hljs-built_in">y</span>(yy)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">const</span> TwoDPoint&amp; other)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>( <span class="hljs-number">1.0</span> * (x + other.<span class="hljs-built_in">getX</span>()) * (x + other.<span class="hljs-built_in">getX</span>()) + <span class="hljs-number">1.0</span> * (y + other.<span class="hljs-built_in">getY</span>()) * (y + other.<span class="hljs-built_in">getY</span>()));<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreeDPoint</span>:</span><span class="hljs-keyword">public</span> TwoDPoint&#123;<br>    <span class="hljs-keyword">int</span> z;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ThreeDPoint</span>(<span class="hljs-keyword">int</span> xx = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> yy = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> zz = <span class="hljs-number">0</span>):<span class="hljs-built_in">TwoDPoint</span>(xx, yy), <span class="hljs-built_in">z</span>(zz)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getZ</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> z;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ThreeDPoint&amp; other)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>( <span class="hljs-number">1.0</span> * (x + other.<span class="hljs-built_in">getX</span>()) * (x + other.<span class="hljs-built_in">getX</span>()) + <span class="hljs-number">1.0</span> * (y + other.<span class="hljs-built_in">getY</span>()) * (y + other.<span class="hljs-built_in">getY</span>()) +  <span class="hljs-number">1.0</span> * (z + other.<span class="hljs-built_in">getZ</span>()) * (z + other.<span class="hljs-built_in">getZ</span>()));<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Complex class(重载、格式控制)</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/simple%20complex%20class(%E5%A4%8D%E4%B9%A0)/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/simple%20complex%20class(%E5%A4%8D%E4%B9%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>You need to define a class named <code>complex</code> which hasprivate two members, one is real which represents the real part of thecomplex, and another is imag which represents the imaginary part of thecomplex, both of them are integer;</p><p>The class has some member functions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><span class="hljs-comment">//print the complex with this form like 3 + 4i, if the real part and the imaginary part both are 0, you need to print 0;</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><span class="hljs-comment">//like the function&#x27;s name, you need to return the moduli of the complex;</span><br></code></pre></td></tr></table></figure><p>What's more, you need to finish two friend function, overload "+" and"-", the rule follow the rules of the complex.</p><h1 id="sample-input">Sample Input</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>-<span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-3</span>i<br>5<span class="hljs-string">+2</span>i<br>5.09902 7.07107<br>5<span class="hljs-string">-1</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-5</span>i<br></code></pre></td></tr></table></figure><h1 id="complex.hpplock">complex.hpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">complex</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">complex</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b);<br>    complex <span class="hljs-keyword">operator</span>=(complex&amp; other);<br>    complex <span class="hljs-keyword">operator</span>+(complex&amp; other);<br>    complex <span class="hljs-keyword">operator</span>-(complex&amp; other);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> real;<br>    <span class="hljs-keyword">int</span> imag;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;complex.hpp&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> real, imag;<br>  cin &gt;&gt; real &gt;&gt; imag;<br>  <span class="hljs-function">complex <span class="hljs-title">a</span><span class="hljs-params">(real, imag)</span></span>;<br>  a.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  cin &gt;&gt; real &gt;&gt; imag;<br>  <span class="hljs-function">complex <span class="hljs-title">b</span><span class="hljs-params">(real, imag)</span></span>;<br>  b.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  complex c = a + b;<br>  complex d = a - b;<br>  cout &lt;&lt; c.<span class="hljs-built_in">getModuli</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; d.<span class="hljs-built_in">getModuli</span>() &lt;&lt; endl;<br>  c.<span class="hljs-built_in">display</span>();<br>  cout &lt;&lt; endl;<br>  d.<span class="hljs-built_in">display</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="complex.cpp">complex.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;complex.hpp&quot;</span></span><br>complex::<span class="hljs-built_in">complex</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)&#123;<br>    real = a;<br>    imag = b;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span>=(complex&amp; other)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;real = other.real;<br>    <span class="hljs-keyword">this</span>-&gt;imag = other.imag;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span>+(complex&amp; other)&#123;<br>    <span class="hljs-function">complex <span class="hljs-title">temp</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    temp.real = <span class="hljs-keyword">this</span>-&gt;real + other.real;<br>    temp.imag = <span class="hljs-keyword">this</span>-&gt;imag + other.imag;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br>complex complex::<span class="hljs-keyword">operator</span> - (complex&amp; other)&#123;<br>    <span class="hljs-function">complex <span class="hljs-title">temp</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    temp.real = <span class="hljs-keyword">this</span>-&gt;real - other.real;<br>    temp.imag = <span class="hljs-keyword">this</span>-&gt;imag - other.imag;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">complex::display</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!real &amp;&amp; !imag ) cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!real) cout &lt;&lt; noshowpos &lt;&lt; imag &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( !imag) cout&lt;&lt; noshowpos&lt;&lt; real;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; noshowpos&lt;&lt; real &lt;&lt;showpos &lt;&lt; imag &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    cout &lt;&lt; noshowpos;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">complex::getModuli</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(real * real + imag * imag);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(二十五)--static function</title>
    <link href="/2022/05/08/%E7%A8%8B%E8%AE%BE/static%20member/"/>
    <url>/2022/05/08/%E7%A8%8B%E8%AE%BE/static%20member/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>完成类Int，可以加入你觉得需要的member value or function.</p><figure class="highlight fortran"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">class</span> <span class="hljs-built_in">Int</span><br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">data</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Int</span>(<span class="hljs-built_in">int</span> n); //将n的值赋给<span class="hljs-keyword">data</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>使得函数f()输出为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">num <span class="hljs-number">1</span> is odd? <span class="hljs-number">1</span><br>num <span class="hljs-number">2</span> is odd? <span class="hljs-number">0</span><br><span class="hljs-number">1</span> objects of Int has been constructed.<br><span class="hljs-number">2</span> objects of Int has been constructed.<br><span class="hljs-number">3</span> objects of Int has been constructed.<br><span class="hljs-number">2</span> objects of Int has been constructed.<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i1=<span class="hljs-number">1</span>, i2=<span class="hljs-number">2</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i1 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">1</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i2 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">2</span>) &lt;&lt; endl;<br>Int ii1; <br>&#123; <span class="hljs-function">Int <span class="hljs-title">ii1</span><span class="hljs-params">(i1)</span></span>; &#125;<br><span class="hljs-function">Int <span class="hljs-title">ii2</span><span class="hljs-params">(i2)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;1001.cpp&quot;</span></span><br><span class="hljs-keyword">int</span> Int::num=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">int</span> i1=<span class="hljs-number">1</span>, i2=<span class="hljs-number">2</span>;<br> cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i1 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">1</span>) &lt;&lt; endl; <br> cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i2 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">2</span>) &lt;&lt; endl; <br>    Int ii1; <br>    &#123; <span class="hljs-function">Int <span class="hljs-title">ii1</span><span class="hljs-params">(i1)</span></span>; Int ii2; &#125;<br>    <span class="hljs-function">Int <span class="hljs-title">ii2</span><span class="hljs-params">(i2)</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>();<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="answer.cpp">answer.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Int</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Int</span>(<span class="hljs-keyword">int</span> n):<span class="hljs-built_in">data</span>(n)&#123;<br>        num++;<br>        cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; objects of Int has been constructed.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">Int</span>()&#123;<br>        num++;<br>        cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; objects of Int has been constructed.&quot;</span> &lt;&lt; endl;<br>    &#125;;<br>    ~<span class="hljs-built_in">Int</span>()&#123;<br>        num--;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">isodd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="几个点">几个点</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i1 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">1</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num &quot;</span> &lt;&lt; i2 &lt;&lt; <span class="hljs-string">&quot; is odd? &quot;</span> &lt;&lt; Int::<span class="hljs-built_in">isodd</span>(<span class="hljs-number">2</span>) &lt;&lt; endl;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">isodd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>期中考卷分析</title>
    <link href="/2022/04/25/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%9C%9F%E4%B8%AD%E8%80%83%E5%8D%B7%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/25/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%9C%9F%E4%B8%AD%E8%80%83%E5%8D%B7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="填空题">填空题</h1><p>实现逻辑门电路的两种主要半导体技术:</p><p>TTL和COMS</p><p>IC包括固定功能和可编程两大类,后者按结构和复杂度可细分为两大类:(PLD)和(FPGA)</p><p>8位有符号数,-85的反码和补码</p><p>74HC00字段含义,HC和00的含义</p><p>与非运算表示<span class="math inline">\(AB+CD\)</span>,或非运算表示<span class="math inline">\((A+B)(C+D)\)</span></p><p>芯片功能定义,数据选择器,编码器</p><p>常用D触发器和JK触发器的触发方式有两种,<strong>电平触发,边沿触发</strong></p><p>生成单个或周期脉冲的电路分别为,<strong>单稳态触发器,多谐振荡器</strong></p><p>根据图,看计数序列的模,和计数方式(或方向)</p><p>看图,集成电路的两种封装方式,DIP,小什么的封装</p><h1 id="选择题">选择题</h1><p>二进制表示53个数需要多少位,至少需要6位</p><p>或运算,可以通过两个或非门或三个与非门</p><p>-36的补码表示形式</p><p>数据选择器,三个地址数据输入端,最多有几个数据信号输入,8个</p><p>组合逻辑电路产生竞争冒险,是由于信号的延迟</p><p>异或门当作反相器时,输入端A和B引脚的接法是,<strong>A或B中有一个要接1</strong></p><p>在不影响逻辑功能的情况下,COMS与非门的多余输入端<strong>可以接高电平</strong></p><p>输出位低电平有效的16选1译码器,13对应的引脚出现一个低电平,求译码器输入是什么,<strong>1101</strong></p><p>16进制-二进制优先编码器</p><p>一位全加器有什么特性,<strong>三个输入两个输出</strong></p><h1 id="判断题">判断题</h1><p>脉冲可能考宽度,下降时间,占空比</p><p>补码表示形式的取值范围</p><p>所有数字电路可以用与或非逻辑电路出现</p><p>脉冲上升时间的定义</p><p>二进制减法可以取补码做加法进行</p><p>无效码可以在卡诺图作为无关项出现</p><p>逻辑与和布尔乘法等价</p><p>模二加法时,1+1=1</p><p>半加器包括两个输入位和一个进位输入位,产生一个和的输出位和一个进位输出位</p><p>6和3都是有效输出,高电平有效BCD编码器会输出0110</p><p>奇偶校验器级联,可将上一位的偶数输出位接下一位的任意输入位(错误)</p><h1 id="逻辑函数化简题">逻辑函数化简题</h1><p>卡诺图化简为sop表达式 <span class="math display">\[A\bar{B}CD+\bar{B}\bar{C}D+(A+C)B\bar{D}\]</span></p><p>组合逻辑电路分析</p><p>考了全加器的内部结构,最后要说明电路的逻辑功能</p><p>设计半加半减器</p><p>74HC151三输入(选择),8个数据输入,一个输出,实现四输入的逻辑表达式</p><p>实现多数表决电路</p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--matrix(运算练习)</title>
    <link href="/2022/04/20/%E7%A8%8B%E8%AE%BE/matrix%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/04/20/%E7%A8%8B%E8%AE%BE/matrix%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><h2 id="task">Task</h2><p>完善 <code>Matrix</code>类的定义，实现简单的Matrix运算，类的定义，<code>main</code>函数已给出，你需要编写Matrix.cpp文件实现具体函数，记得包含类的定义。</p><h1 id="input">Input</h1><p><code>m n</code> represent the row and col of matrix a and b(Theyhave the same shape) For next m rows, input the elements in matrix a Fornext m+1~2m rows, input the elements in matrix b</p><h1 id="output">Output</h1><p>Print Matrix a, b Print Matrix a+b Print Matrix d(The transpose ofa)</p><h1 id="sample-input-1">Sample Input 1</h1><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="sample-output-1">Sample Output 1</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Matrix</span> a:<br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><br><span class="hljs-attribute">Matrix</span> b:<br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><br><span class="hljs-attribute">Matrix</span> c = Matrix a + Matrix b :<br><span class="hljs-attribute">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><br><span class="hljs-attribute">Matrix</span> a transpose to Matrix d:<br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="sample-input-2">Sample Input 2</h1><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="sample-ouput-2">Sample Ouput 2</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Matrix</span> a:<br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">4</span><br><br><span class="hljs-attribute">Matrix</span> b:<br><span class="hljs-attribute">4</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">1</span><br><br><span class="hljs-attribute">Matrix</span> c = Matrix a + Matrix b :<br><span class="hljs-attribute">5</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">5</span> <span class="hljs-number">5</span><br><br><span class="hljs-attribute">Matrix</span> a transpose to Matrix d:<br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>类的构造函数与析构函数，运算符重载，<code>new</code>与<code>delete</code></p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Matrix.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> row, col;<br>    cout &lt;&lt; <span class="hljs-string">&quot;input the row and the col for Matrix a, b&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; row &gt;&gt; col;<br><br>    <span class="hljs-keyword">int</span> **mat_a_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>        mat_a_arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>            cin &gt;&gt; mat_a_arr[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> **mat_b_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>        mat_b_arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>            cin &gt;&gt; mat_b_arr[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">Matrix <span class="hljs-title">a</span><span class="hljs-params">(row, col, mat_a_arr)</span>, <span class="hljs-title">b</span><span class="hljs-params">(row, col, mat_b_arr)</span>, <span class="hljs-title">c</span><span class="hljs-params">(a)</span>, d</span>;<br>    cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Matrix a:&quot;</span> &lt;&lt; endl;<br>    a.<span class="hljs-built_in">display</span>();<br>    cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Matrix b:&quot;</span> &lt;&lt; endl;<br>    b.<span class="hljs-built_in">display</span>();<br>    c = a + b;<span class="hljs-comment">//用重载运算符“+”实现两个矩阵相加 </span><br>    cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Matrix c = Matrix a + Matrix b :&quot;</span> &lt;&lt; endl;<br>    c.<span class="hljs-built_in">display</span>();<br>    cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;Matrix a transpose to Matrix d:&quot;</span> &lt;&lt; endl;<br>    d = a.<span class="hljs-built_in">transpose</span>();<br>    d.<span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>        <span class="hljs-keyword">delete</span>[]mat_a_arr[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[]mat_a_arr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>        <span class="hljs-keyword">delete</span>[]mat_b_arr[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[]mat_b_arr;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="matrix.h">matrix.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MATRIX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MATRIX_H</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Matrix</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-built_in">Matrix</span>();                                           <span class="hljs-comment">//默认构造函数</span><br>   ~<span class="hljs-built_in">Matrix</span>();                                          <span class="hljs-comment">//析构函数</span><br>   <span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">const</span> Matrix &amp;);                             <span class="hljs-comment">//拷贝构造函数</span><br>   <span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">int</span>** elements);           <span class="hljs-comment">//普通构造函数  </span><br>   Matrix <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Matrix &amp;)<span class="hljs-keyword">const</span>;              <span class="hljs-comment">//重载运算符“+”</span><br>   Matrix <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Matrix &amp;);                   <span class="hljs-comment">//重载运算符“=”</span><br>   <span class="hljs-function">Matrix <span class="hljs-title">transpose</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>;                            <span class="hljs-comment">//矩阵的转置</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>;                                <span class="hljs-comment">//输出数据函数   </span><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-keyword">int</span> row;                                            <span class="hljs-comment">//矩阵的行</span><br>   <span class="hljs-keyword">int</span> col;                                            <span class="hljs-comment">//矩阵的列</span><br>   <span class="hljs-keyword">int</span>** mat;                                          <span class="hljs-comment">//用于储存矩阵</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="matrix.cpp">matrix.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Matrix.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>Matrix::<span class="hljs-built_in">Matrix</span>()&#123;<br>    mat = <span class="hljs-literal">NULL</span>;<br>&#125;                                        <span class="hljs-comment">//构造函数</span><br>Matrix::~<span class="hljs-built_in">Matrix</span>()&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        <span class="hljs-keyword">delete</span>[] mat[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span> [] mat;<br>&#125;                                     <span class="hljs-comment">//析构函数</span><br>Matrix::<span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">const</span> Matrix &amp; other)&#123;<br>    row = other.row;<br>    col = other.col;<br>    mat = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        mat[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">memcpy</span>(mat[i], other.mat[i], col);<br>    &#125;<br>&#125;                             <span class="hljs-comment">//拷贝构造函数</span><br>Matrix::<span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">int</span>** elements)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;row = row;<br>    <span class="hljs-keyword">this</span>-&gt;col = col;<br>    mat = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">int</span> j, i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        mat[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col];<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; col; j++)&#123;<br>            mat[i][j] = elements[i][j];<br>        &#125;<br>    &#125;<br>&#125;           <span class="hljs-comment">//默认构造函数  </span><br>Matrix Matrix::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Matrix &amp; other)<span class="hljs-keyword">const</span>&#123;<br>    Matrix temp;<br>    temp.row = <span class="hljs-keyword">this</span>-&gt;row;<br>    temp.col = <span class="hljs-keyword">this</span>-&gt;col;<br>    temp.mat = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        temp.mat[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col];<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; col; j++)&#123;<br>            temp.mat[i][j] = <span class="hljs-keyword">this</span>-&gt;mat[i][j] + other.mat[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;            <span class="hljs-comment">//重载运算符“+”</span><br>Matrix Matrix::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Matrix &amp; other)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt; mat != <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>            <span class="hljs-keyword">delete</span>[] mat[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span> [] mat;<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt; row = other.row;<br>    <span class="hljs-keyword">this</span>-&gt; col = other.col;<br>    <span class="hljs-keyword">this</span>-&gt; mat = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[row];<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;mat[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[col];<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; col; j++)&#123;    <br>            <span class="hljs-keyword">this</span>-&gt;mat[i][j] = other.mat[i][j];<br>            <span class="hljs-comment">//cout &lt;&lt; other.mat[i][j] &lt;&lt; &#x27; &#x27;;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;                <span class="hljs-comment">//重载运算符“=”</span><br><span class="hljs-function">Matrix <span class="hljs-title">Matrix::transpose</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>    Matrix temp;<br>    temp.row = <span class="hljs-keyword">this</span>-&gt;col;<br>    temp.col = <span class="hljs-keyword">this</span>-&gt;row;<br>    temp.mat = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[col];<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; temp.row; i++)&#123;<br>        temp.mat[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row];<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; temp.col; j++)&#123;<br>            temp.mat[i][j] = <span class="hljs-keyword">this</span>-&gt;mat[j][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;                            <span class="hljs-comment">//矩阵的转置</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Matrix::display</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; col - <span class="hljs-number">1</span>; j++)&#123;<br>            cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mat[i][j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mat[i][j] &lt;&lt; endl;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--[Static Member] Seminar Logger2</title>
    <link href="/2022/04/19/%E7%A8%8B%E8%AE%BE/static%20member2/"/>
    <url>/2022/04/19/%E7%A8%8B%E8%AE%BE/static%20member2/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>SDCS will organize students to participate in theseminar。<code>curr_ people</code> off campus mysterious guests andorganizers have confirmed their participation. Meanwhile, they have beenwaiting in the venue. There are <code>student_ num</code> studentsparticipated, and each student has to introduce himself. At the end ofthe event, the students will leave in the order of admission, and theguests and the organizer will leave after the final discussion.</p><p>Use the <code>Student</code> class to record the students. Pleasecomplete the <code>Student.cpp</code> so as to make the program achievethe corresponding record results.</p><p>SDCS将组织学生参加讨论会，已经有<code>curr_people</code>个校外神秘嘉宾以及举办方确定参与，同时他们已经在会场中等待。共有<code>student_num</code>个学生参加，每一个学生到场后都要进行一次自我介绍。活动结束后，学生按照入场的顺序依次退场，嘉宾以及举办方在最终商讨后最后离场。</p><p>用<code>Student</code>类来记录参加的学生，请完成<code>Student.cpp</code>文件的编写，使得程序能够达成对应的记录结果。</p><h1 id="sample-input">Sample Input</h1><p>In the first line, there are two numeric inputs, which are the numberof organizers and guests (<code>curr_ people</code>), and the number ofstudents in SDCS(<code>student_ num</code>).</p><p>In next <code>student_num</code> lines, each line has two inputs. Thefirst input is indicate the gender of the student: if the student is aboy, it will be 1, otherwise, it's 0. The second input is a string,which indicates the name of the student</p><p>第一行有两个数字输入，分别为举办方与嘉宾的数目<code>curr_people</code>，以及SDCS中学生的数量<code>student_num</code>。</p><p>此后的<code>person_num</code>行中，每行都有2个输入，第一个int输入表示参与者的性别，如果是男生则为1，否则为0；第二个string输入表示参与者的姓名。</p><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span>Jack<br><span class="hljs-symbol">0 </span>Lisa<br><span class="hljs-symbol">1 </span>Jackson<br><span class="hljs-symbol">0 </span>Rose<br><span class="hljs-symbol">0 </span>Jisoo<br><span class="hljs-symbol">1 </span>Jack<br><span class="hljs-symbol">0 </span>Jennie<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Jack. I have no classmates here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Lisa. I have <span class="hljs-keyword">only</span> <span class="hljs-number">1</span> classmate here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Jackson. I have <span class="hljs-number">2</span> classmates here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Rose. I have <span class="hljs-number">3</span> classmates here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Jisoo. I have <span class="hljs-number">4</span> classmates here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Jack. I have <span class="hljs-number">5</span> classmates here.<br>Hi! My<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span> Jennie. I have <span class="hljs-number">6</span> classmates here.<br>The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> people <span class="hljs-literal">is</span> <span class="hljs-number">14</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> students <span class="hljs-literal">is</span> <span class="hljs-number">7</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> girls <span class="hljs-literal">is</span> <span class="hljs-number">4</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> boys <span class="hljs-literal">is</span> <span class="hljs-number">3</span>.<br><br>The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> people <span class="hljs-literal">is</span> <span class="hljs-number">13</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> students <span class="hljs-literal">is</span> <span class="hljs-number">6</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> girls <span class="hljs-literal">is</span> <span class="hljs-number">4</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> boys <span class="hljs-literal">is</span> <span class="hljs-number">2</span>.<br>The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> people <span class="hljs-literal">is</span> <span class="hljs-number">12</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> students <span class="hljs-literal">is</span> <span class="hljs-number">5</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> girls <span class="hljs-literal">is</span> <span class="hljs-number">3</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> boys <span class="hljs-literal">is</span> <span class="hljs-number">2</span>.<br>The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> people <span class="hljs-literal">is</span> <span class="hljs-number">11</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> students <span class="hljs-literal">is</span> <span class="hljs-number">4</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> girls <span class="hljs-literal">is</span> <span class="hljs-number">3</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> boys <span class="hljs-literal">is</span> <span class="hljs-number">1</span>.<br>The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> people <span class="hljs-literal">is</span> <span class="hljs-number">10</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> students <span class="hljs-literal">is</span> <span class="hljs-number">3</span>. The<span class="hljs-built_in"> number</span> <span class="hljs-keyword">of</span> girls <span class="hljs-literal">is</span> <span class="hljs-number">2</span>. <br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Student.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>&#123;<br>Student::person_num = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">total</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> curr_people = <span class="hljs-number">0</span>, student_num = <span class="hljs-number">0</span>;<br>cin &gt;&gt; curr_people &gt;&gt; student_num;<br>Student* student_list[student_num];<br>Student::person_num += curr_people;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; student_num; ++i)&#123;<br>string name = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">int</span> isBoy = <span class="hljs-number">0</span>;<br>cin &gt;&gt; isBoy &gt;&gt; name;<br>student_list[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Student</span>(isBoy, name);<br>student_list[i]-&gt;<span class="hljs-built_in">sayHi</span>();<br>&#125;<br><span class="hljs-built_in">total</span>();<br><span class="hljs-comment">// 学生退场</span><br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; student_num; ++i)&#123;<br><span class="hljs-keyword">delete</span> student_list[i];<br><span class="hljs-built_in">total</span>();<br>&#125;<br><span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 嘉宾以及举办方离场</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="student.hlock">student.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> STUDENT_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STUDENT_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> girl_num;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> boy_num;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> person_num;<br><span class="hljs-built_in">Student</span>(<span class="hljs-keyword">int</span> gender, string name);<br>~<span class="hljs-built_in">Student</span>();<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHi</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>string name;<br><span class="hljs-keyword">int</span> gender;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">total</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h1 id="student.cpp">student.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> Student:: girl_num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> Student:: boy_num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> Student:: person_num=<span class="hljs-number">0</span>;<br><br>Student::<span class="hljs-built_in">Student</span>(<span class="hljs-keyword">int</span> g,string n):<span class="hljs-built_in">gender</span>(g),<span class="hljs-built_in">name</span>(n)&#123;<br>    <span class="hljs-keyword">if</span>(g ==<span class="hljs-number">1</span>)&#123;<br>        boy_num++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        girl_num++;<br>    &#125;<br>    person_num++;<br>&#125;<br><br>Student::~<span class="hljs-built_in">Student</span>()&#123;<br>    <span class="hljs-keyword">if</span>(gender ==<span class="hljs-number">1</span>)&#123;<br>        boy_num--;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        girl_num--;<br>    &#125;<br>    person_num--;<br>&#125;<br><span class="hljs-keyword">void</span> Student:: <span class="hljs-built_in">sayHi</span>()&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hi! My name is &quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;. I have &quot;</span>;<br>    <span class="hljs-keyword">if</span>(boy_num+girl_num==<span class="hljs-number">2</span>) cout&lt;&lt;<span class="hljs-string">&quot;only 1 classmate here.&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">if</span>(boy_num+girl_num==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-string">&quot;no classmates here.&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">if</span>(boy_num+girl_num&gt;<span class="hljs-number">2</span>) cout&lt;&lt;boy_num+girl_num<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&quot; classmates here.&quot;</span>&lt;&lt;endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">total</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Student::person_num==<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot;There is nobody here.&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;The number of people is &quot;</span>&lt;&lt;Student::person_num&lt;&lt;<span class="hljs-string">&quot;. The number of students is &quot;</span>&lt;&lt;Student::boy_num+Student::girl_num&lt;&lt;<span class="hljs-string">&quot;. The number of girls is &quot;</span>&lt;&lt;Student::girl_num&lt;&lt;<span class="hljs-string">&quot;. The number of boys is &quot;</span>&lt;&lt;Student::boy_num&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="注意">注意</h1><p>全局函数在使用静态变量时,需要在前面加一个Student::</p><p>如何初始化静态变量</p><p>int student:: girl_num=0;</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--inservice(虚继承)</title>
    <link href="/2022/04/16/%E7%A8%8B%E8%AE%BE/inservice/"/>
    <url>/2022/04/16/%E7%A8%8B%E8%AE%BE/inservice/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Please complete the following 4 classes: <strong>Person, Student,Worker, Inservice</strong>.</p><p>Note:</p><ol type="1"><li><p>Person owns data member name and sex, the output format is (Formore detail, see the <strong>sample output</strong>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// you should add this ouput statement in the constructor</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Construct Person&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">// you should add this ouput statement in the destructor</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Destruct Person&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li><li><p><code>Student</code> is a derived class of <code>Person</code>,its data member is a string <code>sno</code> (学号), its constructor hasto print <code>Construct Student</code> and its destructor has to print<code>Destruct Student</code>.</p></li><li><p><code>Worker</code> is a derived class of <code>Person</code>,its data member is a string <code>wno</code> (职员号), its constructorhas to print <code>Construct Worker</code> and its destructor has toprint <code>Destruct Worker</code>.</p></li><li><p>Please think the <strong>relationship between InService andStudent/Worker</strong>, and implement <code>InService</code> class byyourself. with its constructor prints <code>Construct InService</code>and its destructor prints <code>Destruct InService</code>.</p></li></ol><h1 id="sample-input">Sample Input</h1><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">amblpo<br><span class="hljs-number">1</span><br><span class="hljs-number">13154671</span><br><span class="hljs-number">10814061</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Construct</span> <span class="hljs-variable">Person</span><br><span class="hljs-built_in">Construct</span> <span class="hljs-variable">Student</span><br><span class="hljs-built_in">Construct</span> <span class="hljs-variable">Worker</span><br><span class="hljs-built_in">Construct</span> <span class="hljs-variable">InService</span><br><span class="hljs-variable">amblpo</span><br><span class="hljs-number">1</span><br><span class="hljs-variable">amblpo</span><br><span class="hljs-number">1</span><br><span class="hljs-number">13154671</span><br><span class="hljs-variable">amblpo</span><br><span class="hljs-number">1</span><br><span class="hljs-number">10814061</span><br><span class="hljs-variable">Destruct</span> <span class="hljs-variable">InService</span><br><span class="hljs-variable">Destruct</span> <span class="hljs-variable">Worker</span><br><span class="hljs-variable">Destruct</span> <span class="hljs-variable">Student</span><br><span class="hljs-variable">Destruct</span> <span class="hljs-variable">Person</span><br></code></pre></td></tr></table></figure><h1 id="hints">Hints</h1><p>虚继承</p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;inservice.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string name, sno, wno;<br>    <span class="hljs-keyword">int</span> sex;<br><br>    cin &gt;&gt; name;<br>    cin &gt;&gt; sex;<br>    cin &gt;&gt; sno;<br>    cin &gt;&gt; wno;<br><br>    <span class="hljs-function">InService <span class="hljs-title">is</span><span class="hljs-params">(name, sex, sno, wno)</span></span>;<br><br>    Person* p = &amp;is;<br>    Student* s = &amp;is;<br>    Worker* w = &amp;is; <br> <br>    cout &lt;&lt; p-&gt;<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br>    cout &lt;&lt; p-&gt;<span class="hljs-built_in">getSex</span>() &lt;&lt; endl;<br>    cout &lt;&lt; s-&gt;<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br>    cout &lt;&lt; s-&gt;<span class="hljs-built_in">getSex</span>() &lt;&lt; endl;<br>    cout &lt;&lt; s-&gt;<span class="hljs-built_in">getSno</span>() &lt;&lt; endl;<br>    cout &lt;&lt; w-&gt;<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br>    cout &lt;&lt; w-&gt;<span class="hljs-built_in">getSex</span>() &lt;&lt; endl;<br>    cout &lt;&lt; w-&gt;<span class="hljs-built_in">getWno</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="inservice.h">inservice.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;</span><br>    string name;<br>    <span class="hljs-keyword">int</span> sex;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(string n,<span class="hljs-keyword">int</span> s):<span class="hljs-built_in">name</span>(n),<span class="hljs-built_in">sex</span>(s)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Construct Person&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><br>~<span class="hljs-built_in">Person</span>()&#123;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Destruct Person&quot;</span> &lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sex;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Person&#123;<br>    string sno;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Student</span>(string n,<span class="hljs-keyword">int</span> s,string o): <span class="hljs-built_in">Person</span>(n,s),<span class="hljs-built_in">sno</span>(o)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Construct Student&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function">string <span class="hljs-title">getSno</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sno;<br>&#125;<br><br>~<span class="hljs-built_in">Student</span>()&#123;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Destruct Student&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Person&#123;<br><br>    string wno;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Worker</span>(string n,<span class="hljs-keyword">int</span> s,string o):<span class="hljs-built_in">Person</span>(n,s),<span class="hljs-built_in">wno</span>(o)&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;Construct Worker&quot;</span> &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-function">string <span class="hljs-title">getWno</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> wno;<br>    &#125;<br>    ~<span class="hljs-built_in">Worker</span>()&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;Destruct Worker&quot;</span> &lt;&lt;endl;<br>    &#125;<br><br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InService</span>:</span> <span class="hljs-keyword">public</span> Student, <span class="hljs-keyword">public</span> Worker&#123;<br><br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-built_in">InService</span>(string n, <span class="hljs-keyword">int</span> se, string sn, string wn):<span class="hljs-built_in">Person</span>(n, se), <span class="hljs-built_in">Student</span>(n, se, sn), <span class="hljs-built_in">Worker</span>(n, se, wn)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Construct InService&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">InService</span>()&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;Destruct InService&quot;</span> &lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--matrix and vector</title>
    <link href="/2022/04/16/%E7%A8%8B%E8%AE%BE/matrix%20and%20vector/"/>
    <url>/2022/04/16/%E7%A8%8B%E8%AE%BE/matrix%20and%20vector/</url>
    
    <content type="html"><![CDATA[<h1 id="problem-description">Problem Description</h1><p>Matrix can be stored in a one-dimensional vector in a row-first way,inheriting from the Vector class. According to Vector.h and Matrix.h,complete the implementation of Vector class and Matrix class. Functiondescription: Vector::getModule() gets the modulus length of the vector,Matrix::Symmetric() judges whether the matrix is a symmetric matrix.矩阵可以以行优先的方式存储在一维向量中,继承于Vector类。根据Vector.h和Matrix.h完成Vector类和Matrix类的实现。函数说明：Vector::getModule()求得向量的模长，Matrix::Symmetric()判断矩阵是不是对称矩阵。</p><h2 id="hint">HINT</h2><p>向量的模长就是向量的长度（或称模）。</p><h2 id="输入">输入</h2><p>向量长度n 向量n个元素的值</p><p>矩阵行row 矩阵列col 矩阵元素</p><h2 id="输出">输出</h2><p>向量模长 矩阵元素个数 矩阵是否为对称矩阵</p><h2 id="sample-input1">[Sample Input1]</h2><p>3 0 0 0</p><p>3 3 1 0 0 0 1 0 0 0 1</p><h2 id="sample-output1">[Sample Output1]</h2><p>Vector Module: 0 Total Elements in Matrix: 9 Symmetric matrix: 1</p><h2 id="sample-input2">[Sample Input2]</h2><p>3 3 4 0</p><p>3 3 3 0 1 0 4 0 1 0 5</p><h2 id="sample-output2">[Sample Output2]</h2><p>Vector Module: 5 Total Elements in Matrix: 9 Symmetric matrix: 1</p><h1 id="framwork.cpplock">framwork.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;vector_matrix.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> vector_dimension;<br>    cin &gt;&gt; vector_dimension;<br><br>    <span class="hljs-keyword">int</span>* vector_elements = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vector_dimension];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;vector_dimension;i++)<br>        cin &gt;&gt; vector_elements[i];<br>    <br>    <span class="hljs-keyword">int</span> row, col;<br>    cin &gt;&gt; row &gt;&gt; col;<br>    <span class="hljs-keyword">int</span>* matrix_elements = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row*col];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;col;j++)<br>            cin &gt;&gt; matrix_elements[i*row+j];<br>    &#125;<br><br>    <span class="hljs-function">Vector <span class="hljs-title">v</span><span class="hljs-params">(row,vector_elements)</span></span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Vector Module: &quot;</span>&lt;&lt;v.<span class="hljs-built_in">getModule</span>()&lt;&lt;endl;<br><br>    <span class="hljs-function">Matrix <span class="hljs-title">m</span><span class="hljs-params">(row,col,matrix_elements)</span></span>;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Total Elements in Matrix: &quot;</span> &lt;&lt; m.<span class="hljs-built_in">getDimension</span>()&lt;&lt;endl;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Symmetric matrix: &quot;</span>&lt;&lt;m.<span class="hljs-built_in">Symmetric</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="vector_matrix.hlock">vector_matrix.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> VECTOR_MATRIX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> VECTOR_MATRIX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Vector</span>();<br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-keyword">int</span> dim, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* elements_);<br>    ~<span class="hljs-built_in">Vector</span>();<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDimension</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> *<span class="hljs-title">getElements</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getModule</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;                             <span class="hljs-comment">//求向量的模长</span><br>    <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> dimension;                                  <span class="hljs-comment">//向量的维度</span><br>    <span class="hljs-keyword">int</span> *elements;                                  <span class="hljs-comment">//存储向量元素的数组</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Matrix</span>:</span> <span class="hljs-keyword">public</span> Vector&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Matrix</span>();<br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* elements_);      <span class="hljs-comment">//矩阵的行列以及矩阵元素（行优先方式存储在一维数组中）</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Symmetric</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;                              <span class="hljs-comment">//判断是否为对称矩阵</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> row;                                       <span class="hljs-comment">//矩阵的行</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h1 id="vector_matrix.cpp">vector_matrix.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br>Vector:: <span class="hljs-built_in">Vector</span>()&#123;<br>    dimension=<span class="hljs-number">0</span>;<br>    elements=<span class="hljs-literal">NULL</span>;<br>&#125;<br>Vector:: <span class="hljs-built_in">Vector</span>(<span class="hljs-keyword">int</span> dim, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* elements_)&#123;<br>    dimension=dim;<br>    elements=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [dim];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;dim;i++)&#123;<br>        elements[i]=elements_[i];<br>    &#125;<br>&#125;<br>Vector:: ~<span class="hljs-built_in">Vector</span>()&#123;<br>    <span class="hljs-keyword">if</span>(elements!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">delete</span> [] elements;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-keyword">int</span> Vector:: <span class="hljs-built_in">getDimension</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span>  dimension;<br>&#125;<br><span class="hljs-keyword">int</span>* Vector:: <span class="hljs-built_in">getElements</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> elements;<br>&#125;<br><span class="hljs-keyword">double</span> Vector:: <span class="hljs-built_in">getModule</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">double</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;dimension;i++)&#123;<br>        sum+=elements[i]*elements[i];<br>    &#125;<br>    sum= <span class="hljs-built_in">sqrt</span>(sum);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><br>Matrix:: <span class="hljs-built_in">Matrix</span>()&#123;<br>    row=<span class="hljs-number">0</span>;<br>&#125;<br>Matrix:: <span class="hljs-built_in">Matrix</span>(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* elements_):<span class="hljs-built_in">Vector</span>(row*col,elements_)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;row=row;<br>&#125;      <span class="hljs-comment">//矩阵的行列以及矩阵元素（行优先方式存储在一维数组中）</span><br><span class="hljs-keyword">bool</span> Matrix::  <span class="hljs-built_in">Symmetric</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">int</span> col=<span class="hljs-built_in">getDimension</span>()/row;<br>    <span class="hljs-keyword">if</span>(col!=row) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//int temp [row][col];</span><br>    <span class="hljs-keyword">int</span> **temp=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>* [row];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)&#123;<br>    temp[i]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [col];<br>&#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;col;j++)&#123;<br>            temp[i][j]=<span class="hljs-built_in">getElements</span>()[col*i+j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;col;j++)&#123;<br>            <span class="hljs-keyword">if</span>(temp[i][j]!=temp[j][i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)&#123;<br><span class="hljs-keyword">delete</span> [] temp[i];<br>&#125;<br><span class="hljs-keyword">delete</span> [] temp;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;                              <span class="hljs-comment">//判断是否为对称矩阵</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>set的使用</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/set%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/set%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="http://c.biancheng.net/view/7192.html">C++ STLset容器完全攻略（超级详细） (biancheng.net)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//头文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,                        // 键 <span class="hljs-title">key</span> 和值 <span class="hljs-title">value</span> 的类型</span><br><span class="hljs-class">           <span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span> =</span> less&lt;T&gt;,        <span class="hljs-comment">// 指定 set 容器内部的排序规则</span><br>           <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alloc</span> =</span> allocator&lt;T&gt;      <span class="hljs-comment">// 指定分配器对象的类型</span><br>           &gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">set</span>;</span><br><br>set&lt;<span class="hljs-keyword">int</span>&gt; myset;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="相关函数">相关函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;<span class="hljs-keyword">int</span>&gt; a;<br><span class="hljs-comment">//向set中插入元素</span><br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">//set中元素的个数</span><br>a.<span class="hljs-built_in">size</span>();<br><span class="hljs-comment">//返回set容器的第一个元素的地址</span><br>a.<span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">//返回set容器的最后一个元素的地址</span><br>a.<span class="hljs-built_in">end</span>();<br><span class="hljs-comment">//删除set容器中的所有元素</span><br>a.<span class="hljs-built_in">clear</span>();<br><span class="hljs-comment">//判断set容器是否为空</span><br>a.<span class="hljs-built_in">empty</span>();<br><span class="hljs-comment">//返回set容器中可能包含的元素的最大个数</span><br>a.<span class="hljs-built_in">max_size</span>();<br></code></pre></td></tr></table></figure><h1 id="如何修改set里面的默认排序顺序">如何修改set里面的默认排序顺序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">set与list容器排序区别：</span><br><span class="hljs-comment">list容器的排序是一个自带的sort成员函数，需要在sort中传一个函数名来指定排序规则；</span><br><span class="hljs-comment">set是默认插入数据就自动排序的，所以需要在插数据之前用仿函数指定排序规则</span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-comment">/*************************************set容器内置数据类型排序***************************/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printfIntSet</span><span class="hljs-params">(set&lt;<span class="hljs-keyword">int</span>&gt;&amp; s)</span><span class="hljs-comment">//打印内置数据类型int数组的函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>();it != s.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">/*仿函数*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myCompare</span>//<span class="hljs-title">int</span>数组比较大小的类，也可称为数据类型</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span><span class="hljs-comment">//仿函数的返回值是bool类型，重载了() 运算符</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span><span class="hljs-comment">//set容器内置数据类型排序</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br><br><span class="hljs-built_in">printfIntSet</span>(s);<span class="hljs-comment">//默认是从小到大</span><br><br><br>set&lt;<span class="hljs-keyword">int</span>, myCompare&gt; s1;<span class="hljs-comment">//在定义数组的时候指定排序规则</span><br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-keyword">int</span>,myCompare&gt;::iterator it = s1.<span class="hljs-built_in">begin</span>();it != s1.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//数据输出变成降序了</span><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">/*************************************set容器自定义数据类型排序***************************/</span><br><br><span class="hljs-comment">//自定义的数据类型插入set容器如果不指定排序规则，编译器不知道该怎么排序，所以必须指定排序规则</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>//自定义数据类型</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-keyword">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_name = name;<br><span class="hljs-keyword">this</span>-&gt;m_age = age;<br>&#125;<br>string m_name;<br><span class="hljs-keyword">int</span> m_age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span>//指定排序规则的仿函数</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Person &amp;p1, Person &amp;p2)</span><span class="hljs-comment">//加const限定不能修改传入的数据</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> p1.m_age &gt; p2.m_age;<span class="hljs-comment">//降序</span><br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span><span class="hljs-comment">//set容器自定义数据排序</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;Person,Compare&gt; s;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">19</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">27</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;王八&quot;</span>, <span class="hljs-number">15</span>)</span></span>;<br><br>s.<span class="hljs-built_in">insert</span>(p1);<br>s.<span class="hljs-built_in">insert</span>(p2);<br>s.<span class="hljs-built_in">insert</span>(p3);<br>s.<span class="hljs-built_in">insert</span>(p4);<br>s.<span class="hljs-built_in">insert</span>(p5);<br><br><span class="hljs-keyword">for</span> (set&lt;Person, Compare&gt;::iterator it = s.<span class="hljs-built_in">begin</span>();it != s.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br>cout &lt;&lt; it-&gt;m_name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; it-&gt;m_age &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//test01();//内置数据类型排序</span><br><br><span class="hljs-built_in">test02</span>();<span class="hljs-comment">//自定义数据类型排序</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--unique friend(map)</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/unique%20friend/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/unique%20friend/</url>
    
    <content type="html"><![CDATA[<h1 id="unique-friend">Unique friend</h1><p>Given information about the friend of each person. Print friends thatare unique to exactly one person ordered by their name. In the givenfriend list, each line starts with a person name, followed by the namesof the friends of the person. There are 10 persons, and each person has10 friends. In this problem, you need to write a classFriendsFinder3.</p><h1 id="exmaple-input">Exmaple input</h1><p>Collins Smith Perez Allen Brown Carter Jackson Rodriguez Young EvansLopez Wilson Martin Williams Hall Lee Thompson Baker Campbell EvansBrown King Jones Jackson Lee Martinez Williams Thomas Moore CarterThompson Hernandez Lopez Turner Roberts Miller Robinson Taylor AndersonRodriguez Hernandez Wright Adams Phillips Lewis Hall Young GarciaJackson Lopez Williams Miller Taylor White Johnson Evans Allen MillerWhite Smith Parker Phillips Brown Carter Collins Mitchell Adams KingSmith Davis Gonzalez Clark Miller Martin Jones Martinez Walker ScottNelson Garcia Collins Anderson Hall Adams Walker Hill Allen Moore BakerHarris Collins Miller Mitchell Hill Lee Rodriguez Nelson Lewis WilsonMiller Anderson Hall Clark Evans Wright Young Lee Walker AllenJohnson</p><h1 id="exmaple-output">Exmaple output</h1><p>Baker Campbell Davis Gonzalez Harris Jones Lewis Parker Perez RobertsRobinson Thomas Wilson</p><h1 id="hint">Hint</h1><p>输出仅为某一个人的朋友的人的名字，注意名字按字典序输出。</p><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;head.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string persons[<span class="hljs-number">10</span>]; <span class="hljs-comment">// persons</span><br>string friends[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]; <span class="hljs-comment">// friends per person</span><br>string name;<br><span class="hljs-comment">// input persons and friends</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++ i)  &#123; <span class="hljs-comment">// for each of the 10 person</span><br>cin &gt;&gt; name;<br>persons[i] = name;<br><span class="hljs-comment">// input 10 friends per person</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; ++ j)  &#123;<br>cin &gt;&gt; name;<br>friends[i][j] = name;<br>&#125;<br>&#125;<br><span class="hljs-function">FriendsFinder3 <span class="hljs-title">ff</span><span class="hljs-params">(persons, friends)</span></span>;<br><span class="hljs-built_in">ff</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="head.h">head.h</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FriendsFinder3</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string per[<span class="hljs-number">10</span>];<br>    string fri[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">FriendsFinder3</span>();<br>    <span class="hljs-built_in">FriendsFinder3</span>( string a[<span class="hljs-number">10</span>],string b[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>])&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            per[i]=a[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>                fri[i][j]=b[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span></span>&#123;<br>map&lt; string, <span class="hljs-keyword">int</span> &gt; p;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>p[ fri[i][j] ] +=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>map&lt;string,<span class="hljs-keyword">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=p.<span class="hljs-built_in">begin</span>();it!=p.<span class="hljs-built_in">end</span>();it++)&#123;<br><br><span class="hljs-keyword">if</span>(it-&gt;second==<span class="hljs-number">1</span>)<br>cout&lt;&lt;it-&gt;first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--[Set &amp; Map] Conference Room Manager</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/%5BSet%20&amp;%20Map%5D%20Conference%20Room%20Manager/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/%5BSet%20&amp;%20Map%5D%20Conference%20Room%20Manager/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>学校里有2个会议室，1个小会议室和1个大会议室。按照规定，小会议室和大会议室每天各自只有1个租借名额。如果要租借小会议室，只需要提供租借的日期信息（int类型）即可；如果要租借大会议室，那么不仅要提供租借的日期信息（int类型），而且还要同时提供租借该会议室的缘由（string类型）。</p><p>会议室的租借过程是<strong>无监督的</strong>和<strong>先到先得的</strong>。<strong>“无监督”</strong>意味着只要某天某个会议室还没有人租借，那么任何人都可以申请此会议室该日期的使用权；<strong>“先到先得”</strong>意味着如果会议室某天的使用权已经被其它人租借了，那么后续对于同一天同一个会议室的租借申请都会失败，除非原来的拥有者主动取消了这一次租借。</p><p>请根据提示完成<strong>RoomManager类</strong>，实现该学校里1大1小2个会议室的租借管理。其中，<strong>RoomManager</strong>类应该包括如下的功能：</p><ul><li>set _room1：用于存储所有小会议室租借的【日期】信息。</li><li>map&lt;int, string&gt;_room2：用于存储所有大会议室租借的【日期，缘由】信息。</li><li>bool InsertAppointment(const int&amp;date)：尝试租借小会议室，如果租借成功返回true，否则返回false。</li><li>bool InsertAppointment(const int&amp; date, const string&amp;event)：尝试租借大会议室，如果租借成功返回true，否则返回false。</li><li>bool CancelAppointment(const int&amp; room_id, const int&amp;date)：取消会议室的某次租借。如果该会议室对应的日期确实已经有租借记录，则将其删除并返回true，否则返回false。</li><li>void PrintAppointments(const int&amp;room_id)：按照日期的升序打印某个会议室目前已有的所有租借记录。</li></ul><h1 id="guiding">Guiding</h1><p><strong>RoomManager类</strong>的声明如下代码段所示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoomManager</span> &#123;</span><br><br><span class="hljs-keyword">private</span>:<br><br><span class="hljs-comment">// Conference Room 1, the smaller one.</span><br><span class="hljs-comment">// Only require the date information for appointment.</span><br>set&lt;<span class="hljs-keyword">int</span>&gt; _room1; <br><br><span class="hljs-comment">// Conference Room 2, the bigger one.</span><br><span class="hljs-comment">// Require both date and event information for appointment. </span><br>map&lt;<span class="hljs-keyword">int</span>, string&gt; _room2; <br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">// Insert an appointment to the smaller Conference Room (1).</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span></span>;<br><br><span class="hljs-comment">// Insert an appointment to the bigger Conference Room (2).</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date, <span class="hljs-keyword">const</span> string&amp; event)</span></span>;<br><br><span class="hljs-comment">// Cancel an appointment on designated date.</span><br><span class="hljs-comment">// If room_id == 1, cancel the corresponding appointment of _room1.</span><br><span class="hljs-comment">// If room_id == 2, cancel the corresponding appointment of _room2.</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CancelAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span></span>;<br><br><span class="hljs-comment">// Print all existing appointments in chronological order.</span><br><span class="hljs-comment">// If room_id == 1, just print the date information. Each piece of information is separated by &#x27; &#x27;.</span><br><span class="hljs-comment">// If room_id == 2, print the information in form of &quot;date(event)&quot;. Each piece of information is separated by &#x27; &#x27;.</span><br><span class="hljs-comment">// If there is no even one existing appointment yet, print &quot;No Appointment&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintAppointments</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id)</span> <span class="hljs-keyword">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>请根据提示手动实现<strong>RoomManager类</strong>里声明的4个方法。</p><h2 id="sample-input-1">Sample Input 1</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span><br><span class="hljs-attribute">InsertRoom1</span> <span class="hljs-number">20220601</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220601</span> Meeting<br><span class="hljs-attribute">InsertRoom1</span> <span class="hljs-number">20220602</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220602</span> Play LOL<br><span class="hljs-attribute">InsertRoom1</span> <span class="hljs-number">20220601</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220601</span> Keep fit with exercise<br><span class="hljs-attribute">CancelRoom2</span> <span class="hljs-number">20220602</span><br><span class="hljs-attribute">CancelRoom2</span> <span class="hljs-number">20220603</span><br><span class="hljs-attribute">PrintRoom1</span><br><span class="hljs-attribute">PrintRoom2</span><br></code></pre></td></tr></table></figure><h2 id="sample-output-1">Sample Output 1</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">false</span><br><span class="hljs-number">20220601</span> <span class="hljs-number">20220602</span><br><span class="hljs-number">20220601</span>(Meeting)<br></code></pre></td></tr></table></figure><h2 id="sample-input-2">Sample Input 2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">15</span><br><span class="hljs-attribute">InsertRoom1</span> <span class="hljs-number">20220610</span><br><span class="hljs-attribute">CancelRoom2</span> <span class="hljs-number">20220610</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220611</span> Academic research<br><span class="hljs-attribute">CancelRoom1</span> <span class="hljs-number">20220611</span><br><span class="hljs-attribute">InsertRoom1</span> <span class="hljs-number">20220611</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220610</span> Quantum reaction experiment<br><span class="hljs-attribute">PrintRoom1</span><br><span class="hljs-attribute">PrintRoom2</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220611</span> Satellite launch test<br><span class="hljs-attribute">CancelRoom2</span> <span class="hljs-number">20220611</span><br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220611</span> Satellite launch test<br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220611</span> Geological survey<br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220612</span> Geological survey<br><span class="hljs-attribute">InsertRoom2</span> <span class="hljs-number">20220609</span> Czar nuclear power test<br><span class="hljs-attribute">PrintRoom2</span><br></code></pre></td></tr></table></figure><h2 id="sample-output-2">Sample Output 2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>20220610 20220611<br>20220610(Quantum reaction experiment) 20220611(Academic research)<br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">false</span><br>Succeed?: <span class="hljs-literal">true</span><br>Succeed?: <span class="hljs-literal">true</span><br>20220609(Czar nuclear power <span class="hljs-built_in">test</span>) 20220610(Quantum reaction experiment) 20220611(Satellite launch <span class="hljs-built_in">test</span>) 20220612(Geological survey)<br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>RoomManager manager;<br><br><span class="hljs-keyword">int</span> num_operations;<br>string operation;<br><br>cin &gt;&gt; num_operations; <span class="hljs-comment">// How many operations in total.</span><br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=num_operations; ++i) &#123;<br>cin &gt;&gt; operation;<br><br><span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;InsertRoom1&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">InsertAppointment</span>(date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;InsertRoom2&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>string event;<br>cin &gt;&gt; date;<br><span class="hljs-built_in">getline</span>(cin, event);<br>event.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">InsertAppointment</span>(date, event) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;CancelRoom1&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">CancelAppointment</span>(<span class="hljs-number">1</span>, date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;CancelRoom2&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">CancelAppointment</span>(<span class="hljs-number">2</span>, date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;PrintRoom1&quot;</span>) &#123;<br>manager.<span class="hljs-built_in">PrintAppointments</span>(<span class="hljs-number">1</span>);<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br>manager.<span class="hljs-built_in">PrintAppointments</span>(<span class="hljs-number">2</span>);<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="manager.hlock">manager.h(lock)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>RoomManager manager;<br><br><span class="hljs-keyword">int</span> num_operations;<br>string operation;<br><br>cin &gt;&gt; num_operations; <span class="hljs-comment">// How many operations in total.</span><br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=num_operations; ++i) &#123;<br>cin &gt;&gt; operation;<br><br><span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;InsertRoom1&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">InsertAppointment</span>(date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;InsertRoom2&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>string event;<br>cin &gt;&gt; date;<br><span class="hljs-built_in">getline</span>(cin, event);<br>event.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">InsertAppointment</span>(date, event) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;CancelRoom1&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">CancelAppointment</span>(<span class="hljs-number">1</span>, date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;CancelRoom2&quot;</span>) &#123;<br><span class="hljs-keyword">int</span> date;<br>cin &gt;&gt; date;<br>cout &lt;&lt; <span class="hljs-string">&quot;Succeed?: &quot;</span> &lt;&lt; boolalpha &lt;&lt; manager.<span class="hljs-built_in">CancelAppointment</span>(<span class="hljs-number">2</span>, date) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operation == <span class="hljs-string">&quot;PrintRoom1&quot;</span>) &#123;<br>manager.<span class="hljs-built_in">PrintAppointments</span>(<span class="hljs-number">1</span>);<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br>manager.<span class="hljs-built_in">PrintAppointments</span>(<span class="hljs-number">2</span>);<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="manager.cpp">manager.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(_room1.<span class="hljs-built_in">find</span>(date) != _room1.<span class="hljs-built_in">end</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        _room1.<span class="hljs-built_in">insert</span>(date);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Insert an appointment to the bigger Conference Room (2).</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date, <span class="hljs-keyword">const</span> string&amp; event)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(_room2.<span class="hljs-built_in">find</span>(date) != _room2.<span class="hljs-built_in">end</span>())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        _room2.<span class="hljs-built_in">insert</span>(pair&lt;<span class="hljs-keyword">int</span>,string&gt;(date, event));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Cancel an appointment on designated date.</span><br><span class="hljs-comment">// If room_id == 1, cancel the corresponding appointment of _room1.</span><br><span class="hljs-comment">// If room_id == 2, cancel the corresponding appointment of _room2.</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::CancelAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(room_id == <span class="hljs-number">1</span>)&#123;<br>        set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it;<br>        it  = _room1.<span class="hljs-built_in">find</span>(date);<br>        <span class="hljs-keyword">if</span>(it == _room1.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            _room1.<span class="hljs-built_in">erase</span>(it);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        map&lt;<span class="hljs-keyword">int</span>, string&gt;::iterator it;<br>        it = _room2.<span class="hljs-built_in">find</span>(date);<br>        <span class="hljs-keyword">if</span>(it == _room2.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            _room2.<span class="hljs-built_in">erase</span>(it);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Print all existing appointments in chronological order.</span><br><span class="hljs-comment">// If room_id == 1, just print the date information. Each piece of information is separated by &#x27; &#x27;.</span><br><span class="hljs-comment">// If room_id == 2, print the information in form of &quot;date(event)&quot;. Each piece of information is separated by &#x27; &#x27;.</span><br><span class="hljs-comment">// If there is no even one existing appointment yet, print &quot;No Appointment&quot;.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RoomManager::PrintAppointments</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id)</span> <span class="hljs-keyword">const</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(room_id == <span class="hljs-number">1</span>)&#123;<br>        set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = _room1.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">while</span>(it != _room1.<span class="hljs-built_in">end</span>())&#123;<br>            cout &lt;&lt;*it&lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            it++;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        map&lt;<span class="hljs-keyword">int</span>, string&gt;::const_iterator it;<br>        it = _room2.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">while</span>(it != _room2.<span class="hljs-built_in">end</span>())&#123;<br>            cout &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt;it-&gt;second&lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span> &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            it++;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考答案">参考答案</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;manager.h&quot;</span></span><br><br><br><span class="hljs-comment">// Implements.</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(_room1.<span class="hljs-built_in">find</span>(date) != _room1.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>_room1.<span class="hljs-built_in">insert</span>(date);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::InsertAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date, <span class="hljs-keyword">const</span> string&amp; event)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(_room2.<span class="hljs-built_in">find</span>(date) != _room2.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>_room2[date] = event;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RoomManager::CancelAppointment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; date)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(room_id == <span class="hljs-number">1</span>) &#123;<br>set&lt;<span class="hljs-keyword">int</span>&gt;::iterator sit = _room1.<span class="hljs-built_in">find</span>(date);<br><span class="hljs-keyword">if</span>(sit == _room1.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>_room1.<span class="hljs-built_in">erase</span>(sit);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>map&lt;<span class="hljs-keyword">int</span>, string&gt;::iterator mit = _room2.<span class="hljs-built_in">find</span>(date);<br><span class="hljs-keyword">if</span>(mit == _room2.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>_room2.<span class="hljs-built_in">erase</span>(mit);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RoomManager::PrintAppointments</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; room_id)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">if</span>(room_id == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(_room1.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No Appointment&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> sit=_room1.<span class="hljs-built_in">begin</span>(); sit!=_room1.<span class="hljs-built_in">end</span>(); ++sit) &#123;<br>cout &lt;&lt; *sit &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(_room2.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No Appointment&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> mit=_room2.<span class="hljs-built_in">begin</span>(); mit!=_room2.<span class="hljs-built_in">end</span>(); ++mit) &#123;<br>cout &lt;&lt; mit-&gt;first &lt;&lt; <span class="hljs-string">&#x27;(&#x27;</span> &lt;&lt; mit-&gt;second &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(二十一)--account and vip</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/account/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/account/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p><code>Account</code> 是一个银行账户的实体模型，它有一个属性<code>balance</code> 表示当前的存款余额，有一个属性 <code>name</code>表示账户名（不同的账户 <code>name</code>是不同的），另有两个行为分别表示查询余额 <code>getBalance</code>和查询用户名 <code>getName</code> 操作。</p><p>由于程序不仅需要管理某一位顾客的账户，而且还可能涉及大量的银行账户需要处理，所以还应建立一个名为“账户管理员”的实体模型，它负责执行每一账户的开设、撤销和访问等操作。每个账户管理员管理若干个账户，账户可能由多个账户管理员同时管理。</p><p>账户管理员 <code>AccountManager</code> 有一属性<code>accountlist</code>记录当前已开设的所有账户，<code>accountNumber</code>为指针，其指向的值记录当前已开设的账户个数，<code>SuperVipAccount</code>为对象指针，其指向的值为超级 Vip 账户，当管理员管理的账户里没有开设超级Vip 账户时，指针指向 NULL。账户可以在不同银行开设，所以需要拷贝构造函数<code>AccountManager(constAccountManager&amp;)</code>，将所有信息移植给另外的管理员，注意深复制与浅复制的问题。管理员还有开设账户<code>open</code>、开设超级 Vip 账户<code>openSuperVipAccount</code>、关闭超级 Vip账户<code>closeSuperVipAccount</code>、获取超级 Vip 账户余额<code>getBalanceOfSuperVip</code>、获取账户总数<code>getAccountNumber</code>、获取管理员总数<code>getManagerNumber</code> 这些行为。</p><p>特别的，<code>getBalanceOfSuperVip</code> 有个 <code>double</code>类型的引用参数，如果已经开设超级 Vip则将其余额赋值给此参数，并且函数返回<code>true</code>；否则参数的值不改变，函数返回 <code>false</code>。</p><p><strong>超级 Vip 是独立存在的，开设和关闭超级 Vip 的时候不需要改变Manager 里的 accountlist 和 accountNumber。</strong></p><p>请实现如下 <code>Account</code> 和 <code>AccountManager</code>类的定义，以完成该账户管理程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">private</span>:<br>    string name;<br>    <span class="hljs-keyword">double</span> balance;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Account</span>();<br>    <span class="hljs-built_in">Account</span>(string,<span class="hljs-keyword">double</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span>; <span class="hljs-comment">//存款</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span>; <span class="hljs-comment">//取款</span><br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//const成员函数，获取账户名 </span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>; <span class="hljs-comment">//const成员函数，获取账户余额 </span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountManager</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">private</span>:<br>    Account accountlist[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">int</span> *accountNumber; <span class="hljs-comment">//记录当前开设的账户总数 </span><br>    Account* SuperVipAccount; <span class="hljs-comment">//记录超级Vip账户 </span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ManagerNumber; <span class="hljs-comment">//static成员，记录所有管理员总数 </span><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">AccountManager</span>();<br>    <span class="hljs-built_in">AccountManager</span>(<span class="hljs-keyword">const</span> AccountManager&amp;); <span class="hljs-comment">//拷贝构造函数 </span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">(string)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(string)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">depositByName</span><span class="hljs-params">(string,<span class="hljs-keyword">double</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">withdrawByName</span><span class="hljs-params">(string,<span class="hljs-keyword">double</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getBalanceByName</span><span class="hljs-params">(string)</span></span>;<br>    <span class="hljs-function">Account <span class="hljs-title">getAccountByName</span><span class="hljs-params">(string)</span></span>;<br></code></pre></td></tr></table></figure><h1 id="main.cpplock">main.cpp(lock)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;AccountManager.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AccountManager* am = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AccountManager</span>();<br>    string name;<br>    <span class="hljs-keyword">double</span> num;<br>    string command;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; command) &#123;<br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;open&quot;</span>) &#123;<br>            cin &gt;&gt; name;<br>            am -&gt; <span class="hljs-built_in">open</span>(name);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Account &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; opened.&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;deposit&quot;</span>) &#123;<br>            cin &gt;&gt; name &gt;&gt; num;<br>            am -&gt; <span class="hljs-built_in">depositByName</span>(name, num);<br>            cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; deposited &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>            num = am -&gt; <span class="hljs-built_in">getBalanceByName</span>(name);<br>            cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;withdraw&quot;</span>) &#123;<br>            cin &gt;&gt; name &gt;&gt; num;<br>            <span class="hljs-keyword">if</span> (am -&gt; <span class="hljs-built_in">withdrawByName</span>(name, num)) &#123;<br>                cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; withdrawed &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>                num = am -&gt; <span class="hljs-built_in">getBalanceByName</span>(name);<br>                cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Withdraw failed, check the balance.&quot;</span> &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;check&quot;</span>) &#123;<br>            cin &gt;&gt; name;<br>            num = am -&gt; <span class="hljs-built_in">getBalanceByName</span>(name);<br>            cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;openvip&quot;</span>) &#123;<br>            cin &gt;&gt; name;<br>            Account ac = am -&gt; <span class="hljs-built_in">getAccountByName</span>(name);<br>            <span class="hljs-keyword">if</span> (ac.<span class="hljs-built_in">getName</span>() == name) &#123;<br>                am -&gt; <span class="hljs-built_in">openSuperVipAccount</span>(ac);<br>                cout &lt;&lt; <span class="hljs-string">&quot;set &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; as super vip&quot;</span> &lt;&lt; endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;no such Account&quot;</span> &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;closevip&quot;</span>) &#123;<br>            am -&gt; <span class="hljs-built_in">closeSuperVipAccount</span>();<br>            cout &lt;&lt; <span class="hljs-string">&quot;super vip closed&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (command == <span class="hljs-string">&quot;quit&quot;</span>) &#123;<br>            <span class="hljs-keyword">delete</span> am;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No such command.&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> am;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="account.hpplock">account.hpp(lock)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ACCOUNT_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ACCOUNT_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> std::string;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Account</span>();<br>    <span class="hljs-built_in">Account</span>(string, <span class="hljs-keyword">double</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br><span class="hljs-keyword">private</span>:<br>    string name;<br>    <span class="hljs-keyword">double</span> balance;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="accountmanager.hpplock">accountmanager.hpp(lock)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ACCOUNT_MANAGER_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ACCOUNT_MANAGER_HPP_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Account.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> std::string;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountManager</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">AccountManager</span>();<br> <span class="hljs-built_in">AccountManager</span>(<span class="hljs-keyword">const</span> AccountManager&amp;); <span class="hljs-comment">//拷贝构造函数 </span><br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">(string)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(string)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">depositByName</span><span class="hljs-params">(string,<span class="hljs-keyword">double</span>)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">withdrawByName</span><span class="hljs-params">(string,<span class="hljs-keyword">double</span>)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getBalanceByName</span><span class="hljs-params">(string)</span></span>;<br> <span class="hljs-function">Account <span class="hljs-title">getAccountByName</span><span class="hljs-params">(string)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openSuperVipAccount</span><span class="hljs-params">(Account&amp;)</span></span>; <span class="hljs-comment">//开设超级Vip账户 </span><br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeSuperVipAccount</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//关闭超级Vip账户 </span><br> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">getBalanceOfSuperVipAccount</span><span class="hljs-params">(<span class="hljs-keyword">double</span>&amp;)</span> <span class="hljs-keyword">const</span></span>; <br> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAccountNumber</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getManagerNumber</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br> ~<span class="hljs-built_in">AccountManager</span>(); <span class="hljs-comment">//析构函数 </span><br><span class="hljs-keyword">private</span>:<br> Account accountlist[<span class="hljs-number">100</span>];<br> <span class="hljs-keyword">int</span> *accountNumber; <span class="hljs-comment">//记录当前开设的账户总数 </span><br> Account* SuperVipAccount; <span class="hljs-comment">//记录超级Vip账户 </span><br> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ManagerNumber; <span class="hljs-comment">//static成员，记录所有管理员总数 </span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="account.cpp">account.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Account.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;AccountManager.hpp&gt;</span></span><br><br><br><br><br>Account:: <span class="hljs-built_in">Account</span>()&#123;<br>    balance=<span class="hljs-number">0</span>;<br>&#125;<br>Account:: <span class="hljs-built_in">Account</span>(string a, <span class="hljs-keyword">double</span> b):<span class="hljs-built_in">name</span>(a),<span class="hljs-built_in">balance</span>(b)&#123;&#125;<br><span class="hljs-keyword">void</span> Account:: <span class="hljs-built_in">deposit</span>(<span class="hljs-keyword">double</span> a)&#123;<br>    balance+=a;<br>&#125;<br><span class="hljs-keyword">bool</span> Account:: <span class="hljs-built_in">withdraw</span>(<span class="hljs-keyword">double</span> a)&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;=balance)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        balance-=a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br>string Account:: <span class="hljs-built_in">getName</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">double</span> Account:: <span class="hljs-built_in">getBalance</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> balance;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="accountmanger.cpp">accountmanger.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Account.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;AccountManager.hpp&gt;</span></span><br><br><span class="hljs-keyword">int</span> AccountManager:: ManagerNumber=<span class="hljs-number">0</span>;<br><br><br>AccountManager:: <span class="hljs-built_in">AccountManager</span>()&#123;<br>    accountNumber=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (<span class="hljs-number">0</span>);<br>    ManagerNumber++;<br>    SuperVipAccount=<span class="hljs-literal">NULL</span>;<br>&#125;<br>AccountManager:: <span class="hljs-built_in">AccountManager</span>(<span class="hljs-keyword">const</span> AccountManager&amp; a)&#123;<br>    accountNumber=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (a.<span class="hljs-built_in">getAccountNumber</span>());<br>    *accountNumber = *a.accountNumber;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        accountlist[i]=a.accountlist[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a.SuperVipAccount != <span class="hljs-literal">NULL</span>)&#123;<br>        SuperVipAccount = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Account</span>(*a.SuperVipAccount);<br>    &#125;<br>    ManagerNumber++;<br>&#125;<br><span class="hljs-keyword">void</span> AccountManager:: <span class="hljs-built_in">open</span>(string a)&#123;<br>    accountlist[<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>()] = <span class="hljs-built_in">Account</span>(a,<span class="hljs-number">0</span>);<br>(*accountNumber)++;<br>&#125;<br><span class="hljs-keyword">void</span> AccountManager:: <span class="hljs-built_in">close</span>(string a)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(accountlist[i].<span class="hljs-built_in">getName</span>()==a)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>()<span class="hljs-number">-1</span>;j++)&#123;<br>                accountlist[j]=accountlist[j+<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    (*accountNumber)--;<br>&#125;<br><span class="hljs-keyword">void</span> AccountManager:: <span class="hljs-built_in">depositByName</span>(string a,<span class="hljs-keyword">double</span> b)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(accountlist[i].<span class="hljs-built_in">getName</span>()==a)&#123;<br>            accountlist[i].<span class="hljs-built_in">deposit</span>(b);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">bool</span> AccountManager:: <span class="hljs-built_in">withdrawByName</span>(string a,<span class="hljs-keyword">double</span> b)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(accountlist[i].<span class="hljs-built_in">getName</span>()==a)&#123;<br>            <span class="hljs-keyword">return</span> accountlist[i].<span class="hljs-built_in">withdraw</span>(b);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">double</span> AccountManager:: <span class="hljs-built_in">getBalanceByName</span>(string a)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(accountlist[i].<span class="hljs-built_in">getName</span>()==a)&#123;<br>            <span class="hljs-keyword">return</span> accountlist[i].<span class="hljs-built_in">getBalance</span>();<br>        &#125;<br>    &#125;<br>&#125;<br>Account AccountManager:: <span class="hljs-built_in">getAccountByName</span>(string a)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">getAccountNumber</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(accountlist[i].<span class="hljs-built_in">getName</span>()==a)&#123;<br>            <span class="hljs-keyword">return</span> accountlist[i];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">void</span> AccountManager:: <span class="hljs-built_in">openSuperVipAccount</span>(Account&amp;  a)&#123;<br>    SuperVipAccount=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Account</span> (a);<br>&#125; <span class="hljs-comment">//开设超级Vip账户 </span><br><span class="hljs-keyword">void</span> AccountManager:: <span class="hljs-built_in">closeSuperVipAccount</span>()&#123;<br>    <span class="hljs-keyword">if</span>(SuperVipAccount != <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">delete</span> SuperVipAccount;<br>&#125;<br>&#125; <span class="hljs-comment">//关闭超级Vip账户 </span><br><br><span class="hljs-keyword">bool</span> AccountManager:: <span class="hljs-built_in">getBalanceOfSuperVipAccount</span>(<span class="hljs-keyword">double</span>&amp; a) <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(SuperVipAccount!=<span class="hljs-literal">NULL</span>)&#123;<br>        a=SuperVipAccount-&gt;<span class="hljs-built_in">getBalance</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-keyword">int</span> AccountManager:: <span class="hljs-built_in">getAccountNumber</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> *accountNumber;<br>&#125;<br><span class="hljs-keyword">int</span> AccountManager:: <span class="hljs-built_in">getManagerNumber</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> ManagerNumber;<br>&#125;<br>AccountManager:: ~<span class="hljs-built_in">AccountManager</span>()&#123;<br>    <span class="hljs-keyword">delete</span> accountNumber;<br>accountNumber = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">if</span>(SuperVipAccount != <span class="hljs-literal">nullptr</span>)&#123;<br>    <span class="hljs-keyword">delete</span> SuperVipAccount;<br>SuperVipAccount = <span class="hljs-literal">nullptr</span>;<br>&#125;<br>&#125; <span class="hljs-comment">//析构函数 </span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(二十)--songlist(拷贝)</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/songlist/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/songlist/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Recently, Xiao Ming is developing a music player, which requiresmodel the <strong>SongList</strong>. He want to implement a simple<strong>SongList</strong> object. But in the versions he implementedbefore, the <code>double free</code> or <code>memory leak</code> mistakealways show up. As you are excellent C++ developer, he try to ask helpfrom you. He has already written down the declaration of the functionsin <code>songList.h</code>. You only need to accomplish the<code>songList.cpp</code>.小明最近在开发一个音乐播放器，需要对<strong>歌单</strong>进行建模。他希望实现一个简单的<strong>歌单</strong>类，但是在之前他自己实现的版本中，总是出现<code>doublefree</code>或者<code>memoryleak</code>的错误，他听闻你C++学得不错，向你求助来了。他在<code>songList.h</code>头文件中已经写好了函数的声明，希望你能在<code>songList.cpp</code>中将定义完善。</p><h1 id="sample-input">Sample Input</h1><p>The first line is an <code>int</code> variable <code>numSongs</code>,which indicates the number of songList1. And the next<code>numSongs</code> line are the songs' name.第一行是一个整型变量<code>numSongs</code>，记录第一个歌单的个数，接下来的<code>numSongs</code>行分别是歌曲名字。</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">2</span><br>We Choose <span class="hljs-selector-tag">To</span> Go <span class="hljs-selector-tag">To</span> The Moon<br><span class="hljs-selector-tag">A</span> Lovely Wedding - Snowand Sky<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><p>The output will show<code>songList1</code>、<code>songList2</code>、<code>songList3</code>,the <code>songList1</code>will be initiated by the songs in the inputand add <code>toAddAndRemoved</code> twice, but the songList should dothe elimination so it should be store once. <code>songList2</code> iscopied from <code>songList1</code> and will remove<code>toAddAndRemoved</code>, <code>songList3</code> is initiated from<code>songList2</code> but clear it songs after that, so it shoule beempty.输出会显示三个歌单，<code>songList1</code>通过输出的歌曲初始化，并添加两次歌曲<code>toAddAndRemoved</code>（LightsFrightened TheCaptain），但因为去重的原因实际只添加一次。<code>songList2</code>通过<code>songList1</code>拷贝得到，并删除<code>toAddAndRemoved</code>。<code>songList3</code>通过<code>songList2</code>初始化，并清空歌单。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">owner:</span>MakaBaka<br><span class="hljs-symbol">Songs:</span><br>We Choose <span class="hljs-keyword">To</span> Go <span class="hljs-keyword">To</span> The Moon<br>A Lovely Wedding - Snowand Sky<br>Lights Frightened The Captain<br><br><span class="hljs-symbol">owner:</span>MakaBaka<br><span class="hljs-symbol">Songs:</span><br>We Choose <span class="hljs-keyword">To</span> Go <span class="hljs-keyword">To</span> The Moon<br>A Lovely Wedding - Snowand Sky<br><br>MakaBaka<span class="hljs-comment">&#x27;s SongList is Empty.</span><br></code></pre></td></tr></table></figure><h2 id="note">Note</h2><p>输出运算符重载：</p><ul><li>如果歌单为空，则输出<code>&lt;owner&gt;'s SongList isEmpty.</code>，其中<code>owner</code>是歌单类的成员变量。</li><li>如果歌单不为空，则输出</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">owner:</span><span class="hljs-params">&lt;owner&gt;</span><br><span class="hljs-symbol">Songs:</span><br><span class="hljs-params">&lt;song1&gt;</span><br><span class="hljs-params">&lt;song2&gt;</span><br>...<br></code></pre></td></tr></table></figure><h2 id="hint">Hint</h2><ol type="1"><li>清空歌曲是否需要真的把歌曲删除？</li><li>拷贝函数需要考虑什么？</li><li>赋值拷贝函数需要考虑哪三件事？</li></ol><h1 id="songlist.cpp">songlist.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;songList.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br>SongList:: <span class="hljs-built_in">SongList</span>(<span class="hljs-keyword">const</span> std::string _owner, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _size, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _capacity, std::string *_songs)<br>&#123;<br>    owner=_owner;<br>    size=_size;<br>    capacity=_capacity;<br>    songs=<span class="hljs-keyword">new</span> string[capacity];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        songs[i]=_songs[i];<br>    &#125;<br>&#125;<br><br>SongList:: <span class="hljs-built_in">SongList</span>(<span class="hljs-keyword">const</span> SongList &amp;a)&#123;<br>    owner=a.owner;<br>    size=a.size;<br>    capacity=a.capacity;<br>    songs=<span class="hljs-keyword">new</span> string[capacity];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        songs[i]=a.songs[i];<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">void</span> SongList:: <span class="hljs-built_in">addSong</span>(<span class="hljs-keyword">const</span> std::string &amp;song)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(song==songs[i]) <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(size==capacity)&#123;<br>        string *newsongs=<span class="hljs-keyword">new</span> string [capacity+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>            newsongs[i]=songs[i];<br>        &#125;<br>        newsongs[i]=song;<br>        <span class="hljs-keyword">delete</span> [] songs;<br>        songs=<span class="hljs-keyword">new</span> string [capacity+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;size+<span class="hljs-number">1</span>;i++)&#123;<br>            songs[i]=newsongs[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span> [] newsongs;<br>        size++;<br>        capacity++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        songs[size]=song;<br>        size++;<br>    &#125;<br>&#125;<br><br>    <span class="hljs-comment">// 删除指定歌曲，歌曲不存在则无动作</span><br><span class="hljs-keyword">void</span> SongList:: <span class="hljs-built_in">removeSong</span>(<span class="hljs-keyword">const</span> std::string &amp;song)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(songs[i]==song)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;size<span class="hljs-number">-1</span>;j++)&#123;<br>                songs[j]=song[j+<span class="hljs-number">1</span>];<br>            &#125;<br>            size--;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br>    <span class="hljs-comment">// 清空歌曲</span><br><span class="hljs-keyword">void</span> SongList:: <span class="hljs-built_in">clearSong</span>()&#123;<br>    size=<span class="hljs-number">0</span>;<br>&#125;<br><br>SongList &amp; SongList::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> SongList &amp;a)&#123;<br>    <span class="hljs-keyword">if</span> (&amp;a != <span class="hljs-keyword">this</span>) &#123;<br>        *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">SongList</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="hljs-keyword">const</span> SongList &amp;a)&#123;<br>    <span class="hljs-keyword">if</span>(a.size==<span class="hljs-number">0</span>)&#123;<br>        os&lt;&lt;a.owner&lt;&lt;<span class="hljs-string">&quot;&#x27;s SongList is Empty.&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> os;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        os&lt;&lt;<span class="hljs-string">&quot;owner:&quot;</span>&lt;&lt;a.owner&lt;&lt;endl;<br>        os&lt;&lt;<span class="hljs-string">&quot;Songs:&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.size;i++)&#123;<br>            os&lt;&lt;a.songs[i]&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">return</span> os;<br>    &#125;<br>&#125;<br><br>SongList:: ~<span class="hljs-built_in">SongList</span>()&#123;<br>    <span class="hljs-keyword">delete</span> [] songs;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="songlist.hlock">songlist.h(lock)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SONGLIST_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SONGLIST_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SongList</span> &#123;</span><br>    std::string owner;          <span class="hljs-comment">// 歌单拥有者</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> size;         <span class="hljs-comment">// 歌单中有效歌曲的数量</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> capacity;          <span class="hljs-comment">// 歌单的最大容量</span><br>    std::string *songs;         <span class="hljs-comment">// 歌曲列表，一个string数组</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 初始化的歌曲列表中会保证没有重复歌曲</span><br>    <span class="hljs-built_in">SongList</span>(<span class="hljs-keyword">const</span> std::string _owner, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _size, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _capacity, std::string *_songs);<br><br>    <span class="hljs-built_in">SongList</span>(<span class="hljs-keyword">const</span> SongList &amp;songList);<br><br>    <span class="hljs-comment">// 添加歌曲，请考虑去重的情况（如果歌曲已经存在则不添加）、歌单已经满了需要扩容的情况，扩容方案自选</span><br>    <span class="hljs-comment">// 扩容方案1：原地扩容，C语言中有个realloc函数可以实现</span><br>    <span class="hljs-comment">// 扩容方案2：重新开辟一个更大容量songs歌曲列表，并将当前的数据迁移过去</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addSong</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp;song)</span></span>;<br><br>    <span class="hljs-comment">// 删除指定歌曲，歌曲不存在则无动作</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeSong</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp;song)</span></span>;<br><br>    <span class="hljs-comment">// 清空歌曲</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clearSong</span><span class="hljs-params">()</span></span>;<br><br>    SongList &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> SongList &amp;songList);<br><br>    <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="hljs-keyword">const</span> SongList &amp;songList);<br><br>    ~<span class="hljs-built_in">SongList</span>();<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">//SONGLIST_H</span></span><br><br></code></pre></td></tr></table></figure><h1 id="framework.cpp">framework.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;songList.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> numSongs;<br>    cin &gt;&gt; numSongs;<br>    <span class="hljs-built_in">getchar</span>();                  <span class="hljs-comment">//读取换行符</span><br>    string name2 = <span class="hljs-string">&quot;MakaBaka&quot;</span>;<br>    string *songs = <span class="hljs-keyword">new</span> string[numSongs];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numSongs; ++i) &#123;<br>        <span class="hljs-built_in">getline</span>(cin, songs[i]);<br>    &#125;<br>    string toAddAndRemoved = <span class="hljs-string">&quot;Lights Frightened The Captain&quot;</span>;<br><br>    <span class="hljs-function">SongList <span class="hljs-title">songList1</span><span class="hljs-params">(name2, numSongs, numSongs, songs)</span></span>;<br>    songList1.<span class="hljs-built_in">addSong</span>(toAddAndRemoved);<br>    songList1.<span class="hljs-built_in">addSong</span>(toAddAndRemoved);<br>    <span class="hljs-keyword">delete</span> []songs;<br>    <span class="hljs-function">SongList <span class="hljs-title">songList2</span><span class="hljs-params">(songList1)</span></span>;<br>    songList2 = songList2;<br>    songList2.<span class="hljs-built_in">removeSong</span>(toAddAndRemoved);<br><br>    SongList songList3 = songList2;<br>    songList3.<span class="hljs-built_in">clearSong</span>();<br><br><br>    cout &lt;&lt; songList1 &lt;&lt; endl;<br>    cout &lt;&lt; songList2 &lt;&lt; endl;<br>    cout &lt;&lt; songList3 &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 示例输入：</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> * We Choose To Go To The Moon</span><br><span class="hljs-comment"> * A Lovely Wedding - Snowand Sky</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例输出：</span><br><span class="hljs-comment"> * owner:MakaBaka</span><br><span class="hljs-comment"> * Songs:</span><br><span class="hljs-comment"> * We Choose To Go To The Moon</span><br><span class="hljs-comment"> * A Lovely Wedding - Snowand Sky</span><br><span class="hljs-comment"> * Lights Frightened The Captain</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * owner:MakaBaka</span><br><span class="hljs-comment"> * Songs:</span><br><span class="hljs-comment"> * We Choose To Go To The Moon</span><br><span class="hljs-comment"> * A Lovely Wedding - Snowand Sky</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * MakaBaka&#x27;s SongList is Empty.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十九)--make list</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/make%20list/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/make%20list/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>Input multiple lines of numbers from the console, please to allocatearrays of double variable to store these lines. Then, use a pointerarray to store the addresses of these double arrays. You need toimplement the two functions: <code>double** make_list(double data[], intsizes[])</code> and <code>void free_lists(double* lists[])</code> .</p><h1 id="input-format">Input format</h1><p>There are N lines input and each line contains no more than M doublenumber( 1&lt;=N&lt;=20, 1&lt;=M&lt;=10).</p><h1 id="output-format">Output format</h1><p>The same numbers as input.</p><h1 id="example-input">Example input</h1><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">288</span> <span class="hljs-number">0</span>.<span class="hljs-number">919</span> <span class="hljs-number">0</span>.<span class="hljs-number">130</span> <span class="hljs-number">0</span>.<span class="hljs-number">610</span> <span class="hljs-number">0</span>.<span class="hljs-number">696</span> <span class="hljs-number">0</span>.<span class="hljs-number">616</span> <span class="hljs-number">0</span>.<span class="hljs-number">779</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">949</span> <span class="hljs-number">0</span>.<span class="hljs-number">982</span> <span class="hljs-number">0</span>.<span class="hljs-number">861</span> <span class="hljs-number">0</span>.<span class="hljs-number">608</span> <span class="hljs-number">0</span>.<span class="hljs-number">156</span> <span class="hljs-number">0</span>.<span class="hljs-number">617</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">294</span> <span class="hljs-number">0</span>.<span class="hljs-number">384</span> <span class="hljs-number">0</span>.<span class="hljs-number">980</span> <span class="hljs-number">0</span>.<span class="hljs-number">203</span> <span class="hljs-number">0</span>.<span class="hljs-number">502</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">286</span> <span class="hljs-number">0</span>.<span class="hljs-number">157</span> <span class="hljs-number">0</span>.<span class="hljs-number">866</span> <span class="hljs-number">0</span>.<span class="hljs-number">329</span> <span class="hljs-number">0</span>.<span class="hljs-number">733</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">269</span> <span class="hljs-number">0</span>.<span class="hljs-number">370</span> <span class="hljs-number">0</span>.<span class="hljs-number">669</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">473</span> <span class="hljs-number">0</span>.<span class="hljs-number">829</span> <span class="hljs-number">0</span>.<span class="hljs-number">509</span> <span class="hljs-number">0</span>.<span class="hljs-number">714</span><br></code></pre></td></tr></table></figure><h1 id="example-output">Example output</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>.<span class="hljs-number">288</span> <span class="hljs-number">0</span>.<span class="hljs-number">919</span> <span class="hljs-number">0</span>.<span class="hljs-number">130</span> <span class="hljs-number">0</span>.<span class="hljs-number">610</span> <span class="hljs-number">0</span>.<span class="hljs-number">696</span> <span class="hljs-number">0</span>.<span class="hljs-number">616</span> <span class="hljs-number">0</span>.<span class="hljs-number">779</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">949</span> <span class="hljs-number">0</span>.<span class="hljs-number">982</span> <span class="hljs-number">0</span>.<span class="hljs-number">861</span> <span class="hljs-number">0</span>.<span class="hljs-number">608</span> <span class="hljs-number">0</span>.<span class="hljs-number">156</span> <span class="hljs-number">0</span>.<span class="hljs-number">617</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">294</span> <span class="hljs-number">0</span>.<span class="hljs-number">384</span> <span class="hljs-number">0</span>.<span class="hljs-number">980</span> <span class="hljs-number">0</span>.<span class="hljs-number">203</span> <span class="hljs-number">0</span>.<span class="hljs-number">502</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">286</span> <span class="hljs-number">0</span>.<span class="hljs-number">157</span> <span class="hljs-number">0</span>.<span class="hljs-number">866</span> <span class="hljs-number">0</span>.<span class="hljs-number">329</span> <span class="hljs-number">0</span>.<span class="hljs-number">733</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">269</span> <span class="hljs-number">0</span>.<span class="hljs-number">370</span> <span class="hljs-number">0</span>.<span class="hljs-number">669</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">473</span> <span class="hljs-number">0</span>.<span class="hljs-number">829</span> <span class="hljs-number">0</span>.<span class="hljs-number">509</span> <span class="hljs-number">0</span>.<span class="hljs-number">714</span><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">double</span>** <span class="hljs-title">make_list</span><span class="hljs-params">(<span class="hljs-keyword">double</span> data[], <span class="hljs-keyword">int</span> sizes[])</span></span>&#123;<br>    <span class="hljs-keyword">double</span>** a=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;sizes[i]!=<span class="hljs-number">0</span>;i++)&#123;&#125;<br>    a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>*[i+<span class="hljs-number">1</span>];<br>    a[i]=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;sizes[j]!=<span class="hljs-number">0</span>;j++)&#123;<br>        a[j]= <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[sizes[j]]; <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;m&lt;i;m++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;n&lt;sizes[m];n++)&#123;<br>            a[m][n]=data[num++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">free_lists</span><span class="hljs-params">(<span class="hljs-keyword">double</span>* lists[])</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;lists[i]!=<span class="hljs-literal">NULL</span>;i++)&#123;<br>        <span class="hljs-keyword">delete</span> [] lists[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span> [] lists;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="main.cpp">main.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_list</span><span class="hljs-params">(<span class="hljs-keyword">double</span> list[], <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++ i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf &quot;</span>, list[i]);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_lists</span><span class="hljs-params">(<span class="hljs-keyword">double</span> * lists[], <span class="hljs-keyword">int</span> sizes[])</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; ; ++ i) &#123;<br><span class="hljs-keyword">if</span> (lists[i] == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">print_list</span>(lists[i], sizes[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// read a number of double data in a signle line, returns the number of data red</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read_data_line</span><span class="hljs-params">(<span class="hljs-keyword">double</span> data[])</span> </span>&#123;<br><span class="hljs-keyword">char</span> line[<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fgets</span>(line, <span class="hljs-number">1000</span>, stdin) == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%lf%lf%lf%lf%lf%lf%lf%lf%lf%lf&quot;</span>, <br>data, data+<span class="hljs-number">1</span>, data+<span class="hljs-number">2</span>, data+<span class="hljs-number">3</span>, data+<span class="hljs-number">4</span>, data+<span class="hljs-number">5</span>, data+<span class="hljs-number">6</span>, data+<span class="hljs-number">7</span>, data+<span class="hljs-number">8</span>, data+<span class="hljs-number">9</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">double</span> data[<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">int</span> num_data_per_line[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++ i) &#123;<br><span class="hljs-keyword">int</span> num_data = <span class="hljs-built_in">read_data_line</span>(data + total);<br><span class="hljs-keyword">if</span> (num_data &lt;= <span class="hljs-number">0</span>) num_data = <span class="hljs-number">0</span>;<br>total += num_data;<br>num_data_per_line[i] = num_data;<br><span class="hljs-keyword">if</span> (num_data == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> allocate a list of pointers to allocated lists of doubles</span><br><span class="hljs-keyword">double</span> ** lists = <span class="hljs-built_in">make_list</span>(data, num_data_per_line); <br><span class="hljs-built_in">print_lists</span>(lists, num_data_per_line);<br><span class="hljs-built_in">free_lists</span>(lists);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十八)--cat and catfamily</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/cat%20and%20catfamily/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/cat%20and%20catfamily/</url>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>以下是一个简单的信息系统的例子。这个例子中缺少Cat类和CatFamily类（假设CatFamily中至多有100只猫）。请阅读C++主程序，并了解类你需要实现一些什么。</p><h2 id="example-input">EXAMPLE INPUT</h2><p>2 CWIGAKZPB 4 4 3 PAUGOCDWM 4 1 XLAQWFT 10 2 ZINYSVEH 4 2 ZTYMHJGO 3YITJLASK 4 2 CIXSDKMZ 4 2 XLAQWFT 2 KLPMURWX 4 2 USFTVBJMK 4 1 HAFGM 2 1NVUIH 4 0</p><h2 id="example-output">EXAMPLE OUTPUT</h2><ol type="1"><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: CWIGAKZPB</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats:</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats:</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game No such cat: PAUGOCDWM</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats:</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Successfully added cat: XLAQWFT</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: ZINYSVEH</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats: XLAQWFT of 10years old</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: ZTYMHJGO</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game No such cat: YITJLASK</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats: XLAQWFT of 10years old</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: CIXSDKMZ</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats: XLAQWFT of 10years old</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Successfully removed cat: XLAQWFT</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: KLPMURWX</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats:</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Fail to remove cat: USFTVBJMK</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game We have these cats:</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Successfully added cat: HAFGM</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game Successfully added cat: NVUIH</li><li>Add a cat</li><li>Remove a cat</li><li>Find a cat</li><li>Print all cats</li><li>Exit this game See you</li></ol><h2 id="hint">Hint</h2><p>为了实现访问<code>cat_family[i]</code>，你需要在类里面实现下面这个成员函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">string <span class="hljs-keyword">operator</span>[] (<span class="hljs-keyword">int</span> num) <span class="hljs-keyword">const</span> &#123;<br><span class="hljs-comment">//return 一点什么东西呢</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="source.cpp">source.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">int</span> cat_age;<br>        string cat_name;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatFamily</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">CatFamily</span>() &#123;<br>            numofcat = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">remove_a_cat</span><span class="hljs-params">(string name)</span></span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">has_cat</span>(name) ==<span class="hljs-number">1</span> )&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">number_of_cats</span>();i++)&#123;<br>                    <span class="hljs-keyword">if</span>( a[i].cat_name==name ) &#123;<br>                        a[i] = a[<span class="hljs-built_in">number_of_cats</span>() - <span class="hljs-number">1</span>];<br>                        numofcat--;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">has_cat</span><span class="hljs-params">(string b)</span><span class="hljs-keyword">const</span></span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">number_of_cats</span>();i++)&#123;<br>                <span class="hljs-keyword">if</span>( a[i].cat_name==b  ) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-function">Cat <span class="hljs-title">get_cat</span><span class="hljs-params">(string name)</span><span class="hljs-keyword">const</span></span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">number_of_cats</span>();i++)&#123;<br>                <span class="hljs-keyword">if</span>( a[i].cat_name==name ) <span class="hljs-keyword">return</span> a[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">99</span>];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add_a_cat</span><span class="hljs-params">(string cat_name,<span class="hljs-keyword">int</span> cat_age)</span></span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">number_of_cats</span>()&lt;=<span class="hljs-number">100</span> &amp;&amp; <span class="hljs-built_in">has_cat</span>(cat_name)==<span class="hljs-number">0</span> )&#123;<br>                a[<span class="hljs-built_in">number_of_cats</span>()].cat_name=cat_name;<br>                a[<span class="hljs-built_in">number_of_cats</span>()].cat_age=cat_age;<br>                numofcat++;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">number_of_cats</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>            <span class="hljs-keyword">return</span> numofcat;<br>        &#125;<br><br><br>    string <span class="hljs-keyword">operator</span>[] (<span class="hljs-keyword">int</span> num) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> a[num].cat_name;<br>&#125;<span class="hljs-comment">//return 一点什么东西呢</span><br>    <span class="hljs-keyword">public</span>:<br>        Cat a[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">int</span> numofcat;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="framework.h">framework.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.cpp&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main_menu</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;1. Add a cat&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2. Remove a cat&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3. Find a cat&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;4. Print all cats&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;0. Exit this game&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">int</span> choice;<br>cin &gt;&gt; choice;<br><span class="hljs-keyword">return</span> choice;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_a_cat</span><span class="hljs-params">(CatFamily &amp; cat_family)</span> </span>&#123;<br>string cat_name;<br><span class="hljs-keyword">int</span> cat_age;<br>cin &gt;&gt; cat_name &gt;&gt; cat_age;<br><span class="hljs-keyword">if</span> (cat_family.<span class="hljs-built_in">add_a_cat</span>(cat_name, cat_age)) <br>cout &lt;&lt; <span class="hljs-string">&quot;Successfully added cat: &quot;</span> &lt;&lt; cat_name &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <br>cout &lt;&lt; <span class="hljs-string">&quot;Fail to add cat: &quot;</span> &lt;&lt; cat_name &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove_a_cat</span><span class="hljs-params">(CatFamily &amp; cat_family)</span> </span>&#123;<br>string cat_name;<br>cin &gt;&gt; cat_name;<br><span class="hljs-keyword">if</span> (cat_family.<span class="hljs-built_in">remove_a_cat</span>(cat_name))<br>cout &lt;&lt; <span class="hljs-string">&quot;Successfully removed cat: &quot;</span> &lt;&lt; cat_name &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Fail to remove cat: &quot;</span> &lt;&lt; cat_name &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_a_cat</span><span class="hljs-params">(CatFamily &amp; cat_family)</span> </span>&#123;<br>string cat_name;<br>cin &gt;&gt; cat_name;<br><span class="hljs-keyword">if</span> (cat_family.<span class="hljs-built_in">has_cat</span>(cat_name)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Here is your cat: &quot;</span> <br>&lt;&lt; cat_family.<span class="hljs-built_in">get_cat</span>(cat_name).cat_name <br>&lt;&lt; <span class="hljs-string">&quot; of &quot;</span> &lt;&lt; cat_family.<span class="hljs-built_in">get_cat</span>(cat_name).cat_age &lt;&lt; <span class="hljs-string">&quot;years old&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;No such cat: &quot;</span> &lt;&lt; cat_name &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_all_cats</span><span class="hljs-params">(CatFamily &amp; cat_family)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;We have these cats:&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cat_family.<span class="hljs-built_in">number_of_cats</span>(); ++ i) &#123;<br>string cat_name = cat_family[i];<br>cout &lt;&lt; <span class="hljs-string">&#x27;\t&#x27;</span> &lt;&lt; cat_family.<span class="hljs-built_in">get_cat</span>(cat_name).cat_name <br>&lt;&lt; <span class="hljs-string">&quot; of &quot;</span> &lt;&lt; cat_family.<span class="hljs-built_in">get_cat</span>(cat_name).cat_age &lt;&lt; <span class="hljs-string">&quot;years old&quot;</span> &lt;&lt; endl;<br>&#125; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>CatFamily cat_family;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">int</span> choice = <span class="hljs-built_in">main_menu</span>();<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (choice) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: cout &lt;&lt; <span class="hljs-string">&quot;See you&quot;</span> &lt;&lt; endl; <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">add_a_cat</span>(cat_family); <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">remove_a_cat</span>(cat_family); <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">find_a_cat</span>(cat_family); <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">print_all_cats</span>(cat_family);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十七)--格式控制(重载)</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6(%E9%87%8D%E8%BD%BD)/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6(%E9%87%8D%E8%BD%BD)/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>My books want to have different kinds of formats of a booklist. Toimprove the reuseability of the code, we should use the object-orientedthought. I design the class <code>Book</code> as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span><br><span class="hljs-class">&#123;</span><br> string name;<br> string code;<br>  <span class="hljs-keyword">double</span> cost;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Book</span>(string s,string c,<span class="hljs-keyword">double</span> co):<span class="hljs-built_in">name</span>(s),<span class="hljs-built_in">code</span>(c),<span class="hljs-built_in">cost</span>(co)&#123;&#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>The default output format of a <code>Book</code> object requires</p><ul><li>Each field being <strong>right-justified</strong></li><li>Each field having the same <strong>field width: 15</strong></li><li>Each number (<code>double</code>) having a <strong>forced 6digits</strong> after the decimal dot.</li></ul><p>The <code>leftform</code> output format of a <code>Book</code> objectrequires</p><ul><li>Each field being <strong>left-justified</strong></li><li>Each field having the same <strong>field width: 15</strong></li><li>Each number (<code>double</code>) having a <strong>forced 2digits</strong> after the decimal dot.</li></ul><p>The <code>rightform</code> output format of a <code>Book</code>object requires</p><ul><li>Each field being <strong>right-justified</strong></li><li>Each field having the same <strong>field width: 15</strong></li><li>Each number (<code>double</code>) having a <strong>forced 2digits</strong> after the decimal dot.</li></ul><p>The main function is :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> N;<br>    string name;<br>    string code;<br>    <span class="hljs-keyword">double</span> cost;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    Book *books[N];<br>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        cin &gt;&gt; name &gt;&gt; code &gt;&gt; cost;<br>        books[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Book</span>(name, code, cost);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;-----:&quot;</span> &lt;&lt; *books[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        cout &lt;&lt; leftform &lt;&lt; *books[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        cout &lt;&lt; rightform &lt;&lt; *books[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="input">Input</h1><p>First line is the integer <code>N</code> followed by <em>N</em>lines. Each line contains the name, code and cost.</p><p><strong>The input has been handled by the testframework.</strong></p><h1 id="output">Output</h1><p>Please refer to the <code>main</code> function and the sampleoutput.</p><p><strong>The output has been handled by the testframework.</strong></p><h1 id="sample-input">Sample Input</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">book1</span> <span class="hljs-number">123456</span> <span class="hljs-number">342</span>.<span class="hljs-number">13</span><br><span class="hljs-attribute">book2</span> <span class="hljs-number">456789</span> <span class="hljs-number">23</span><br><span class="hljs-attribute">book3</span> <span class="hljs-number">789123</span> <span class="hljs-number">1</span>.<span class="hljs-number">2321</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">-----:          <span class="hljs-keyword">book1 </span>        <span class="hljs-number">123456</span>     <span class="hljs-number">342</span>.<span class="hljs-number">130000</span><br>-----:          <span class="hljs-keyword">book2 </span>        <span class="hljs-number">456789</span>      <span class="hljs-number">23</span>.<span class="hljs-number">000000</span><br>-----:          <span class="hljs-keyword">book3 </span>        <span class="hljs-number">789123</span>       <span class="hljs-number">1</span>.<span class="hljs-number">232100</span><br>left :<span class="hljs-keyword">book1 </span>         <span class="hljs-number">123456</span>         <span class="hljs-number">342</span>.<span class="hljs-number">13</span>         <br>left :<span class="hljs-keyword">book2 </span>         <span class="hljs-number">456789</span>         <span class="hljs-number">23</span>.<span class="hljs-number">00</span>          <br>left :<span class="hljs-keyword">book3 </span>         <span class="hljs-number">789123</span>         <span class="hljs-number">1</span>.<span class="hljs-number">23</span>           <br><span class="hljs-symbol">right:</span>          <span class="hljs-keyword">book1 </span>        <span class="hljs-number">123456</span>         <span class="hljs-number">342</span>.<span class="hljs-number">13</span><br><span class="hljs-symbol">right:</span>          <span class="hljs-keyword">book2 </span>        <span class="hljs-number">456789</span>          <span class="hljs-number">23</span>.<span class="hljs-number">00</span><br><span class="hljs-symbol">right:</span>          <span class="hljs-keyword">book3 </span>        <span class="hljs-number">789123</span>           <span class="hljs-number">1</span>.<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>为了实现<code>cout&lt;&lt;*book[i];</code>你需要在类声明处实现这样一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span>&#123;</span><br><span class="hljs-comment">//...其他成员</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">friend</span> ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp; os, <span class="hljs-keyword">const</span> Book &amp; b) &#123;<br><span class="hljs-comment">//像下面这个语句来写</span><br><span class="hljs-comment">//os&lt;&lt; &quot;something&quot;;</span><br>   <span class="hljs-keyword">return</span> os;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，为了实现<code>cout&lt;&lt;leftform;</code>你需要实现一个这样的函数（在最外部，不在类里面）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">ostream &amp; leftform(ostream&amp; strm) &#123;<br><span class="hljs-regexp">//</span>像下面这样写<br><span class="hljs-regexp">//</span>strm &lt;&lt; <span class="hljs-string">&quot;right:&quot;</span>;<br><span class="hljs-regexp">//</span>strm &lt;&lt; setw(<span class="hljs-number">15</span>);<br>return strm;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="framwork.cpp">framwork.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//freopen(&quot;2.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//freopen(&quot;2.out&quot;,&quot;w&quot;,stdout);</span><br><span class="hljs-keyword">int</span> N, M;<br>string name;<br>string code;<br><span class="hljs-keyword">double</span> cost;<br>cin &gt;&gt; N;<br>M = N;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>Book *books[N];<br><span class="hljs-keyword">while</span> (i++ &lt; N) &#123;<br>cin &gt;&gt; name &gt;&gt; code &gt;&gt; cost;<br>books[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Book</span>(name, code, cost);<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i++ &lt; M) &#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----:&quot;</span> &lt;&lt; *books[i];<br><br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i++ &lt; M) &#123;<br><br>cout &lt;&lt; leftform &lt;&lt; *books[i];<br><br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i++ &lt; M) &#123;<br><br>cout &lt;&lt; rightform &lt;&lt; *books[i];<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="source.h">source.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span><br><span class="hljs-class">&#123;</span><br>    string name;<br>    string code;<br>    <span class="hljs-keyword">double</span> cost;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Book</span>(string s,string c,<span class="hljs-keyword">double</span> co):<span class="hljs-built_in">name</span>(s),<span class="hljs-built_in">code</span>(c),<span class="hljs-built_in">cost</span>(co)&#123;&#125;<br>    <span class="hljs-keyword">friend</span> ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp; os, <span class="hljs-keyword">const</span> Book &amp; b) &#123;<br>    <br><br>    <span class="hljs-comment">//os&lt;&lt; &quot;something&quot;;</span><br>    <span class="hljs-keyword">return</span> os&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;b.name&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;b.code&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-built_in">setiosflags</span>(ios::fixed)&lt;&lt;b.cost&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">ostream &amp; <span class="hljs-title">leftform</span><span class="hljs-params">(ostream&amp; strm)</span> </span>&#123;<br><span class="hljs-comment">//像下面这样写</span><br><span class="hljs-comment">//strm &lt;&lt; &quot;right:&quot;;</span><br><span class="hljs-comment">//strm &lt;&lt; setw(15);</span><br>strm &lt;&lt; <span class="hljs-string">&quot;left :&quot;</span>;<br>strm &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;left;<br>strm &lt;&lt; fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> strm;<br>&#125;<br><br><span class="hljs-function">ostream &amp; <span class="hljs-title">rightform</span><span class="hljs-params">(ostream&amp; strm)</span> </span>&#123;<br><span class="hljs-comment">//像下面这样写</span><br><span class="hljs-comment">//strm &lt;&lt; &quot;right:&quot;;</span><br><span class="hljs-comment">//strm &lt;&lt; setw(15);</span><br>strm &lt;&lt; <span class="hljs-string">&quot;right:&quot;</span>;<br>strm &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;right;<br>strm &lt;&lt; fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> strm;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十六)--格式控制</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B62/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B62/</url>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>Write a program to read a list containing item <code>name</code>(<code>std::string</code>), item <code>code</code>(<code>std::string</code>), and item <code>cost</code>(<code>double</code>) interactively and produce a three-column outputsatisfying:</p><ul><li><code>name</code> and <code>code</code> are<strong>left-justified</strong>;</li><li><code>cost</code> is <strong>right-justified</strong> with a<strong>precision of two digits</strong>. <strong>Trailing zeros areshown</strong>;</li><li>The field width for <code>name</code>, <code>code</code> and<code>cost</code> are 15, 15, 10, respectively.</li></ul><h1 id="input">Input</h1><p>First line is an integer <code>N</code> to specify the number ofbooks, followed with <em>N</em> lines. Each line contains the<code>name</code>, <code>code</code> and <code>cost</code>.</p><h1 id="output">Output</h1><p>For each item, output it in the aforementioned format.</p><h1 id="sample-input">Sample Input</h1><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">book1</span> <span class="hljs-number">2312123</span> <span class="hljs-number">342</span>.<span class="hljs-number">13</span><br><span class="hljs-attribute">book2</span> <span class="hljs-number">342</span> <span class="hljs-number">123</span><br><span class="hljs-attribute">book3</span> <span class="hljs-number">342</span> <span class="hljs-number">1</span>.<span class="hljs-number">2321</span><br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">book1</span>          <span class="hljs-number">2312123</span>            <span class="hljs-number">342</span>.<span class="hljs-number">13</span><br><span class="hljs-attribute">book2</span>          <span class="hljs-number">342</span>                <span class="hljs-number">123</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">book3</span>          <span class="hljs-number">342</span>                  <span class="hljs-number">1</span>.<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h1 id="source.cpp">source.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    string name,code;<br>    <span class="hljs-keyword">double</span> cost;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;name&gt;&gt;code&gt;&gt;cost;<br>        cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;left&lt;&lt;name;<br>        cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">15</span>)&lt;&lt;left&lt;&lt;code;<br>        cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>)&lt;&lt;right&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">2</span>)&lt;&lt;cost&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十五)--格式控制</title>
    <link href="/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/04/12/%E7%A8%8B%E8%AE%BE/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>It is important to control the format of outputs. Now, an output isgiven.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs asciidoc">control the format of numeric value, 123456789.9876543<br>Default:1.23457e+08<br>Using fixed:123456789.987654<br>With precision 7:123456789.9876543<br><span class="hljs-section">Scientific with precision 3:1.235e+08</span><br><span class="hljs-section">---------------------------</span><br>control the base of numeric value, 16<br>Hex:10<br>Oct:20<br><span class="hljs-section">Dec:16</span><br><span class="hljs-section">---------------------------</span><br>control the width and alignment, and the width is 6 spaces<br>right aligned<br><span class="hljs-code">     1     2     4     8</span><br><span class="hljs-code">    16    32    64   128</span><br><span class="hljs-code">   256   512  1024  2048</span><br><span class="hljs-code">  4096  8192 16384 32768</span><br>left aligned<br>1     2     4     8<br>16    32    64    128<br>256   512   1024  2048<br><span class="hljs-section">4096  8192  16384 32768</span><br><span class="hljs-section">---------------------------</span><br>control the fillment of 123456<br>Original:  123456<br><span class="hljs-code">  Filled:**123456</span><br></code></pre></td></tr></table></figure><p>Your task is to write a program to print the output above.</p><h1 id="main.cpp">main.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">double</span> x=<span class="hljs-number">123456789.9876543</span>;<br>  cout&lt;&lt;<span class="hljs-string">&quot;control the format of numeric value, 123456789.9876543\n&quot;</span>;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Default:&quot;</span>&lt;&lt; scientific &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>) &lt;&lt; x &lt;&lt; endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Using fixed:&quot;</span> &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">6</span>) &lt;&lt; x &lt;&lt; endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;With precision &quot;</span>&lt;&lt;<span class="hljs-number">7</span>&lt;&lt;<span class="hljs-string">&quot;:&quot;</span> &lt;&lt;fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">7</span>) &lt;&lt; x&lt;&lt; endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Scientific with precision &quot;</span>&lt;&lt;<span class="hljs-number">3</span>&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;scientific &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">3</span>) &lt;&lt; x &lt;&lt; endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;---------------------------&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;control the base of numeric value, 16&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Hex:&quot;</span>&lt;&lt;hex&lt;&lt;<span class="hljs-number">16</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Oct:&quot;</span>&lt;&lt;oct&lt;&lt;<span class="hljs-number">16</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Dec:&quot;</span>&lt;&lt;dec&lt;&lt;<span class="hljs-number">16</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;---------------------------&quot;</span>&lt;&lt;endl;  <br>  cout&lt;&lt;<span class="hljs-string">&quot;control the width and alignment, and the width is 6 spaces&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;right aligned&quot;</span>&lt;&lt;endl;<br>  cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">2</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">4</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">8</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">16</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">32</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">64</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">128</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">256</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">512</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">1024</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">2048</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">4096</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">8192</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">16384</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">32768</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;left aligned&quot;</span>&lt;&lt;endl;<br>  cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">2</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">4</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">8</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">16</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">32</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">64</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">128</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">256</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">512</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">1024</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">2048</span>&lt;&lt;endl;<br>  cout&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">4096</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">8192</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">16384</span>&lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">32768</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;---------------------------&quot;</span>&lt;&lt;endl;    <br>  cout&lt;&lt;<span class="hljs-string">&quot;control the fillment of 123456&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;Original:  123456&quot;</span>&lt;&lt;endl;<br>  cout&lt;&lt;<span class="hljs-string">&quot;  Filled:&quot;</span>&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">8</span>)&lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;*&#x27;</span>)&lt;&lt;right&lt;&lt;<span class="hljs-number">123456</span>&lt;&lt;endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第八章- COUNTER(计数器)</title>
    <link href="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
    <url>/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="异步计数器计算asynchronous">异步计数器计算(Asynchronous)</h1><h2 id="位异步计数器">2位异步计数器</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220509162802191.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510122752244.png"></p><h2 id="位异步计数器-1">3位异步计数器</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510122915050.png"></p><h2 id="传输延迟">传输延迟</h2><p>异步计数器被称为行波计数器,存在传输延迟</p><p>****异步触发可能导致多级延迟（最长延迟必须小于<strong>时钟周期）、错误的暂态</strong></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123142423.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123200909.png"></p><h2 id="异步译码计数器">异步译码计数器</h2><p>计数器可以有<span class="math inline">\(2^{n}\)</span>个状态,n是触发器个数</p><figure><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123426852.png" alt="模10截断"><figcaption aria-hidden="true">模10截断</figcaption></figure><p><strong>异步清0导致毛刺</strong></p><h2 id="ls93">74LS93</h2><p><strong>（CTR DIV n代表n个状态的计数器）</strong></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123534526.png"></p><p>74LS93可以做模10或者模16的计数器</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123622956.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510123835249.png"></p><h1 id="同步计数器计算synchronous">同步计数器计算(Synchronous)</h1><h2 id="位同步二进制计数器">2位同步二进制计数器</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510125346424.png"></p><figure><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510125403829.png" alt="传输延迟"><figcaption aria-hidden="true">传输延迟</figcaption></figure><figure><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510125549346.png" alt="时序图"><figcaption aria-hidden="true">时序图</figcaption></figure><h2 id="位同步二进制计数器-1">3位同步二进制计数器</h2><p>信号重用</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510124713319.png"></p><h2 id="位同步二进制计数器-2">4位同步二进制计数器</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510125658130.png"></p><h3 id="如何做一个模10的">如何做一个模10的</h3><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510125947138.png"></p><p>需要求得每个JK触发器的逻辑输入公式</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510131622738.png"></p><h2 id="hc163-4位同步二进制计数器">74HC163 4位同步二进制计数器</h2><ol type="1"><li>同步置数，同步清零</li><li>计数使能条件：ENT和ENP同为1</li><li>末端计数TC=15时进位输出RCO=1</li></ol><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510131921336.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510132044512.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510132240188.png"></p><h1 id="加减同步计数器双向计数器">加减同步计数器(双向计数器)</h1><p>对于<span class="math inline">\(J_1\)</span>和<span class="math inline">\(K_1\)</span></p><p>对于加（UP）时序，<span class="math inline">\(Q_1\)</span>在<span class="math inline">\(Q_0=1\)</span>的下一个时钟脉冲到来时改变状态。对于减（DOWN）时序，<span class="math inline">\(Q_1\)</span>在<span class="math inline">\(Q_0=0\)</span>的下一个时钟脉冲到来时改变状态。</p><p>对于<span class="math inline">\(J_2\)</span>和<span class="math inline">\(K_2\)</span></p><p>对于加时序来说，<span class="math inline">\(Q2\)</span>在<span class="math inline">\(Q_0＝Q_1＝1\)</span>的下一个时钟脉冲到来时改变状态。对于减时序来说，<span class="math inline">\(Q_2\)</span>在<span class="math inline">\(Q_0＝Q_1＝0\)</span>的下一个时钟脉冲到来时改变状态。因此，在下面的等式所表达的条件下，FF2的<span class="math inline">\(J_2\)</span>和<span class="math inline">\(K_2\)</span>输入必须等于1：</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510132319107.png"></p><h2 id="hc190-加减十进制计数器">74HC190 加减十进制计数器</h2><p><span class="math inline">\(D/\bar{U}\)</span>表示DOWN/UP,加减控制输入</p><p><span class="math inline">\(\overline{CTEN}\)</span>表示计数使能端(countenable)</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510133701242.png"></p><h1 id="同步计数器的设计重点">同步计数器的设计(重点)</h1><p>时序逻辑电路的一般模型：状态机 •输入：<span class="math inline">\((I_0,I_1,…,I_m)；\)</span>输出：<span class="math inline">\((O_0,O_1,…,O_m)；\)</span></p><p>激励：<span class="math inline">\((Y_0,Y_1,…,Y_p)；\)</span>状态：<span class="math inline">\((Q_0,Q_1,…,Q_x)\)</span>•Moore型：输出仅与当前状态相关，<span class="math inline">\(O=F(Q)\)</span>•Mealy型：输出与当前状态和输入相关，<span class="math inline">\(O=F(I,Q)\)</span>•同步：所有触发器用同一个时钟信号,状态变化同时发生•异步：触发器没有统一的时钟信号,状态变化时间有先后</p><p>时序逻辑电路设计步骤</p><ol type="1"><li>准备：画状态图，作次态表、触发器的转换表。</li><li>化简：作卡诺图，求触发器的输入逻辑表达式。</li><li>设计：作电路逻辑图。</li></ol><h2 id="以设计格雷码为例">以设计格雷码为例</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140058339.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140251843.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140307580.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140320971.png"></p><h2 id="section"></h2><h2 id="用j-k触发器设计同步3位双向格雷码计数器">用J-K触发器设计同步3位双向格雷码计数器</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140525741.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140546038.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140603795.png"></p><h1 id="级联计数器cascaded-counters">级联计数器Cascaded counters</h1><p>目的：级联多个计数器来扩大计数器的模</p><h2 id="异步级联">异步级联</h2><p>总的模为32;表现为32分频计数器</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140845290.png"></p><h2 id="同步级联">同步级联</h2><p>级联信号：计数使能CTEN，末端计数TC</p><p><strong>低位片的TC作为高位片的计数使能信号</strong></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510140901731.png"></p><p><strong>多个级联的同步计数器构成递减计数链</strong><strong>•计数器的模等于各级计数器的模的乘积</strong><strong>•从低位到高位的TC信号频率等于时钟频率依次除以各级计数器的模</strong></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510141621917.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510141718965.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510141831860.png"></p><h2 id="用4片74hc161设计模为40000的计数器-截断时序的级联计数器">用4片74HC161设计模为40000的计数器(截断时序的级联计数器)</h2><ol type="1"><li>思路：先把4片74HC161级联为一个模65536的计数器，再改造为模40000的计数器</li><li>65536-40000=25536（十六进制为<span class="math inline">\(63C0_{16}\)</span>），计数序列：25536~65535</li><li>计数到达65535，最高位片RCO=1，计数器状态设为25536</li></ol><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510142359694.png"></p><h1 id="计数器状态译码">计数器状态译码</h1><p>目的：检测计数器的特定状态来输出有效信号，例子：TC</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143306798.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143346575.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143417074.png"></p><h1 id="计数器应用">计数器应用</h1><h2 id="显示时分秒的数字钟系统">显示“时：分：秒”的数字钟系统</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143632250.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143715919.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143732046.png"></p><h2 id="停车场出入控制系统">停车场出入控制系统</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143830011.png"></p><h2 id="并行串行数据转换系统">并行—串行数据转换系统</h2><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143911842.png"></p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510143939914.png"></p><p>交通信号灯控制系统</p><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510144541842.png"></p><h1 id="小结">小结</h1><ol type="1"><li><p>异步计数器中的异步指的是什么?</p></li><li><p>一个模14计数器有多少状态？需要至少多少个触发器来实现它？</p></li><li><p>一个同步计数器和一个异步计时器的区别是什么？</p></li><li><p>解释计数器的预置位功能，例如74HC163。</p><figure><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220510130827612.png" alt="74HC163"><figcaption aria-hidden="true">74HC163</figcaption></figure></li><li><p>解释74HC163计数器的输入ENP、ENT和输出RCO的用途。</p></li><li><p>一个4位加／减计数器处于减模式，并且为1010状态。下一个时钟脉冲到来时，计数器的状态是什么？</p></li><li><p>处在加模式的4位加／减计时器的最后一个状态是什么？当处于减模式时，下一个状态是什么？</p></li><li><p>完成一个1000分频的计数器需要多少个十进制计数器?10000分频的呢?</p></li><li><p>给出如何获取如下分频的一般框图.使用触发器、十进制计数器、4位二进制计数器或他们的组合：</p><p>（a） 20分频（b） 32分频（c） 160分频（d） 320分频</p></li><li><p>4位二进制异步计数器状态变化如下,可能发生的瞬间状态是什么?</p><p>(a)2-3 (b)3-4 (c)10-11 (d)15-0</p></li><li><p>关联标记,字母C、M、G表示什么</p></li><li><p>哪个字母表示数据存储?</p></li></ol><p><img src="/2022/04/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AB%E7%AB%A0/image-20220531220223922.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--多态(虚函数)</title>
    <link href="/2022/04/06/%E7%A8%8B%E8%AE%BE/figure(%E8%99%9A%E5%87%BD%E6%95%B0)/"/>
    <url>/2022/04/06/%E7%A8%8B%E8%AE%BE/figure(%E8%99%9A%E5%87%BD%E6%95%B0)/</url>
    
    <content type="html"><![CDATA[<p>There are 4 classes, <code>Figure</code> is the base class, both<code>Triangle</code>, <code>Rectangle</code> and <code>Circle</code>are all inherited from it.</p><p><code>Figure</code> class is like following:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIGURE</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">// get_area()被声明为纯虚函数</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">double</span> x_size, y_size;<br>&#125;;<br></code></pre></td></tr></table></figure><p>You should implement <code>Figure</code>, <code>Triangle</code>,<code>Rectange</code>, <code>Circle</code> class.</p><h1 id="sample-output">Sample Output</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Area of <span class="hljs-built_in">triangle</span> <span class="hljs-built_in">is</span> <span class="hljs-number">60</span><br>Area of <span class="hljs-built_in">rectangle</span> <span class="hljs-built_in">is</span> <span class="hljs-number">120</span><br>Area of circle <span class="hljs-built_in">is</span> <span class="hljs-number">706.858</span><br></code></pre></td></tr></table></figure><h1 id="figure.h">figure.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FIGURE</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">// get_area()被声明为纯虚函数</span><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">double</span> x_size, y_size;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="main.cpp">main.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Triangle.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Rectangel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Circle.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>       TRIANGLE triangle; <br>       RECTANGLE rectangle;<br>       CIRCLE circle;<br><br>        <span class="hljs-comment">// 处理三角形</span><br>        triangle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">// 设置三角形的底和高</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of triangle is &quot;</span> &lt;&lt; triangle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        <span class="hljs-comment">// 处理矩形</span><br>        rectangle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>, <span class="hljs-number">8</span>);<span class="hljs-comment">// 设置矩形的长和宽</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of rectangle is &quot;</span> &lt;&lt; rectangle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        <span class="hljs-comment">// 处理圆</span><br>        circle.<span class="hljs-built_in">set_size</span>(<span class="hljs-number">15</span>);<span class="hljs-comment">// 设置圆的半径</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Area of circle is &quot;</span> &lt;&lt; circle.<span class="hljs-built_in">get_area</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面是需要完成的内容</p><h1 id="figure.cpp">figure.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">FIGURE::get_area</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FIGURE::set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y)</span></span>&#123;<br>    x_size = x;<br>    y_size = y;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="triangle.h">triangle.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TRIANGLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * y_size / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="rectangle.h">rectangle.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RECTANGLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * y_size ;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="circle.h">circle.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;Figure.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CIRCLE</span>:</span><span class="hljs-keyword">public</span> FIGURE&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_size</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y = <span class="hljs-number">0</span>)</span></span>&#123;<br>        x_size = x;<br>        y_size = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_area</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x_size * x_size * PI;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录--实现栈类</title>
    <link href="/2022/04/06/%E7%A8%8B%E8%AE%BE/%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%B1%BB/"/>
    <url>/2022/04/06/%E7%A8%8B%E8%AE%BE/%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="栈类">栈类</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> STACK_HPP</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACK_HPP</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    node* next;<br>    <span class="hljs-built_in">node</span>() &#123; num = <span class="hljs-number">0</span>; next = <span class="hljs-literal">NULL</span>; &#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> n, node* p = <span class="hljs-literal">NULL</span>) &#123; num = n; next = p; &#125;<br>  &#125;;<br><br>  node* data;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Stack</span>();                        <span class="hljs-comment">// 构造一个空栈</span><br>  <span class="hljs-built_in">Stack</span>(<span class="hljs-keyword">const</span> Stack&amp;);            <span class="hljs-comment">// 拷贝构造函数</span><br>  ~<span class="hljs-built_in">Stack</span>();                       <span class="hljs-comment">// 注意内存回收</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;                 <span class="hljs-comment">// 入栈</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;                     <span class="hljs-comment">// 出栈</span><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;                <span class="hljs-comment">// 查看栈顶元素，若栈为空，返回0</span><br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;             <span class="hljs-comment">// 判断栈是否为空</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;                   <span class="hljs-comment">// 清空栈</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h1 id="补充">补充</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Stack.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>Stack::<span class="hljs-built_in">Stack</span>()&#123;<br>    data=<span class="hljs-keyword">new</span> node;<br>&#125;<br>Stack::<span class="hljs-built_in">Stack</span>(<span class="hljs-keyword">const</span> Stack&amp; a) &#123;<br><br>    Stack b;<br>    <span class="hljs-keyword">for</span>(node *i=a.data;i-&gt;next!=<span class="hljs-literal">NULL</span>;i=i-&gt;next)<br>        b.<span class="hljs-built_in">push</span>(i-&gt;num);<br>    data=<span class="hljs-keyword">new</span> node;<br>    <span class="hljs-keyword">for</span>(;!b.<span class="hljs-built_in">empty</span>();b.<span class="hljs-built_in">pop</span>())<br>        <span class="hljs-built_in">push</span>(b.<span class="hljs-built_in">top</span>());<br>&#125;<br>Stack::~<span class="hljs-built_in">Stack</span>()&#123;<br>    <span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">delete</span> data;<br>&#125;<br><br><span class="hljs-keyword">void</span> Stack:: <span class="hljs-built_in">push</span>(<span class="hljs-keyword">int</span> n)&#123;<br>    data=<span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>(n,data);<br>&#125;<span class="hljs-comment">// 入栈</span><br><span class="hljs-keyword">void</span> Stack:: <span class="hljs-built_in">pop</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br>    node* temp=data;<br>    data=data-&gt;next;<br>    <span class="hljs-keyword">delete</span> temp;   <br>&#125;<span class="hljs-comment">// 出栈</span><br><span class="hljs-keyword">int</span> Stack:: <span class="hljs-built_in">top</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data-&gt;num;<br>&#125;<span class="hljs-comment">// 查看栈顶元素，若栈为空，返回0</span><br><span class="hljs-keyword">bool</span> Stack:: <span class="hljs-built_in">empty</span>() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data-&gt;next==<span class="hljs-literal">NULL</span>;<br>&#125;<span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-keyword">void</span> Stack:: <span class="hljs-built_in">clear</span>()&#123;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-built_in">pop</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>拷贝构造函数也可以这样子写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack:: <span class="hljs-built_in">stack</span>(<span class="hljs-keyword">const</span> stack &amp; a)&#123;<br>    node* p=a.data;<br>    data=<span class="hljs-keyword">new</span> node;<br>    data-&gt;num=p-&gt;num;<br>    data-&gt;next=<span class="hljs-literal">NULL</span>;<br>    p=p-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>    node *s=data;<br>    <span class="hljs-keyword">while</span>(s-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    s=s-&gt;next;<br>node *k=<span class="hljs-keyword">new</span> node;<br>    s-&gt;next=k;<br>    k-&gt;num=p-&gt;num;<br>    k-&gt;next=<span class="hljs-literal">NULL</span>;<br>    p=p-&gt;next;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章- LATCHES,FLIP-FLOPS,TIMERS(锁存器\触发器\定时器)</title>
    <link href="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/"/>
    <url>/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="flip-flop-operating-character边沿触发器的运算特性">Flip-FlopOperating Character(边沿触发器的运算特性)</h1><h2 id="propagation-delay-time传输延迟时间">propagation delaytime传输延迟时间</h2><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406160534147.png"></p><h2 id="set-up-time-and-hold-time">set-up time and hold time</h2><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406160740072.png"></p><h2 id="剩余概念">剩余概念</h2><p>最大时钟频率：触发器可靠工作的最高时钟频率（最小）脉冲宽度：时钟（高、低时长），置一，清零</p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406161019078.png"></p><h1 id="flip-flop-application触发器应用">Flip-Flopapplication触发器应用</h1><h2 id="并行数据储存寄存器同步时序">并行数据储存:寄存器(<strong>同步时序</strong>)</h2><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406161239933.png"></p><h2 id="分频器异步时序">分频器(<strong>异步时序</strong>)</h2><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406161347775.png"></p><p>可以实现不断二分频</p><h2 id="计数器">计数器</h2><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406161431454.png"></p><h1 id="one-shot-单稳态触发器">One-shot 单稳态触发器</h1><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406162017971.png"></p><figure><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406162048856.png" alt="可重复触发和不可重复触发波形"><figcaption aria-hidden="true">可重复触发和不可重复触发波形</figcaption></figure><h1 id="不可重复触发单稳态触发器">74121:不可重复触发单稳态触发器</h1><p><span class="math inline">\(R_{INT}\)</span>连接在一个2KΩ的电阻上</p><p>输出脉冲宽度由电阻值(<span class="math inline">\(R_{INT}=2kΩ和R_{EXT}\)</span>) <span class="math display">\[t_{w}=0.7RC_{EXT}\]</span> 注意单位:<span class="math inline">\(R(kΩ)\)</span> <span class="math inline">\(C_{EXT}(pF)\)</span> <span class="math inline">\(t_{w}(ns)\)</span></p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406162151240.png"></p><h1 id="ls122可重复触发单稳态触发器">74LS122可重复触发单稳态触发器</h1><p><span class="math display">\[t_{w}=0.32RC_{EXT}(1+\frac{0.7}{R})\]</span></p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406163557387.png"></p><p>单稳态触发器能作为定时器使用</p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406163842396.png"></p><h1 id="定时器">555定时器</h1><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406163859945.png" alt="内部结构"> <span class="math display">\[脉冲宽度t_{w}=1.1R_1C_1\]</span> <img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406163948186.png"></p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406164212090.png"></p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406164232644.png"></p><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406164250414.png"></p><h1 id="非稳态多谐振荡器">非稳态多谐振荡器</h1><figure><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406164350608.png" alt="UTP和LTP不相同"><figcaption aria-hidden="true">UTP和LTP不相同</figcaption></figure><h1 id="定时器构成多谐振荡器">555定时器构成多谐振荡器</h1><p><img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406164444596.png" alt="搞懂1234的过程"> <span class="math display">\[振荡频率f=\frac{1.44}{(R_1+2R_2)C_1}\]</span> 输出为高电平的时间<span class="math inline">\(t_H\)</span>是C1从三分之一充电到三分之二所花的时间</p><p>输出为低电平的时间<span class="math inline">\(t_L\)</span>是C1从三分之二放电到三分之一所花的时间<span class="math display">\[t_{H}=0.7(R_1+R_2)C_1\]</span></p><p><span class="math display">\[t_L=0.7R_2C_1\]</span></p><p>占空比 <span class="math display">\[占空比=(\frac{R_1+R_2}{R_1+2R_2})\]</span> 为了让占空比小于50%,增加一个二极管后 <span class="math display">\[占空比=(\frac{R_1}{R_1+R_2})\]</span> <img src="/2022/04/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0(%E4%BA%8C)/image-20220406165405673.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章- LATCHES,FLIP-FLOPS,TIMERS(锁存器\触发器\定时器)</title>
    <link href="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <url>/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="latches">Latches</h1><p>掌握知识点</p><p>S-R锁存器的操作</p><p>门控S-R锁存器</p><p>D锁存器的操作</p><p>用逻辑门补充S-R和R锁存器</p><p>74LS297A和74LS75</p><h2 id="s-r锁存器s-r-latches">S-R锁存器(S-R Latches)</h2><p>S--set R-reset</p><p>锁存器的输出总是反相的</p><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329131226685.png" alt="基本结构"><figcaption aria-hidden="true">基本结构</figcaption></figure><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329131711163.png" alt="真值表"><figcaption aria-hidden="true">真值表</figcaption></figure><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329132056578.png" alt="波形图"><figcaption aria-hidden="true">波形图</figcaption></figure><h3 id="application触点抖动消除器">application(触点抖动消除器)</h3><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329132315382.png"></p><h3 id="ls279-a">74LS279 A</h3><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329132538025.png"></p><h2 id="the-gated-s-r-latch">The Gated S-R Latch</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329132843494.png"></p><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329132939867.png" alt="波形图"><figcaption aria-hidden="true">波形图</figcaption></figure><h2 id="the-gated-ddata-latches">The Gated D(Data) Latches</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133115430.png"></p><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133142038.png"></p><h3 id="ls75-d-latch">74LS75 D LATCH</h3><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133231484.png"></p><h1 id="edge-triggered-flio-flops">Edge-Triggered Flio-Flops</h1><p>掌握知识点</p><p>解释时针,边沿触发器;</p><p>锁存器和触发器的区别</p><p>通过逻辑符号定义边沿触发的触发器</p><p>正边沿触发和负边沿触发的触发器的区别</p><p>比较S-R,D,J-K边沿触发器操作以及真值表的区别</p><p>74AHC74和74HC112</p><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133512143.png"></p><h2 id="s-r">S-R</h2><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133754551.png" alt="三种情况"><figcaption aria-hidden="true">三种情况</figcaption></figure><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133828995.png" alt="真值表"><figcaption aria-hidden="true">真值表</figcaption></figure><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133859450.png"></p><h3 id="是如何产生脉冲的">是如何产生脉冲的</h3><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133942509.png" alt="利用门电路的延迟特性"><figcaption aria-hidden="true">利用门电路的延迟特性</figcaption></figure><h2 id="d">D</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134029875.png"></p><h2 id="j-k">J-K</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134109160.png"></p><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134123180.png"></p><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134158883.png" alt="波形图"><figcaption aria-hidden="true">波形图</figcaption></figure><h1 id="异步预置位输入和清零输入">异步预置位输入和清零输入</h1><p>S-R,D,K-K都是同步输入</p><figure><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134359257.png" alt="PRE和CLR的输入会直接改变输出,而不受前面电路影响"><figcaption aria-hidden="true">PRE和CLR的输入会直接改变输出,而不受前面电路影响</figcaption></figure><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134500344.png"></p><h2 id="ahc74-双d触发器">74AHC74 双D触发器</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134556477.png"></p><h2 id="hc112-双j-k触发器">74HC112 双J-K触发器</h2><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134619947.png"></p><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134756363.png"></p><h1 id="巩固">巩固</h1><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329133349673.png"></p><p><img src="/2022/03/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%83%E7%AB%A0/image-20220329134702818.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十四)--Overload simple clock</title>
    <link href="/2022/03/23/%E7%A8%8B%E8%AE%BE/Overload%20simple%20clock/"/>
    <url>/2022/03/23/%E7%A8%8B%E8%AE%BE/Overload%20simple%20clock/</url>
    
    <content type="html"><![CDATA[<p>题目所给代码</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;SimpleClock.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Clock clock1;<br>cin &gt;&gt; clock1;<br>cout &lt;&lt; <span class="hljs-string">&quot;cin &gt;&gt; clock1&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock1 ---- &quot;</span> &lt;&lt; clock1 &lt;&lt; endl &lt;&lt; endl;<br><br><span class="hljs-function">Clock <span class="hljs-title">clock2</span><span class="hljs-params">(clock1)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock2(clock1)&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock1 ---- &quot;</span> &lt;&lt; clock1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock2 ---- &quot;</span> &lt;&lt; clock2 &lt;&lt; endl &lt;&lt; endl;<br><br>Clock clock3 = clock1 ++;<br>Clock clock4 = ++ clock2;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock3 = clock1 ++&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock4 = ++ clock2&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock1 ---- &quot;</span> &lt;&lt; clock1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock2 ---- &quot;</span> &lt;&lt; clock2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock3 ---- &quot;</span> &lt;&lt; clock3 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock4 ---- &quot;</span> &lt;&lt; clock4 &lt;&lt; endl &lt;&lt; endl;<br><br><span class="hljs-function">Clock <span class="hljs-title">clock5</span><span class="hljs-params">(<span class="hljs-number">11</span>, <span class="hljs-number">45</span>, <span class="hljs-number">14</span>)</span></span>;<br>Clock clock6 = clock1 + clock5;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock5(11, 45, 14)&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock6 = clock1 + clock5&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock1 ---- &quot;</span> &lt;&lt; clock1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock5 ---- &quot;</span> &lt;&lt; clock5 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock6 ---- &quot;</span> &lt;&lt; clock6 &lt;&lt; endl &lt;&lt; endl;<br><br>Clock clock7;<br>clock7 += clock5;<br>clock7 += clock6;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock7()&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock7 += clock5&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;clock7 += clock6&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock5 ---- &quot;</span> &lt;&lt; clock5 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock6 ---- &quot;</span> &lt;&lt; clock6 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&gt;&gt; clock7 ---- &quot;</span> &lt;&lt; clock7 &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>simpleclock.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SIMPLECLOCK_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIMPLECLOCK_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> &#123;</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> hour;<br><span class="hljs-keyword">int</span> minute;<br><span class="hljs-keyword">int</span> second;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">// Implemented.</span><br><span class="hljs-built_in">Clock</span>(): <span class="hljs-built_in">hour</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">minute</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">second</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><span class="hljs-built_in">Clock</span>( <span class="hljs-keyword">int</span> hour_,  <span class="hljs-keyword">int</span> minute_,  <span class="hljs-keyword">int</span> second_): <span class="hljs-built_in">hour</span>(hour_), <span class="hljs-built_in">minute</span>(minute_), <span class="hljs-built_in">second</span>(second_) &#123;&#125; <br><br><br><span class="hljs-comment">// Not implemented.</span><br><br>Clock&amp; <span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Clock &amp;right);<br>Clock <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Clock &amp;right) <span class="hljs-keyword">const</span>;<br>Clock&amp; <span class="hljs-keyword">operator</span> ++ ();<br>Clock <span class="hljs-keyword">operator</span> ++ (<span class="hljs-keyword">int</span>) ;<br><br><span class="hljs-keyword">friend</span> istream &amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream &amp;is, Clock &amp;object);<br><span class="hljs-keyword">friend</span> ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;os, <span class="hljs-keyword">const</span> Clock &amp;object);<br><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> </span><br><br></code></pre></td></tr></table></figure><h1 id="所写代码">所写代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br>Clock Clock::<span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Clock &amp;right) <span class="hljs-keyword">const</span> &#123;<br><br>Clock c;<br><br><span class="hljs-comment">// Deal with hour.</span><br>c.hour = (<span class="hljs-keyword">this</span>-&gt;hour + right.hour) % <span class="hljs-number">24</span>;<br><br><span class="hljs-comment">// Deal with minute.</span><br>c.hour = (c.hour + (<span class="hljs-keyword">this</span>-&gt;minute + right.minute) / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br>c.minute = (<span class="hljs-keyword">this</span>-&gt;minute + right.minute) % <span class="hljs-number">60</span>;<br><br><span class="hljs-comment">// Deal with second.</span><br>c.hour = (c.hour + (c.minute + (<span class="hljs-keyword">this</span>-&gt;second + right.second) / <span class="hljs-number">60</span>) / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br>c.minute = (c.minute + (<span class="hljs-keyword">this</span>-&gt;second + right.second) / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>;<br>c.second = (<span class="hljs-keyword">this</span>-&gt;second + right.second) % <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">return</span> c;<br>&#125;<br><br><br>Clock&amp; Clock::<span class="hljs-keyword">operator</span> += (<span class="hljs-keyword">const</span> Clock &amp;right) &#123;<br><br><span class="hljs-comment">// Deal with hour.</span><br><span class="hljs-keyword">this</span>-&gt;hour = (<span class="hljs-keyword">this</span>-&gt;hour + right.hour) % <span class="hljs-number">24</span>;<br><br><span class="hljs-comment">// Deal with minute.</span><br><span class="hljs-keyword">this</span>-&gt;hour = (<span class="hljs-keyword">this</span>-&gt;hour + (<span class="hljs-keyword">this</span>-&gt;minute + right.minute) / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br><span class="hljs-keyword">this</span>-&gt;minute = (<span class="hljs-keyword">this</span>-&gt;minute + right.minute) % <span class="hljs-number">60</span>;<br><br><span class="hljs-comment">// Deal with second.</span><br><span class="hljs-keyword">this</span>-&gt;hour = (<span class="hljs-keyword">this</span>-&gt;hour + (<span class="hljs-keyword">this</span>-&gt;minute + (<span class="hljs-keyword">this</span>-&gt;second + right.second) / <span class="hljs-number">60</span>) / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br><span class="hljs-keyword">this</span>-&gt;minute = (<span class="hljs-keyword">this</span>-&gt;minute + (<span class="hljs-keyword">this</span>-&gt;second + right.second) / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>;<br><span class="hljs-keyword">this</span>-&gt;second = (<span class="hljs-keyword">this</span>-&gt;second + right.second) % <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><br>Clock &amp; Clock::<span class="hljs-keyword">operator</span> ++ () &#123;<br><span class="hljs-function">Clock <span class="hljs-title">adder</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span></span>;<br>*<span class="hljs-keyword">this</span> += adder;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><br>Clock Clock::<span class="hljs-keyword">operator</span> ++ (<span class="hljs-keyword">int</span>) &#123;<br><span class="hljs-function">Clock <span class="hljs-title">c</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>++ *<span class="hljs-keyword">this</span>;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><br><br>istream &amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream &amp;is, Clock &amp;object) &#123;<br><span class="hljs-keyword">int</span> hour, minute, second;<br>is &gt;&gt; hour &gt;&gt; minute &gt;&gt; second;<br><br>hour %= <span class="hljs-number">24</span>;<br><br>hour = (hour + minute / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br>minute %= <span class="hljs-number">60</span>;<br><br>hour = (hour + (minute + second / <span class="hljs-number">60</span>) / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>;<br>minute = (minute + second / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>;<br>second %= <span class="hljs-number">60</span>;<br><br>object.hour = hour;<br>object.minute = minute;<br>object.second = second;<br><span class="hljs-keyword">return</span> is;<br>&#125;<br><br><br>ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;os, <span class="hljs-keyword">const</span> Clock &amp;object) &#123;<br>os &lt;&lt; object.hour &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; object.minute &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; object.second;<br><span class="hljs-keyword">return</span> os;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十三)--virtual class</title>
    <link href="/2022/03/23/%E7%A8%8B%E8%AE%BE/virtual%20class/"/>
    <url>/2022/03/23/%E7%A8%8B%E8%AE%BE/virtual%20class/</url>
    
    <content type="html"><![CDATA[<p>最后这些类的关系变成了一个圈</p><p>vitural的应用</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-keyword">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>],job[<span class="hljs-number">20</span>],dep[<span class="hljs-number">20</span>],major[<span class="hljs-number">20</span>],prof[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">int</span> age;<br>cin&gt;&gt;name&gt;&gt;age&gt;&gt;job&gt;&gt;dep&gt;&gt;major&gt;&gt;prof;<br>chairman man;<br>man.<span class="hljs-built_in">setname</span>(name);<br>man.<span class="hljs-built_in">setage</span>(age);<br>man.<span class="hljs-built_in">setjob</span>(job);<br>man.<span class="hljs-built_in">setdep</span>(dep);<br>man.<span class="hljs-built_in">setmajor</span>(major);<br>man.<span class="hljs-built_in">setprof</span>(prof);<br><br>cout&lt;&lt;<span class="hljs-string">&quot;name: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getname</span>()&lt;&lt;<span class="hljs-string">&quot; age: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getage</span>()&lt;&lt;<span class="hljs-string">&quot; dep: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getdep</span>()<br>&lt;&lt;<span class="hljs-string">&quot; job: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getjob</span>()&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;prof: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getprof</span>()&lt;&lt;<span class="hljs-string">&quot; major: &quot;</span>&lt;&lt;man.<span class="hljs-built_in">getmajor</span>()&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//所需完成的代码</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span> &#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">base</span>() &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setname</span><span class="hljs-params">(<span class="hljs-keyword">char</span> arr[])</span> </span>&#123;<br><span class="hljs-built_in">strcpy</span>(name, arr);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>-&gt;age = age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">getname</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">leader</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> base &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">char</span> job[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">char</span> department[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setjob</span><span class="hljs-params">(<span class="hljs-keyword">char</span> arr[])</span> </span>&#123;<br><span class="hljs-built_in">strcpy</span>(job, arr);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setdep</span><span class="hljs-params">(<span class="hljs-keyword">char</span> arr[])</span> </span>&#123;<br><span class="hljs-built_in">strcpy</span>(department, arr);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">getjob</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> job;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">getdep</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> department;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">engineer</span>:</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> base &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">char</span> major[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">char</span> profession[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setmajor</span><span class="hljs-params">(<span class="hljs-keyword">char</span> arr[])</span> </span>&#123;<br><span class="hljs-built_in">strcpy</span>(major, arr);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setprof</span><span class="hljs-params">(<span class="hljs-keyword">char</span> arr[])</span> </span>&#123;<br><span class="hljs-built_in">strcpy</span>(profession, arr);<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">getmajor</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> major;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">getprof</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> profession;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chairman</span>:</span> <span class="hljs-keyword">public</span> leader, <span class="hljs-keyword">public</span> engineer &#123;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十二)--多继承</title>
    <link href="/2022/03/23/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <url>/2022/03/23/%E7%A8%8B%E8%AE%BE/%E5%A4%9A%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>写作和赛车是韩少的两大最爱，但在生活的不同时期还是要有所取舍。</p><p>韩少的原则是：</p><p>周末：写作优先； 周内：赛车优先；</p><p>这些可以提现在<code>Weekend</code>和<code>Workday</code>的对象构造中，类继承关系如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs excel">Racing       Writing<br>   \           /<br>  Weekend/<span class="hljs-built_in">Workday</span><br></code></pre></td></tr></table></figure><p>其中<code>Racing</code>和<code>Writing</code>如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Writing</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Writing</span>() &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Writing constructor&quot;</span>&lt;&lt;endl;<br> &#125;<br> ~<span class="hljs-built_in">Writing</span>()&#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;~Writing&quot;</span>&lt;&lt;endl;<br> &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Racing</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Racing</span>()&#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Racing constructor&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">Racing</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;~Racing&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>主函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br> Weekend end;<br> Workday day;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Writing <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">Racing</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">Weekend</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">Racing</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">Writing</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">Workday</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function">~<span class="hljs-title">Workday</span></span><br><span class="hljs-function">~<span class="hljs-title">Writing</span></span><br><span class="hljs-function">~<span class="hljs-title">Racing</span></span><br><span class="hljs-function">~<span class="hljs-title">Weekend</span></span><br><span class="hljs-function">~<span class="hljs-title">Racing</span></span><br><span class="hljs-function">~<span class="hljs-title">Writing</span></span><br></code></pre></td></tr></table></figure><h1 id="hint">Hint</h1><p>提交<code>main</code>函数之外的所有类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Writing</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Writing</span>() &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Writing constructor&quot;</span>&lt;&lt;endl;<br> &#125;<br> ~<span class="hljs-built_in">Writing</span>()&#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;~Writing&quot;</span>&lt;&lt;endl;<br> &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Racing</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Racing</span>()&#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Racing constructor&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">Racing</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;~Racing&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weekend</span>:</span><span class="hljs-keyword">public</span> Writing,<span class="hljs-keyword">public</span> Racing&#123;<br><span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Weekend</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Weekend constructor&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">Weekend</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;~Weekend&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Workday</span>:</span> <span class="hljs-keyword">public</span> Racing,<span class="hljs-keyword">public</span> Writing&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Workday</span>()&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Workday constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Workday</span>()&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;~Workday&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="main.cpp">main.cpp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br> <br>    Weekend end;<br>    Workday day;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六章-Functions of Combinational Logic</title>
    <link href="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <url>/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="basic-adders">Basic Adders</h1><h2 id="the-half-adder-半加器">The Half-Adder (半加器)</h2><p><span class="math display">\[0+0=0\]</span> <span class="math display">\[0+1=1\]</span> <span class="math display">\[1+0=1\\\]</span> <span class="math display">\[1+1+0\\\]</span></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321150942530.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321150902155.png"></p><p><span class="math inline">\(C_{out}\)</span>是输出进位,Sum是当前位</p><h2 id="full-adder-全加器">Full-adder (全加器)</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321151023031.png"></p><p>两个半加器组成一个全加器</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321151241549.png" alt="全加器内部结构"><figcaption aria-hidden="true">全加器内部结构</figcaption></figure><h1 id="parallel-binary-adders">Parallel Binary Adders</h1><p>完成多位相加的操作</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321151501598.png" alt="两位相加"><figcaption aria-hidden="true">两位相加</figcaption></figure><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321151541348.png" alt="三位数字相加(101和011)"><figcaption aria-hidden="true">三位数字相加(101和011)</figcaption></figure><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321151837883.png" alt="全加器组合"><figcaption aria-hidden="true">全加器组合</figcaption></figure><p>投票系统</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321152428642.png"></p><h1 id="ripple-carry-versus-look-ahead-carry-adders异步进位和超前进位">RippleCarry versus Look-Ahead Carry Adders(异步进位和超前进位)</h1><ol type="1"><li>Ripple carry adder: the carry output of each fulladder is connectedto the carry input of the next higher-order stage. – <strong>Timedelay</strong></li><li>The look-ahead carry adder: anticipates the output carry of eachstage, and based on the inputs, produces the output carry by<strong>either carry generation or carry propagation</strong>(进位生成或进位传输)</li></ol><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321152739284.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321152852130.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321153743622.png"></p><p>The output carry for each full-adder stage is dependent only on theinitial input carry (<span class="math inline">\(C_{in1}\)</span>), the<span class="math inline">\(C_g\)</span> and <span class="math inline">\(C_p\)</span> functions of that stage, and the<span class="math inline">\(C_g\)</span> and <span class="math inline">\(C_p\)</span> functions of the precedingstages.</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321153912328.png" alt="三级延迟"><figcaption aria-hidden="true">三级延迟</figcaption></figure><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321154247904.png"></p><h1 id="comparators">Comparators</h1><p>同或门或者异或门实现</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321154421716.png"></p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321154650201.png" alt="两位数比较"><figcaption aria-hidden="true">两位数比较</figcaption></figure><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321154759071.png"></p><p>不相等的情况</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321155556586.png" alt="判断大于小于"><figcaption aria-hidden="true">判断大于小于</figcaption></figure><h2 id="hc85"><strong>74HC85</strong></h2><p>四个比特的比较器</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326233202126.png" alt="74HC85"><figcaption aria-hidden="true">74HC85</figcaption></figure><p>也<strong>可以级联成进行八个比特位比较</strong></p><p><strong>最低位的输入等号一定要为高电平,大于和小于输入一定要为低电平</strong></p><h1 id="decoders">Decoders</h1><p>译码器就相当于将输入和输出建立映射关系,一一对应</p><h2 id="二进制译码门">二进制译码门</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321155943509.png"></p><p>如果要译四位,那么需要16个译码门</p><p>十六选一</p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321165617559.png" alt="四位译码器"><figcaption aria-hidden="true">四位译码器</figcaption></figure><h2 id="hc154十六选一译码器">74HC154(十六选一译码器)</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326234429974.png"></p><h2 id="使用74hc154进行5位数的译码">使用74HC154进行5位数的译码</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326234530066.png"></p><h2 id="bcd译码门">BCD译码门</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321160527760.png"></p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321160640341.png" alt="低电平为有效输出"><figcaption aria-hidden="true">低电平为有效输出</figcaption></figure><h2 id="hc42bcd转换位十进制">74HC42(bcd转换位十进制)</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326234623537.png"></p><h2 id="ls47bcd到7段">74LS47(BCD到7段)</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326234939206.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220321174447606.png"></p><h1 id="encoders">Encoders</h1><h2 id="十进制到bcd">十进制到BCD</h2><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235130929.png" alt="Logic symbol for a decimal-to-BCD encoder"><figcaption aria-hidden="true">Logic symbol for a decimal-to-BCDencoder</figcaption></figure><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235154069.png" alt="逻辑电路"><figcaption aria-hidden="true">逻辑电路</figcaption></figure><h2 id="hc147-decimal-to-bcd-priority-encoder">74HC147 decimal-to-BCDpriority encoder</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235210369.png"></p><h2 id="ls148-8-line-to-3-line-encoder">74LS148 8-line-to-3-lineencoder</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235323395.png"></p><ol type="1"><li>EI Enable input (active LOW)</li><li>EO Enable output (LOW when EI is LOW and none active inputs)</li><li>GS Output for expansion (LOW when EI is LOW and any of the inputs isactive)</li></ol><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235447580.png"></p><h1 id="multiplexersdata-selectors">Multiplexers(Data Selectors)</h1><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235623326.png"></p><figure><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235648364.png" alt="举例"><figcaption aria-hidden="true">举例</figcaption></figure><h2 id="ls151-8-input-data-selectormultiplexer">74LS151 8-input dataselector/multiplexer</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235723496.png"></p><p>Use 74LS151s and any other logic necessary to multiplex 16 data linesonto a single data-output line</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235823211.png"></p><h2 id="重要例子考试警告">重要例子(考试警告)</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235924598.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220326235955362.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220327000010444.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220327000129112.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220327000151025.png"></p><h1 id="demultiplexers多路分配器">Demultiplexers(多路分配器)</h1><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220328201227818.png" class title="基本原理"><h1 id="hc154多路分配器">74HC154多路分配器</h1><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220328201106979.png" class title="74HC154"><h1 id="parity-generatorscheckers">Parity Generators/Checkers</h1><h1 id="ls2809位奇偶校验器发生器">74LS280(9位奇偶校验器/发生器)</h1><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220328201351112.png" class><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0/image-20220328201700007.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五章-combination logic analysis</title>
    <link href="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <url>/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="basic-combinational-logic-circuits">Basic combinational logiccircuits</h1><ol type="1"><li><p>与或逻辑(AND-OR Logic)</p><ol type="1"><li><p>SOP expressions can be implemented with</p><ol type="1"><li>An AND gate for each product term</li><li>One OR gate for summing all of the product terms</li></ol><p>X= AB+ BC +AC</p></li></ol></li><li><p>与或非逻辑(AND-OR-Invert Logic )</p><ol type="1"><li>SOP can be implemented with AND-OR logic directly</li><li>POS expressions can be implemented with AND-OR-Invert logic</li></ol><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321142616632.png"></p></li><li><p>异或逻辑(Exclusive -OR Logic)</p></li></ol><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321142722659.png"></p><ol start="4" type="1"><li><p>同或逻辑(Exclusive -NOR Logic)</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321142808944.png"></p></li></ol><h1 id="implementing-combinational-logic">Implementing CombinationalLogic</h1><h2 id="布尔表达式转换为逻辑电路">布尔表达式转换为逻辑电路</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321142912486.png"></p><h2 id="真值表转换为逻辑电路">真值表转换为逻辑电路</h2><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321143017122.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144101966.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144135070.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144208569.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144225859.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144257705.png"></p><h1 id="the-universal-property-of-nand-and-nor-gates">The UniversalProperty of NAND and NOR Gates</h1><ol type="1"><li><p>The NAND Gate as a Universal Logic Element</p><ol type="1"><li><p>Be used to produce the NOT, the AND, the OR, and the NORfunctions.</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144714629.png"></p></li></ol></li><li><p>The NOR gate as a universal logic element</p><ol type="1"><li><p>Be used to produce the NOT, the AND, the OR, and the NANDfunctions.</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321144809963.png"></p></li></ol></li></ol><h1 id="combinational-logic-using-nand-and-nor-gates">CombinationalLogic Using NAND and NOR Gates</h1><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321145057804.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321145118798.png"></p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321145222739.png"></p><h1 id="logic-circuit-operation-with-pulse-waveform">Logic CircuitOperation with Pulse Waveform</h1><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321145352371.png"></p><p>先写出布尔逻辑表达式,然后化简,最后画波形图</p><p><img src="/2022/03/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%94%E7%AB%A0/image-20220321145435956.png"></p><h1 id="总结">总结</h1><ol type="1"><li>Basic Combinational Logic Circuits</li><li>Implementing Combinational Logic</li><li>From a Boolean expression to a Logic Circuit</li><li>From a Truth Table to a Logic Circuit</li><li>The Universal Property of NAND and NOR Gates</li><li>Logic Circuit Operation with Pulse Waveform Inputs</li><li>How to design a combinational Logic?</li></ol>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学--一阶逻辑公式的语法和语义</title>
    <link href="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/"/>
    <url>/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320112317686.png"></p><p>•<strong>能自己给出一组一阶逻辑公式的解释和个体变量指派函数</strong></p><p>•<strong>能在给定的解释和个体变量指派函数时确定一个公式的真值</strong></p><p>•<strong>能在论域有限时，正确使用类似等值演算的形式确定量词公式的真值</strong></p><p>•<strong>能判断一个一阶逻辑公式是否是命题逻辑公式的替换实例</strong></p><p>•<strong>能判断一个一阶逻辑公式是否是永真式、矛盾式还是非永真的可满足式，并说明理由</strong></p><p>学会画语法树</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320105330685.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110022582.png"></p><p>找出子公式</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110139444.png"></p><p>找出量词的辖域,以及每个个体变量符号是指示变量,约束出现还是自由出现,并说明每个个体变量是公式的自由变量还是约束变量.</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320105608234.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110257497.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110309425.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110339927.png"></p><p>对约束变量改名</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320105735122.png"></p><p>如何解释</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320110510277.png"></p><p>确定一阶逻辑公式的真值</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320111607351.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320111637286.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320111729424.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320111927066.png"></p><p>类似等值演算过程!</p><p>命题逻辑公式的替换实例</p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320112047303.png"></p><p>判断一阶逻辑公式是永真式矛盾式还是可满足式</p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E4%B8%80%E9%98%B6%E9%80%BB%E8%BE%91%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89/image-20220320112112798.png" class title="image-20220320112112798">]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学--命题逻辑的应用</title>
    <link href="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="自然语言命题的符号化"><strong>自然语言命题的符号化</strong></h1><h2 id="判断原子命题和复合命题">判断原子命题和复合命题</h2><figure><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224125269.png" alt="判断复合命题和原子命题"><figcaption aria-hidden="true">判断复合命题和原子命题</figcaption></figure><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224219361.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224203044.png"></p><h2 id="条件命题的符号化">条件命题的符号化</h2><figure><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224251510.png" alt="条件命题的符号化"><figcaption aria-hidden="true">条件命题的符号化</figcaption></figure><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224413540.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224435267.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224448165.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224458565.png"></p><h1 id="普通逻辑问题的符号化分析"><strong>普通逻辑问题的符号化分析</strong></h1><p><strong>符号化下面的推理，并构造论证验证其有效性</strong></p><p><strong>如果小王来，则小张和小李中恰好有一人来。如果小张来，则小赵就不来。所以，如果小赵来了，但小李没来，则小王也没来。</strong></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224707570.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224813800.png"></p><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E5%BA%94%E7%94%A8/image-20220319224838276.png"></p>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学--命题逻辑的推理理论</title>
    <link href="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/"/>
    <url>/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<figure><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/image-20220319222558984.png" alt="自然推理系统的推理规则"><figcaption aria-hidden="true">自然推理系统的推理规则</figcaption></figure><figure><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/image-20220319222721642.png" alt="例题"><figcaption aria-hidden="true">例题</figcaption></figure><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/image-20220319222737488.png"></p><h1 id="附加前提法">附加前提法</h1><p>验证该公式的有效性? <span class="math display">\[p \wedge q \rightarrow s \vee r, q \rightarrow p, r \rightarrow s\Rightarrow q \rightarrow s\]</span></p><p><strong>验证结论为蕴涵式的推理的有效性需要使用</strong>附加前提法</p><p><strong>将结论中的蕴涵式的前件作为附加的前提一起来推出它的后件</strong></p><p>即 将q也作为附加前提,与其他条件结合,共同推出条件s</p><h1 id="反证法">反证法</h1><p><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/image-20220319223621441.png"></p><figure><img src="/2022/03/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9A%84%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/image-20220319223824435.png" alt="例题"><figcaption aria-hidden="true">例题</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十一)--Virtual World</title>
    <link href="/2022/03/16/%E7%A8%8B%E8%AE%BE/Virtual%20World/"/>
    <url>/2022/03/16/%E7%A8%8B%E8%AE%BE/Virtual%20World/</url>
    
    <content type="html"><![CDATA[<p>所给的测试代码</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_1</span><span class="hljs-params">()</span> </span>&#123;<br>    person mike, jack, lily, carson, sucie;<br>    <span class="hljs-function">group <span class="hljs-title">school</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">family_1</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">family_2</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">// make group (act as a society)</span><br>    school.<span class="hljs-built_in">addMember</span>(mike);<br>    school.<span class="hljs-built_in">addMember</span>(jack);<br>    school.<span class="hljs-built_in">addMember</span>(lily);<br>    family_1.<span class="hljs-built_in">addMember</span>(mike);<br>    family_1.<span class="hljs-built_in">addMember</span>(carson);<br>    family_2.<span class="hljs-built_in">addMember</span>(jack);<br>    family_2.<span class="hljs-built_in">addMember</span>(lily);<br>    family_2.<span class="hljs-built_in">addMember</span>(sucie);<br>    <span class="hljs-comment">// construct relationship in the society</span><br>    school.<span class="hljs-built_in">makeFriend</span>(mike, jack);<br>    school.<span class="hljs-built_in">makeFriend</span>(mike, lily);<br>    <span class="hljs-comment">// display the society</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ SCHOOL -----\n&quot;</span>;<br>    school.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ FAMILY_1 -----\n&quot;</span>;<br>    family_1.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ FAMILY_2 -----\n&quot;</span>;<br>    family_2.<span class="hljs-built_in">displayGroup</span>();<br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_2</span><span class="hljs-params">()</span> </span>&#123;<br>    person Baidu, Alibaba, Tencent, NTES, Kingsoft_Antivirus, _360safe;<br>    <span class="hljs-function">group <span class="hljs-title">BAT</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">ECommerce</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">Security</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">// make group (act as a society)</span><br>    BAT.<span class="hljs-built_in">addMember</span>(Baidu);<br>    BAT.<span class="hljs-built_in">addMember</span>(Alibaba);<br>    BAT.<span class="hljs-built_in">addMember</span>(Tencent);<br>    ECommerce.<span class="hljs-built_in">addMember</span>(Baidu);<br>    ECommerce.<span class="hljs-built_in">addMember</span>(Alibaba);<br>    ECommerce.<span class="hljs-built_in">addMember</span>(Tencent);<br>    ECommerce.<span class="hljs-built_in">addMember</span>(NTES);<br>    Security.<span class="hljs-built_in">addMember</span>(Kingsoft_Antivirus);<br>    Security.<span class="hljs-built_in">addMember</span>(_360safe);<br>    <span class="hljs-comment">// display the society</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ BAT -----\n&quot;</span>;<br>    BAT.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ ECommerce -----\n&quot;</span>;<br>    ECommerce.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ Security -----\n&quot;</span>;<br>    Security.<span class="hljs-built_in">displayGroup</span>();<br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_3</span><span class="hljs-params">()</span> </span>&#123;<br>    person p0, p1, p2, p3, p4;<br>    <span class="hljs-function">group <span class="hljs-title">g0</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">g1</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">g2</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">// make group (act as a society)</span><br>    g0.<span class="hljs-built_in">addMember</span>(p0);<br>    g0.<span class="hljs-built_in">addMember</span>(p1);<br>    g0.<span class="hljs-built_in">addMember</span>(p2);<br>    g1.<span class="hljs-built_in">addMember</span>(p0);<br>    g1.<span class="hljs-built_in">addMember</span>(p3);<br>    g2.<span class="hljs-built_in">addMember</span>(p3);<br>    g2.<span class="hljs-built_in">addMember</span>(p4);<br>    <span class="hljs-comment">// construct relationship in the society</span><br>    g1.<span class="hljs-built_in">makeFriend</span>(p0, p3);<br>    g2.<span class="hljs-built_in">breakRelation</span>(p3, p4);<br>    g0.<span class="hljs-built_in">deleteMember</span>(p2);<br>    <span class="hljs-comment">// display the society</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ G0 -----\n&quot;</span>;<br>    g0.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ G1 -----\n&quot;</span>;<br>    g1.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ G2 -----\n&quot;</span>;<br>    g2.<span class="hljs-built_in">displayGroup</span>();<br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_4</span><span class="hljs-params">()</span> </span>&#123;<br>    person p[<span class="hljs-number">50</span>];<br>    <span class="hljs-function">group <span class="hljs-title">g0</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">g1</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">int</span> p_count;<br>    cin &gt;&gt; p_count;<br>    <span class="hljs-comment">// make group (act as a society)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p_count/<span class="hljs-number">2</span>; i++)<br>        g0.<span class="hljs-built_in">addMember</span>(p[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p_count/<span class="hljs-number">2</span>; i &lt; p_count; i++)<br>        g1.<span class="hljs-built_in">addMember</span>(p[i]);<br>    <span class="hljs-comment">// construct relationship in the society</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p_count/<span class="hljs-number">5</span>; i += <span class="hljs-number">2</span>)<br>        g0.<span class="hljs-built_in">makeFriend</span>(p[i], p[i+<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p_count/<span class="hljs-number">2</span>; i &lt; p_count*<span class="hljs-number">3</span>/<span class="hljs-number">4</span><span class="hljs-number">-1</span>; i += <span class="hljs-number">2</span>)<br>        g1.<span class="hljs-built_in">breakRelation</span>(p[i], p[i+<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p_count/<span class="hljs-number">4</span>; i &lt; p_count/<span class="hljs-number">2</span>; i++)<br>        g0.<span class="hljs-built_in">deleteMember</span>(p[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p_count*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>; i &lt; p_count; i++)<br>        g1.<span class="hljs-built_in">deleteMember</span>(p[i]);<br>    <span class="hljs-comment">// display the society</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ G0 -----\n&quot;</span>;<br>    g0.<span class="hljs-built_in">displayGroup</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n------ G1 -----\n&quot;</span>;<br>    g1.<span class="hljs-built_in">displayGroup</span>();<br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> test_id;<br>    cin &gt;&gt; test_id;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (test_id) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">test_1</span>();<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">test_2</span>();<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">test_3</span>();<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">test_4</span>();<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;wrong input\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所完成的类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">person</span>()&#123;<br>id=total_person;<br>total_person++;<br>friend_num=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">group</span>;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addFriend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;friend_num;i++)&#123;<br><span class="hljs-keyword">if</span>(friends[i]==a) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>friends[friend_num]=a;<br>friend_num++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteFriend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;friend_num;i++)&#123;<br><span class="hljs-keyword">if</span>(friends[i]==a)&#123;<br>                <span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">for</span>(j=i;j&lt;friend_num<span class="hljs-number">-1</span>;j++)&#123;<br>friends[j]=friends[j+<span class="hljs-number">1</span>]; <br>&#125;<br>                friends[j]=<span class="hljs-number">-1</span>;<br>                friend_num--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//private:</span><br><span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">int</span> friend_num;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> total_person;<br><span class="hljs-keyword">int</span> friends[<span class="hljs-number">100</span>];<br>&#125;;<br> <br><span class="hljs-keyword">int</span> person:: total_person=<span class="hljs-number">0</span>; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">group</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>person persons[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> group_number; <br><span class="hljs-keyword">int</span> para;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">group</span>(<span class="hljs-keyword">int</span> a)&#123;<br>para=a;<br>group_number=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayGroup</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;group_number;i++)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Person_&quot;</span>&lt;&lt;persons[i].id&lt;&lt;<span class="hljs-string">&quot;: &quot;</span>;<br><span class="hljs-keyword">if</span>(persons[i].friend_num!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;persons[i].friend_num<span class="hljs-number">-1</span>;j++)&#123;<br>cout&lt;&lt;persons[i].friends[j]&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>cout&lt;&lt;persons[i].friends[persons[i].friend_num<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;null&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">addMember</span><span class="hljs-params">(person &amp;p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(para==<span class="hljs-number">1</span>)&#123;<br>    persons[group_number++]=p;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;group_number<span class="hljs-number">-1</span>;i++)&#123;<br>    <span class="hljs-built_in">makeFriend</span>(persons[group_number<span class="hljs-number">-1</span>],persons[i]);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>persons[group_number++]=p;<br>&#125;<br><br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteMember</span><span class="hljs-params">(person &amp;p)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;group_number;i++)&#123;<br>    persons[i].<span class="hljs-built_in">deleteFriend</span>(p.id);<br>    <span class="hljs-keyword">if</span>(persons[i].id==p.id)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;group_number<span class="hljs-number">-1</span>;j++)&#123;<br>    persons[j]=persons[j+<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br>&#125;<br>group_number--;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">makeFriend</span><span class="hljs-params">(person &amp;p1, person &amp;p2)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> m=<span class="hljs-number">-1</span>,n=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;group_number;i++)&#123;<br>    <span class="hljs-keyword">if</span>(p1.id==persons[i].id) m=i;<br>    <span class="hljs-keyword">if</span>(p2.id==persons[i].id) n=i;<br>&#125;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">-1</span>||n==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    persons[m].friends[persons[m].friend_num++]=p2.id;<br>persons[n].friends[persons[n].friend_num++]=p1.id;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">breakRelation</span><span class="hljs-params">(person &amp;p1, person &amp;p2)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> m=<span class="hljs-number">-1</span>,n=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;group_number;i++)&#123;<br>    <span class="hljs-keyword">if</span>(p1.id==persons[i].id) m=i;<br>    <span class="hljs-keyword">if</span>(p2.id==persons[i].id) n=i;<br>&#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;p1.friend_num;i++)&#123;<br>    <span class="hljs-keyword">if</span>(persons[m].friends[i]==p2.id)&#123;<br>                <span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">for</span>(j=i;j&lt;p1.friend_num<span class="hljs-number">-1</span>;j++)&#123;<br>                    persons[m].friends[j]=persons[m].friends[j+<span class="hljs-number">1</span>];<br>                &#125;<br>                <br>                persons[m].friends[j]=<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>        persons[m].friend_num--;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;p2.friend_num;i++)&#123;<br><span class="hljs-keyword">if</span>(persons[n].friends[i]==p1.id)&#123;<br>                <span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">for</span>(j=i;j&lt;p2.friend_num<span class="hljs-number">-1</span>;j++)&#123;<br>                    persons[n].friends[j]=persons[n].friends[j+<span class="hljs-number">1</span>];<br>                &#125;<br>                persons[n].friends[j]=<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>        persons[n].friend_num--;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(十)--Constructor and Inheritance</title>
    <link href="/2022/03/13/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BF%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <url>/2022/03/13/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BF%E7%9A%84%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>完成类B</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span> <span class="hljs-keyword">public</span> A &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">B</span>(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y): <span class="hljs-built_in">A</span>(x), <span class="hljs-built_in">b</span>(y) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>A::<span class="hljs-built_in">show</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> b;<br>&#125;;<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> a0):<span class="hljs-built_in">a</span>(a0) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl; &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> a;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;source.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;test01.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//freopen(&quot;test01.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-function">B <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">15</span>)</span></span>;<br>b.<span class="hljs-built_in">show</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(九)--animal and human</title>
    <link href="/2022/03/13/%E7%A8%8B%E8%AE%BE/animal%20and%20human/"/>
    <url>/2022/03/13/%E7%A8%8B%E8%AE%BE/animal%20and%20human/</url>
    
    <content type="html"><![CDATA[<h1 id="题目所给代码">题目所给代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;animal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;human.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string s, n;<br>    <span class="hljs-keyword">int</span> e;<br>    std::cin &gt;&gt; s &gt;&gt; e &gt;&gt; n;<br>    animal * p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">animal</span>(s, e);<br>    p-&gt;<span class="hljs-built_in">print_eyes</span>();<br>    <span class="hljs-keyword">delete</span> p;<br>    <span class="hljs-function">human <span class="hljs-title">h</span><span class="hljs-params">(n)</span></span>;<br>    p = &amp;h;<br>    p-&gt;<span class="hljs-built_in">print_eyes</span>();<br>    <span class="hljs-keyword">const</span> human &amp; q = h;<br>    q.<span class="hljs-built_in">greeting</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="自己完成的代码">自己完成的代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">animal</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>string _species;<br><span class="hljs-keyword">int</span> _eyes;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">animal</span>(string a,<span class="hljs-keyword">int</span> b):_species(a),_eyes(b)&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_eyes</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt;_species&lt;&lt;<span class="hljs-string">&quot; has &quot;</span>&lt;&lt;_eyes&lt;&lt;<span class="hljs-string">&quot; eyes.&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">human</span>:</span> <span class="hljs-keyword">public</span> animal&#123;<br><span class="hljs-keyword">private</span>:<br>string _name;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">human</span>(string a):<span class="hljs-built_in">animal</span>(<span class="hljs-string">&quot;Human&quot;</span>,<span class="hljs-number">2</span>)&#123;<br>_name=a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">greeting</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello, I&#x27;m &quot;</span>&lt;&lt;_name&lt;&lt;endl; <br>&#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h1 id="测试">测试</h1><p>输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Spider</span><br><span class="hljs-number">8</span><br>Citron<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">Spider has <span class="hljs-number">8</span> eyes.<br>Human has <span class="hljs-number">2</span> eyes.<br>Hello, I&#x27;m Citron.<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(八)--继承 red car</title>
    <link href="/2022/03/13/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BFcar/"/>
    <url>/2022/03/13/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BFcar/</url>
    
    <content type="html"><![CDATA[<h1 id="sample-output">sample output</h1><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//--- build car ---</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">car</span><br><br><span class="hljs-comment">//--- build wheel ---</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">wheel</span><br><br><span class="hljs-comment">//--- build red car ---</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">car</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">wheel</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">wheel</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">wheel</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">wheel</span><br><span class="hljs-selector-tag">Construct</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">red</span> <span class="hljs-selector-tag">car</span><br><br><br></code></pre></td></tr></table></figure><h1 id="red-car">Red Car</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Car</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Construct a car&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wheel</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Wheel</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Construct a wheel&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedCar</span>:</span> <span class="hljs-keyword">public</span> Car&#123;<br>Wheel a,s,d,f;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">RedCar</span>():<span class="hljs-built_in">Car</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Construct a red car&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;--- build car ---&quot;</span> &lt;&lt; endl;<br>  Car car;<br>  cout &lt;&lt; endl;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;--- build wheel ---&quot;</span> &lt;&lt; endl;<br>  Wheel wheel;<br>  cout &lt;&lt; endl;<br><br>  cout &lt;&lt; <span class="hljs-string">&quot;--- build red car ---&quot;</span> &lt;&lt; endl;<br>  RedCar redcar;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章-Boolean Algebra and Logic Simplification  (二)</title>
    <link href="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/"/>
    <url>/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>卡诺图化简重点</p><h1 id="传统方法化简">传统方法化简</h1><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313141215169.png"></p><p>这种化简方法还是有些复杂</p><h1 id="卡诺图化简">卡诺图化简</h1><p>Karnaugh Map</p><ol type="1"><li>A systematic method for simplifying Boolean expressions</li><li>Produce the simplest SOP or POS expression</li><li>Presents all of the possible values of input variables<ol type="1"><li>An array of cells</li><li>Each cell represents a binary value of the input variables</li><li>Adjacency in position equivalents to adjacency in Booleanalgebra</li></ol></li></ol><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313141531871.png"></p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313141617050.png"></p><p>相邻单元格之间只能有一个位是不同的<strong>(格雷码)</strong></p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313142054090.png"></p><p>以sop举例</p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313142846051.png"></p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313142918163.png"></p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220313143023781.png"></p><p>圈<span class="math inline">\(2^n\)</span>数目的格子,比如说能圈1、４、８个格子,留下相同的项,比如C图的左上角那个四个格子,四个项则化简为<span class="math inline">\(\bar A\bar C\)</span></p><ol type="1"><li>Group the ‘1’s<ol type="1"><li>Maximize the size of the groups</li><li>Minimize the number of groups</li></ol></li><li>Rules<ol type="1"><li>A group must contain <span class="math inline">\(2^n\)</span>cells</li><li>Each cell must be adjacent to one or more cells in that group</li><li>Include ‘1’s as much as possible</li><li>Each ‘1’ on the map must be included at least one group</li><li>Cell with ‘1’ can be included into more than one group</li></ol></li></ol><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220317163545453.png"></p><p>关于中间那条线轴对称的元素也是位置相邻.</p><p>5个变量的话也可以画两个四个变量的卡诺图,然后叠起来,上下相邻的元素也是位置相邻</p><p><img src="/2022/03/13/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%BA%8C)/image-20220317164229081.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(七)--继承</title>
    <link href="/2022/03/11/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BF%E5%90%84%E7%A7%8D%E7%B1%BB%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <url>/2022/03/11/%E7%A8%8B%E8%AE%BE/%E7%BB%A7%E6%89%BF%E5%90%84%E7%A7%8D%E7%B1%BB%E7%9A%84%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>这题关于继承的时候各种类的创建和销毁顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Inheritance.hpp&quot;</span></span><br><span class="hljs-keyword">using</span> std::cin;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> token;<br>    cin &gt;&gt; token;<br>    cout &lt;&lt; <span class="hljs-string">&quot;test token: &quot;</span> &lt;&lt; token &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ncreat base A&quot;</span> &lt;&lt; endl;<br>    baseA ba;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ncreat base B&quot;</span> &lt;&lt; endl;<br>    baseB bb;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ncreat derived A&quot;</span> &lt;&lt; endl;<br>    derivedA da;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ncreat derived B&quot;</span> &lt;&lt; endl;<br>    derivedB db;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ncreat C&quot;</span> &lt;&lt; endl;<br>    C c;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\ndestructor&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Inheritance.hpp&quot;</span></span><br> baseA::<span class="hljs-built_in">baseA</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;base A&quot;</span> &lt;&lt; endl;<br>&#125;<br> baseA::~<span class="hljs-built_in">baseA</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~ base A&quot;</span> &lt;&lt; endl;<br>&#125;<br> baseB::<span class="hljs-built_in">baseB</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;base B&quot;</span> &lt;&lt; endl;<br>&#125;<br> baseB::~<span class="hljs-built_in">baseB</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~ base B&quot;</span> &lt;&lt; endl;<br>&#125;<br> derivedA::<span class="hljs-built_in">derivedA</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;derived A&quot;</span> &lt;&lt; endl;<br>&#125;<br> derivedA::~<span class="hljs-built_in">derivedA</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~ derived A&quot;</span> &lt;&lt; endl;<br>&#125;<br> derivedB::<span class="hljs-built_in">derivedB</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;derived B&quot;</span> &lt;&lt; endl;<br>&#125;<br> derivedB::~<span class="hljs-built_in">derivedB</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~ derived B&quot;</span> &lt;&lt; endl;<br>&#125;<br> C::<span class="hljs-built_in">C</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;C&quot;</span> &lt;&lt; endl;<br>&#125;<br> C::~<span class="hljs-built_in">C</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~ C&quot;</span> &lt;&lt; endl;<br>&#125;<br> <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++">\\所需输出<br><br>test token: <span class="hljs-number">6590</span><br><br>creat base A<br>base A<br><br>creat base B<br>base B<br><br>creat derived A<br>base A<br>derived A<br><br>creat derived B<br>base A<br>base B<br>derived B<br><br>creat C<br>base A<br>derived A<br>base A<br>base B<br>derived B<br>C<br><br>destructor<br>~ C<br>~ derived B<br>~ base B<br>~ base A<br>~ derived A<br>~ base A<br>~ derived B<br>~ base B<br>~ base A<br>~ derived A<br>~ base A<br>~ base B<br>~ base A<br><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baseA</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">baseA</span>();<br>    ~<span class="hljs-built_in">baseA</span>();<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baseB</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">baseB</span>();<br>    ~<span class="hljs-built_in">baseB</span>();<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">derivedA</span>:</span><span class="hljs-keyword">public</span> baseA&#123;<br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">derivedA</span>();<br>    ~<span class="hljs-built_in">derivedA</span>();<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">derivedB</span>:</span><span class="hljs-keyword">public</span> baseA, <span class="hljs-keyword">public</span> baseB&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">derivedB</span>();<br>    ~<span class="hljs-built_in">derivedB</span>();<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><span class="hljs-keyword">public</span> derivedA, <span class="hljs-keyword">public</span> derivedB&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">C</span>();<br>    ~<span class="hljs-built_in">C</span>();<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(六)--一道巨巨长的题目</title>
    <link href="/2022/03/09/%E7%A8%8B%E8%AE%BE/%E5%88%86%E6%95%B0(%E8%BE%83%E9%9A%BE)/"/>
    <url>/2022/03/09/%E7%A8%8B%E8%AE%BE/%E5%88%86%E6%95%B0(%E8%BE%83%E9%9A%BE)/</url>
    
    <content type="html"><![CDATA[<p>两百五十行代码给我写麻了</p><h1 id="题目所给代码">题目所给代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> RATIONAL_H_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RATIONAL_H_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rational</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Rational</span>();<br>  <span class="hljs-built_in">Rational</span>(<span class="hljs-keyword">long</span> numerator, <span class="hljs-keyword">long</span> denominator);<br>  <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getNumerator</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getDenominator</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function">Rational <span class="hljs-title">add</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function">Rational <span class="hljs-title">subtract</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function">Rational <span class="hljs-title">multiply</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function">Rational <span class="hljs-title">divide</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">equals</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intValue</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//Returns the numerator/denominator</span><br>  <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">doubleValue</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//Returns 1.0*numberator/denominator</span><br>  <span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(Rational &amp;secondRational);<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;=(Rational &amp;secondRational);<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;(Rational &amp;secondRational);<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;=(Rational &amp;secondRational);<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>!=(Rational &amp;secondRational);<br>  <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>+(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>-(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>*(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>/(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>+=(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>-=(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>*=(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>/=(Rational &amp;secondRational);<br>  Rational <span class="hljs-keyword">operator</span>++();<br>  Rational <span class="hljs-keyword">operator</span>--();<br>  Rational <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span> dummy);<br>  Rational <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span> dummy);<br>  Rational <span class="hljs-keyword">operator</span>+();<br>  Rational <span class="hljs-keyword">operator</span>-();<br>  <span class="hljs-keyword">long</span>&amp; <span class="hljs-keyword">operator</span>[] (<span class="hljs-keyword">int</span> );<br>  <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;stream, Rational &amp;rational);<br>  <span class="hljs-keyword">friend</span> istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;stream, Rational &amp;rational);<br>  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span></span>;<br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-keyword">long</span> numerator; <span class="hljs-comment">//﹞?℅車.</span><br>  <span class="hljs-keyword">long</span> denominator; <span class="hljs-comment">//﹞???㏒?2??邦?a0.</span><br>  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">long</span> n, <span class="hljs-keyword">long</span> d)</span></span>;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Rational.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// Create and initialize two rational numbers r1 and r2.</span><br>  <span class="hljs-function">Rational <span class="hljs-title">r1</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span>;<br>  <span class="hljs-function">Rational <span class="hljs-title">r2</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;<br><br>  <span class="hljs-comment">// Test relational operators</span><br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; &gt; &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 &gt; r2) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; &gt;= &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 &gt;= r1) &lt;&lt; endl; <br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; &lt; &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 &lt; r2) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; &lt;= &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 &lt;= r1) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; == &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 == r2) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; == &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 == r1) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; != &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 != r2) &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; != &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (r1 != r1) &lt;&lt; endl;<br><br><br>  <span class="hljs-comment">// Test toString, add, substract, multiply, and divide operators</span><br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; r1 + r2 &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; r1 - r2 &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; r1 * r2 &lt;&lt; endl;<br>  cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot; / &quot;</span> &lt;&lt; r2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; r1 / r2 &lt;&lt; endl;<br><br>  <span class="hljs-comment">// Test shorthand operators</span><br>  <span class="hljs-function">Rational <span class="hljs-title">r3</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>  r3 += r1;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  r3 -= r1;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  <br>  <span class="hljs-comment">// Test function operator []</span><br>  <span class="hljs-function">Rational <span class="hljs-title">r4</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>  r4[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>; r4[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r4 is &quot;</span> &lt;&lt; r4 &lt;&lt; endl;<br><br>  <span class="hljs-comment">// Test function operators for </span><br>  <span class="hljs-comment">// prefix ++ and --</span><br>  <span class="hljs-comment">// postfix ++ and --</span><br>  r3 = r4++;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r4 is &quot;</span> &lt;&lt; r4 &lt;&lt; endl;<br>  r3 = r4--;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r4 is &quot;</span> &lt;&lt; r4 &lt;&lt; endl;<br><br><br>  r3 = ++r4;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r4 is &quot;</span> &lt;&lt; r4 &lt;&lt; endl;<br>  r3 = --r4;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r3 is &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;r4 is &quot;</span> &lt;&lt; r4 &lt;&lt; endl;<br><br>  <span class="hljs-comment">// Test function operator for conversion</span><br>  cout &lt;&lt; <span class="hljs-string">&quot;1 + &quot;</span> &lt;&lt; r4 &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; (<span class="hljs-number">1</span> + r4) &lt;&lt; endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="完成的代码">完成的代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">long</span> Rational:: <span class="hljs-built_in">gcd</span>(<span class="hljs-keyword">long</span> n,<span class="hljs-keyword">long</span> d)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-built_in">min</span>(n,d);i&gt;=<span class="hljs-number">2</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>&amp;&amp;d%i) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>Rational:: <span class="hljs-built_in">Rational</span>()&#123;<br>numerator=<span class="hljs-number">0</span>;<br>denominator=<span class="hljs-number">1</span>;<br>&#125;<br>Rational:: <span class="hljs-built_in">Rational</span>(<span class="hljs-keyword">long</span> a,<span class="hljs-keyword">long</span> b):<span class="hljs-built_in">numerator</span>(a),<span class="hljs-built_in">denominator</span>(b)&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">Rational::getNumerator</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> numerator;&#125;<br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">Rational::getDenominator</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> denominator;&#125;<br><br><br><br><span class="hljs-function">Rational <span class="hljs-title">Rational::add</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.denominator+secondRational.numerator*denominator;<br>    <span class="hljs-keyword">long</span> b=denominator*secondRational.denominator;<br>    a=a/<span class="hljs-built_in">gcd</span>(a,b);<br>    b=b/<span class="hljs-built_in">gcd</span>(a,b);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(a,b);<br>&#125;<br>Rational Rational:: <span class="hljs-built_in">subtract</span>(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.denominator-secondRational.numerator*denominator;<br>    <span class="hljs-keyword">long</span> b=denominator*secondRational.denominator;<br>    a=a/<span class="hljs-built_in">gcd</span>(a,b);<br>    b=b/<span class="hljs-built_in">gcd</span>(a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(a,b);<br>&#125;<br><span class="hljs-function">Rational <span class="hljs-title">Rational::multiply</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.numerator;<br>    <span class="hljs-keyword">long</span> b=denominator*secondRational.denominator;<br>    a=a/<span class="hljs-built_in">gcd</span>(a,b);<br>    b=b/<span class="hljs-built_in">gcd</span>(a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(a,b);<br>&#125;<br>Rational Rational:: <span class="hljs-built_in">divide</span>(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.denominator;<br>    <span class="hljs-keyword">long</span> b=denominator*secondRational.numerator;<br>    a=a/<span class="hljs-built_in">gcd</span>(a,b);<br>    b=b/<span class="hljs-built_in">gcd</span>(a,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(a,b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Rational::compareTo</span><span class="hljs-params">(Rational &amp;secondRational)</span></span>&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.denominator-secondRational.numerator*denominator;<br>    <span class="hljs-keyword">long</span> b=denominator*secondRational.denominator;<br>    a=a/<span class="hljs-built_in">gcd</span>(a,b);<br>    b=b/<span class="hljs-built_in">gcd</span>(a,b);<br>    <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational:: <span class="hljs-built_in">equals</span>(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">long</span> a=numerator*secondRational.denominator-secondRational.numerator*denominator;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Rational::intValue</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> numerator/denominator;<br>&#125;<br><span class="hljs-keyword">double</span> Rational:: <span class="hljs-built_in">doubleValue</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*numerator/denominator;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational:: <span class="hljs-keyword">operator</span>==(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) ==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational::  <span class="hljs-keyword">operator</span>!=(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) ==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational::  <span class="hljs-keyword">operator</span>&gt;(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) ==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational::  <span class="hljs-keyword">operator</span>&lt;(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) ==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational::  <span class="hljs-keyword">operator</span>&gt;=(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) &gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> Rational::  <span class="hljs-keyword">operator</span>&lt;=(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">compareTo</span>(secondRational) &lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>Rational Rational:: <span class="hljs-keyword">operator</span>+(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(secondRational);<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>-(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">subtract</span>(secondRational);<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>*(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">multiply</span>(secondRational);<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>/(Rational &amp;secondRational)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">divide</span>(secondRational);<br>&#125;<br><br><br>Rational Rational:: <span class="hljs-keyword">operator</span>+=(Rational &amp;secondRational)&#123;<br>    *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">add</span>(secondRational);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>-=(Rational &amp;secondRational)&#123;<br>    *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">subtract</span>(secondRational);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>*=(Rational &amp;secondRational)&#123;<br>    *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">multiply</span>(secondRational);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>/=(Rational &amp;secondRational)&#123;<br>    *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">divide</span>(secondRational);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-keyword">long</span>&amp; Rational::<span class="hljs-keyword">operator</span>[] (<span class="hljs-keyword">int</span> a)&#123;<br>    <span class="hljs-keyword">if</span>(a) <span class="hljs-keyword">return</span> denominator;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> numerator;<br>&#125;<br><br>Rational Rational:: <span class="hljs-keyword">operator</span>+()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(numerator,denominator);<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>-()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(<span class="hljs-number">-1</span>*numerator,<span class="hljs-number">-1</span>*denominator);<br>&#125;<br>Rational:: <span class="hljs-function"><span class="hljs-keyword">operator</span>  <span class="hljs-title">double</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*numerator/denominator;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>++()&#123;<br>    numerator+=denominator;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>--()&#123;<br>    numerator-=denominator;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span> dummy)&#123;<br>    numerator+=denominator;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(numerator-denominator,denominator);<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span> dummy)&#123;<br>    numerator-=denominator;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(numerator+denominator,denominator);    <br>&#125;<br><br><br><span class="hljs-function">string <span class="hljs-title">Rational::toString</span><span class="hljs-params">()</span> </span>&#123;<br> <span class="hljs-keyword">char</span> s[<span class="hljs-number">50</span>];<br> <span class="hljs-keyword">if</span> ( denominator == <span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%ld&quot;</span>,numerator);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%ld/%ld&quot;</span>,numerator,denominator);<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(s);<br>&#125;<br><br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;str, Rational &amp;rational)<br>&#123;<br>  cout &lt;&lt; rational.<span class="hljs-built_in">toString</span>();<br>  <span class="hljs-keyword">return</span> str;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;input ,Rational &amp; k)<br>&#123;<br>string s;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    input &gt;&gt; s;<br>    <span class="hljs-keyword">while</span> (s[i] != <span class="hljs-string">&#x27;/&#x27;</span>) k.numerator = k.numerator * <span class="hljs-number">10</span> + s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    ++i;<br>    <span class="hljs-keyword">while</span> (i &lt; s.<span class="hljs-built_in">length</span>()) k.denominator = <span class="hljs-number">10</span> * k.denominator + s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> input;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遇到的问题">遇到的问题</h1><h2 id="ostream在定义的时候不用加rational">ostream在定义的时候不用加rational::</h2><p>因为ostream是友元函数,友元函数不属于成员函数</p><h2 id="ostream的格式">ostream的格式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;str, Rational &amp;rational)<br>&#123;<br>  cout &lt;&lt; rational.<span class="hljs-built_in">toString</span>();<br>  <span class="hljs-keyword">return</span> str;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类型转换函数">类型转换函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">long</span>&amp; Rational::<span class="hljs-keyword">operator</span>[] (<span class="hljs-keyword">int</span> a)&#123;<br>    <span class="hljs-keyword">if</span>(a) <span class="hljs-keyword">return</span> denominator;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> numerator;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前置和后置">前置和后置</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">Rational Rational:: <span class="hljs-keyword">operator</span>--()&#123;<br>    numerator-=denominator;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>Rational Rational:: <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span> dummy)&#123;<br>    numerator-=denominator;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Rational</span>(numerator+denominator,denominator);    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有点疑惑">有点疑惑</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Rational Rational:: <span class="hljs-keyword">operator</span>/=(Rational &amp;secondRational)&#123;<br>    *<span class="hljs-keyword">this</span>=<span class="hljs-built_in">divide</span>(secondRational);<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这也能将*this赋值,明明没有重载=号,难道跟昨天做的是一个类型的吗.也是因为lei</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(五)--complex operator(一道平平无奇的重载运算符)</title>
    <link href="/2022/03/09/%E7%A8%8B%E8%AE%BE/complex%20operator/"/>
    <url>/2022/03/09/%E7%A8%8B%E8%AE%BE/complex%20operator/</url>
    
    <content type="html"><![CDATA[<h1 id="description">Description</h1><p>实现复数的操作符重载，你需要做的是，将<code>complex.h</code>文件的函数声明，全部在<code>complex.cpp</code>中实现。</p><p>类的声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">COMPLEX</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>); <span class="hljs-comment">// 构造函数</span><br><span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">const</span> COMPLEX &amp;other); <span class="hljs-comment">// 拷贝构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 打印复数</span><br> <span class="hljs-comment">// 重载加法运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br><span class="hljs-comment">// 重载减法运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br>COMPLEX <span class="hljs-keyword">operator</span>-(); <span class="hljs-comment">// 重载求负运算符（一元）</span><br> <span class="hljs-comment">// 重载赋值运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br>    COMPLEX &amp; <span class="hljs-keyword">operator</span>++();     <span class="hljs-comment">//重载前置++</span><br>    COMPLEX <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>);     <span class="hljs-comment">//重载后置++</span><br>    COMPLEX &amp; <span class="hljs-keyword">operator</span>--();        <span class="hljs-comment">//重载前置--</span><br>    COMPLEX <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>);        <span class="hljs-comment">//重载后置--</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">double</span> real, image; <span class="hljs-comment">// 复数的实部与虚部</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="sample-output">Sample Output</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit">1<span class="hljs-string">+2</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-6</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-6</span>i<br><span class="hljs-string">-4</span><span class="hljs-string">-5</span>i<br><span class="hljs-string">-4</span><span class="hljs-string">-5</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-6</span>i<br><span class="hljs-string">-6</span><span class="hljs-string">-7</span>i<br><span class="hljs-string">-6</span><span class="hljs-string">-7</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-6</span>i<br><span class="hljs-string">-5</span><span class="hljs-string">-6</span>i<br></code></pre></td></tr></table></figure><p>感觉没啥需要注意的,大家自己看吧(๑•̀ㅂ•́)و✧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> COMPLEX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COMPLEX_H</span><br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">COMPLEX</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>); <span class="hljs-comment">// 构造函数</span><br><span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">const</span> COMPLEX &amp;other); <span class="hljs-comment">// 拷贝构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 打印复数</span><br> <span class="hljs-comment">// 重载加法运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br><span class="hljs-comment">// 重载减法运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br>COMPLEX <span class="hljs-keyword">operator</span>-(); <span class="hljs-comment">// 重载求负运算符（一元）</span><br> <span class="hljs-comment">// 重载赋值运算符（二元）</span><br>COMPLEX <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> COMPLEX &amp;other);<br>  <br>COMPLEX &amp;<span class="hljs-keyword">operator</span>++();   <span class="hljs-comment">//重载前置++</span><br>COMPLEX <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>); <span class="hljs-comment">//重载后置++</span><br>COMPLEX &amp;<span class="hljs-keyword">operator</span>--();   <span class="hljs-comment">//重载前置--</span><br>COMPLEX <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>); <span class="hljs-comment">//重载后置--</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">double</span> real, image; <span class="hljs-comment">// 复数的实部与虚部</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><br>COMPLEX::<span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i):<span class="hljs-built_in">real</span>(r),<span class="hljs-built_in">image</span>(i)&#123;&#125;<br>COMPLEX::<span class="hljs-built_in">COMPLEX</span>(<span class="hljs-keyword">const</span> COMPLEX &amp;other)&#123;<br>real=other.real;<br>image=other.image;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">COMPLEX::print</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!real &amp;&amp; !image ) cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!real) cout &lt;&lt; noshowpos &lt;&lt; image &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!image) cout&lt;&lt; noshowpos&lt;&lt; real;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; noshowpos&lt;&lt; real &lt;&lt;showpos &lt;&lt; image &lt;&lt; <span class="hljs-string">&#x27;i&#x27;</span>;<br>    cout &lt;&lt; endl &lt;&lt; noshowpos;<br>&#125;<br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> COMPLEX &amp;other)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">COMPLEX</span>(other.real+real,other.image+image);<br>&#125;<br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> COMPLEX &amp;other)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">COMPLEX</span>(real-other.real,image-other.image);<br>&#125; <br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>-()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">COMPLEX</span>(<span class="hljs-number">-1</span>*real,<span class="hljs-number">-1</span>*image);<br>&#125; <br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> COMPLEX &amp;other)&#123;<br>real=other.real;<br>image=other.image;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>COMPLEX &amp;COMPLEX::<span class="hljs-keyword">operator</span>++()&#123;<br>real++;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>)&#123;<br><span class="hljs-function">COMPLEX <span class="hljs-title">temp</span> <span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>real++;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br>COMPLEX &amp;COMPLEX::<span class="hljs-keyword">operator</span>--()&#123;<br>real--;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>COMPLEX COMPLEX::<span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>)&#123;<br><span class="hljs-function">COMPLEX <span class="hljs-title">temp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>real--;<br><span class="hljs-keyword">return</span> temp; <br>&#125;<br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">COMPLEX <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>; <span class="hljs-comment">// 定义一个值为1 + 2i的复数c1</span><br>    <span class="hljs-function">COMPLEX <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;    <span class="hljs-comment">// 定义一个值为2的复数c2</span><br>    <span class="hljs-function">COMPLEX <span class="hljs-title">c3</span><span class="hljs-params">(c1)</span></span>;   <span class="hljs-comment">// 用拷贝构造函数创建一个值同c1的新复数</span><br><br>    c3.<span class="hljs-built_in">print</span>();        <span class="hljs-comment">// 打印c3的值</span><br>    c1 = c1 + c2 + c3; <span class="hljs-comment">// 将c1加上c2再加上c3赋值给c1</span><br>    c2 = -c3;          <span class="hljs-comment">// c2等于c3求负</span><br>    c3 = c2 - c1;      <span class="hljs-comment">// c3等于c2减去c1</span><br>    c3.<span class="hljs-built_in">print</span>();        <span class="hljs-comment">// 再打印运算后c3的值</span><br><br>    COMPLEX temp= c3++;<br>    temp.<span class="hljs-built_in">print</span>();<br>    c3.<span class="hljs-built_in">print</span>();<br><br>    temp=c3--;<br>    temp.<span class="hljs-built_in">print</span>();<br>    c3.<span class="hljs-built_in">print</span>();<br><br>    temp=--c3;<br>    temp.<span class="hljs-built_in">print</span>();<br>    c3.<span class="hljs-built_in">print</span>();<br><br>    temp=++c3;<br>    temp.<span class="hljs-built_in">print</span>();<br>    c3.<span class="hljs-built_in">print</span>();   <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(四)--simple String</title>
    <link href="/2022/03/08/%E7%A8%8B%E8%AE%BE/simple%20string(%E5%A4%8D%E4%B9%A0)/"/>
    <url>/2022/03/08/%E7%A8%8B%E8%AE%BE/simple%20string(%E5%A4%8D%E4%B9%A0)/</url>
    
    <content type="html"><![CDATA[<p>一道比较综合的题目</p><h1 id="description">Description</h1><p>实现一个名为<code>CSimpleString</code>的类，该类可以完成简单的字符串操作。你需要实现类中的这类成员函数：</p><p><code>CSimpleString();</code>构造函数，产生一个<strong>空字符串</strong>。</p><p><code>CSimpleString(char*);</code>构造函数，产生一个串，并用一个<code>char</code>型字符串初始化它。</p><p><code>~CSimpleString();</code>析构函数。</p><p><code>const char&amp; operator[](unsigned intpos);</code>重载[]运算符，返回串中第<code>pos</code>号字符，下标从 0开始。</p><p><code>CSimpleString&amp; operator=(const CSimpleString&amp;other);</code>重载=运算符，将一个<code>CSimpleString</code>对象中的内容copy到另一个<code>CSimpleString</code>对象中。</p><p><code>CSimpleString operator+(const CSimpleString&amp;other);</code>重载+运算符，将两个<code>CSimpleString</code>对象中的串拼接起来并产生新串。</p><p><code>unsigned int length();</code>返回串长度。</p><h1 id="题目所给代码">题目所给代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSimpleString</span> &#123;</span><br><span class="hljs-keyword">char</span> *str;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CSimpleString</span>();<br><span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">char</span>*);<br><span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">const</span> CSimpleString&amp; other);<br>~<span class="hljs-built_in">CSimpleString</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pos);<br>CSimpleString&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CSimpleString &amp;other);<br>CSimpleString <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> CSimpleString &amp;other);<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;SimpleString.hpp&quot;</span></span><br><span class="hljs-keyword">using</span> std::cin;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>];<br>cin &gt;&gt; str;<br><span class="hljs-function">CSimpleString <span class="hljs-title">s1</span><span class="hljs-params">(str)</span></span>;<br>cin &gt;&gt; str;<br><span class="hljs-function">CSimpleString <span class="hljs-title">s2</span><span class="hljs-params">(str)</span></span>;<br>CSimpleString s3;<br>s1 = s1 + s3;<br>s2 = s3 + s2;<br>s3 = s1 + s2;<br>s1 = s1;<br>s1 = s3 + s2;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s1.<span class="hljs-built_in">length</span>(); ++i) cout &lt;&lt; s1[i];<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态成员函数没有this指针</p><h1 id="我的答案">我的答案</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> std::cin;<br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::endl;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSimpleString</span> &#123;</span><br><span class="hljs-keyword">char</span> *str;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CSimpleString</span>();<br><span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">char</span>*);<br><span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">const</span> CSimpleString&amp; other);<br>~<span class="hljs-built_in">CSimpleString</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pos);<br>CSimpleString&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CSimpleString &amp;other);<br>CSimpleString <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> CSimpleString &amp;other);<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>()&#123;<br>str=<span class="hljs-literal">NULL</span>;<br>str=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];<br>str[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>len=<span class="hljs-number">0</span>;<br>&#125;<br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">char</span>* a)&#123;<br>str=<span class="hljs-literal">NULL</span>;<br>str=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];<br>str[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-built_in">strcpy</span>(str,a);<br>len=<span class="hljs-built_in">strlen</span>(a);<br>&#125;<br>CSimpleString::~<span class="hljs-built_in">CSimpleString</span>()&#123;<br><span class="hljs-keyword">delete</span> []str; <br>&#125;<br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">const</span> CSimpleString&amp; other)&#123;<br>len=other.len;<br><span class="hljs-built_in">strcpy</span>(str,other.str);<br>str[len]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br>CSimpleString &amp; CSimpleString:: <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CSimpleString &amp;other)&#123;<br>len=other.len;<br><span class="hljs-built_in">strcpy</span>(str,other.str);<br>str[len]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>CSimpleString  CSimpleString:: <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> CSimpleString &amp;other)&#123;<br>CSimpleString temp;<br>temp.len=<span class="hljs-keyword">this</span>-&gt;len+other.len;<br><span class="hljs-built_in">strcpy</span>(temp.str,<span class="hljs-keyword">this</span>-&gt;str);<br><span class="hljs-built_in">strcat</span>(temp.str,other.str);<br><br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CSimpleString::length</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> len;<br>&#125; <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>&amp; CSimpleString::<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pos)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;str[pos];<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="参考答案">参考答案</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;SimpleString.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;new&gt;</span></span><br><br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>() &#123;<br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">this</span>) <span class="hljs-built_in">CSimpleString</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">char</span> *s) &#123;<br>len = <span class="hljs-built_in">strlen</span>(s);<br>str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(str, s);<br>&#125;<br><br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">const</span> CSimpleString&amp; other)&#123;<br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">this</span>) <span class="hljs-built_in">CSimpleString</span>(other.str);<br><span class="hljs-comment">//return *this;</span><br>&#125;<br><br>CSimpleString::~<span class="hljs-built_in">CSimpleString</span>() &#123;<br><span class="hljs-keyword">delete</span> [] str;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>&amp; CSimpleString::<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pos) &#123;<br><span class="hljs-keyword">return</span> str[pos];<br>&#125;<br><br>CSimpleString&amp; CSimpleString::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CSimpleString&amp; other) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;other) &#123;<br><span class="hljs-keyword">delete</span> [] str;<br><span class="hljs-keyword">new</span>(<span class="hljs-keyword">this</span>) <span class="hljs-built_in">CSimpleString</span>(other.str);<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>CSimpleString CSimpleString::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> CSimpleString&amp; other) &#123;<br>CSimpleString ans;<br><span class="hljs-keyword">delete</span> [] (ans.str);<br>ans.len = len + other.len;<br>ans.str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[ans.len + <span class="hljs-number">1</span>];<br><span class="hljs-built_in">strcpy</span>(ans.str, str);<br><span class="hljs-built_in">strcat</span>(ans.str, other.str);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CSimpleString::length</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> len;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="任小狗代码b">任小狗代码(◆゜∀゜）b</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;SimpleString.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>():<span class="hljs-built_in">str</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">len</span>(<span class="hljs-number">0</span>)&#123;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span>];<br>    str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br>CSimpleString::<span class="hljs-built_in">CSimpleString</span>(<span class="hljs-keyword">char</span>*aa)&#123;<br>    len = <span class="hljs-built_in">strlen</span>(aa);<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[len + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(str, aa);<br>    str[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CSimpleString::length</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br>CSimpleString::~<span class="hljs-built_in">CSimpleString</span>()&#123;<br>    <span class="hljs-keyword">if</span>(str) <span class="hljs-keyword">delete</span> [] str;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>&amp; CSimpleString::<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> pos)&#123;<br>    <span class="hljs-keyword">return</span> str[pos];<br>&#125;<br>CSimpleString&amp; CSimpleString::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CSimpleString &amp;other)&#123;<br>    <span class="hljs-keyword">if</span>(str) <span class="hljs-keyword">delete</span> [] str;<br>    len = other.len;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        str[i] = other.str[i];<br>    &#125;<br>    str[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;   <br>&#125;<br>CSimpleString CSimpleString::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> CSimpleString &amp;other)&#123;<br>    <span class="hljs-keyword">char</span>* aa = <span class="hljs-literal">NULL</span>;<br>    aa = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [len + other.len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; len)&#123;<br>        aa[i] = str[i];<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; len + other.len)&#123;<br>        aa[i] = other.str[j];<br>        j++;<br>        i++;<br>    &#125;<br>    aa[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-function">CSimpleString <span class="hljs-title">temp</span><span class="hljs-params">(aa)</span></span>;<br>    <span class="hljs-keyword">delete</span> [ ] aa;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(三)--随便记记简单题</title>
    <link href="/2022/03/08/%E7%A8%8B%E8%AE%BE/%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6()/"/>
    <url>/2022/03/08/%E7%A8%8B%E8%AE%BE/%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6()/</url>
    
    <content type="html"><![CDATA[<h1 id="重载操作符">重载操作符()</h1><p>重载操作符<code>()</code>，使得能够对象能够像函数一样调用（函数对象）.</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> Matrix_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Matrix_H</span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exchange</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp;, <span class="hljs-keyword">int</span>&amp;)</span></span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><br><span class="hljs-keyword">void</span> Exchange:: <span class="hljs-built_in"><span class="hljs-keyword">operator</span></span>()(<span class="hljs-keyword">int</span> &amp;i,<span class="hljs-keyword">int</span> &amp;j)&#123;<br><span class="hljs-keyword">int</span> t = i;<br>    i = j;<br>    j = t;<br>&#125; <br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>Exchange swap;<br>   <span class="hljs-keyword">int</span> i = <span class="hljs-number">20</span>;<br>   <span class="hljs-keyword">int</span> j = <span class="hljs-number">30</span>;<br><br>   cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;<br>   <br>   <span class="hljs-built_in">swap</span>(i, j);<br>   <br>   cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;<br>   <br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(二)--一道很全面的重载题目</title>
    <link href="/2022/03/08/%E7%A8%8B%E8%AE%BE/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/03/08/%E7%A8%8B%E8%AE%BE/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>记录一道初学很头疼的题</p><h1 id="题目所给代码">题目所给代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Int a=<span class="hljs-number">0</span>;<br>  <span class="hljs-function">Int <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>  <span class="hljs-function">Int <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">2.5</span>)</span></span>;<br>  Int d = <span class="hljs-number">99.5</span>;<br><br>  cout &lt;&lt;  a &lt;&lt; endl;<br>  cout &lt;&lt;  b &lt;&lt; endl;<br>  cout &lt;&lt; b.<span class="hljs-built_in">getI</span>() &lt;&lt; endl;  <br>  cout &lt;&lt;  c &lt;&lt; endl;<br>  cout &lt;&lt;  d &lt;&lt; endl;<br>  <br>  d += <span class="hljs-number">1</span>;<br>  d += <span class="hljs-number">1.5</span>;<br>  cout &lt;&lt;  c+d &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">1</span>+c &lt;&lt; endl;<br>  cout &lt;&lt;  c+<span class="hljs-number">1</span> &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">1.5</span>+c &lt;&lt; endl;<br>  cout &lt;&lt;  c+<span class="hljs-number">1.5</span> &lt;&lt; endl;<br><br>  cout &lt;&lt;  a + b + c + d &lt;&lt; endl;<br><br>  d -= <span class="hljs-number">1</span>;<br>  d -= <span class="hljs-number">1.5</span>;<br>  cout &lt;&lt;  c-d &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">1</span>-c &lt;&lt; endl;<br>  cout &lt;&lt;  c<span class="hljs-number">-1</span> &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">1.5</span>-c &lt;&lt; endl;<br>  cout &lt;&lt;  c<span class="hljs-number">-1.5</span> &lt;&lt; endl;<br><br>  d *= <span class="hljs-number">1</span>;<br>  d *= <span class="hljs-number">1.5</span>;<br>  cout &lt;&lt;  c*d &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">9</span>*c &lt;&lt; endl;<br>  cout &lt;&lt;  c*<span class="hljs-number">9</span> &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">19.4</span>*c &lt;&lt; endl;<br>  cout &lt;&lt;  c*<span class="hljs-number">19.4</span> &lt;&lt; endl;<br>  d /= <span class="hljs-number">2</span>;<br>  d /= <span class="hljs-number">2.5</span>;<br>  cout &lt;&lt;  d/c &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">2</span>/c &lt;&lt; endl;<br>  cout &lt;&lt;  c/<span class="hljs-number">2</span> &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">2.5</span>/c &lt;&lt; endl;<br>  cout &lt;&lt;  c/<span class="hljs-number">2.5</span> &lt;&lt; endl;<br><br>  cout &lt;&lt;  b%c &lt;&lt; endl;<br>  cout &lt;&lt;  <span class="hljs-number">5</span>%c &lt;&lt; endl;<br>  cout &lt;&lt;  c%<span class="hljs-number">2</span> &lt;&lt; endl;<br><br>  cout &lt;&lt;  c++ &lt;&lt; endl;<br>  cout &lt;&lt;  ++c &lt;&lt; endl;<br>  cout &lt;&lt;  c-- &lt;&lt; endl;<br>  cout &lt;&lt;  --c &lt;&lt; endl;    <br>  cout &lt;&lt;  -c &lt;&lt; endl;<br>  <br>  <span class="hljs-keyword">int</span> c1 = c;<br>  cout &lt;&lt; c1 &lt;&lt; endl;<br>  c1 = c;  <br>  cout &lt;&lt; c1 &lt;&lt; endl;  <br><br>  cin &gt;&gt; d;<br>  cout &lt;&lt;  d &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="任小狗的代码">任小狗的代码(:)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Int</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getI</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123; <span class="hljs-keyword">return</span> i; &#125;<br>    <span class="hljs-built_in">Int</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii):<span class="hljs-built_in">i</span>(ii)&#123;&#125;<br>    <span class="hljs-built_in">Int</span>(<span class="hljs-keyword">const</span> Int&amp; ii):<span class="hljs-built_in">i</span>(ii.<span class="hljs-built_in">getI</span>())&#123;&#125;<br>    Int <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        i +=ii;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    Int <span class="hljs-keyword">operator</span>-=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        i -=ii;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    Int <span class="hljs-keyword">operator</span>*=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        i *=ii;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    Int <span class="hljs-keyword">operator</span>/=(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        i /=ii;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)  i;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> i + ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Int ii)&#123;<br>        <span class="hljs-keyword">return</span> i + ii.<span class="hljs-built_in">getI</span>();       <br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(i) + ii;       <br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> i - ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Int ii)&#123;<br>        <span class="hljs-keyword">return</span> i - ii.<span class="hljs-built_in">getI</span>();       <br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(i) - ii;       <br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> i * ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> Int ii)&#123;<br>        <span class="hljs-keyword">return</span> i * ii.<span class="hljs-built_in">getI</span>();       <br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(i) * ii;       <br>    &#125;<br><br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> i / ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> Int ii)&#123;<br>        <span class="hljs-keyword">return</span> i / ii.<span class="hljs-built_in">getI</span>();       <br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in"><span class="hljs-keyword">double</span></span>(i) / ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii)&#123;<br>        <span class="hljs-keyword">return</span> i % ii;       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> Int ii)&#123;<br>        <span class="hljs-keyword">return</span> i % ii.<span class="hljs-built_in">getI</span>();       <br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>++()&#123;<br>        i++;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>)&#123;<br>        i++;<br>        <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>--()&#123;<br>        i--;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>)&#123;<br>        i--;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;( ostream&amp; output, <span class="hljs-keyword">const</span> Int &amp; number)&#123;<br>    output &lt;&lt; number.<span class="hljs-built_in">getI</span>();<br>    <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;( istream&amp; input,Int &amp; number)&#123;<br>        input &gt;&gt; number.i;<br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii + num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii + (<span class="hljs-keyword">double</span>)num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii -num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii - (<span class="hljs-keyword">double</span>)num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii * num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii * (<span class="hljs-keyword">double</span>)num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii / num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii / (<span class="hljs-keyword">double</span>)num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>        <span class="hljs-keyword">return</span> ii % num.<span class="hljs-built_in">getI</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="参考答案">参考答案</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Int</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getI</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> i; &#125;<br>  <span class="hljs-comment">//constructor</span><br>  <span class="hljs-built_in">Int</span>(<span class="hljs-keyword">int</span> a):<span class="hljs-built_in">i</span>(a)&#123;&#125;;<br>  <span class="hljs-built_in">Int</span>(<span class="hljs-keyword">double</span> a)&#123;i = a;&#125;;<br><br>  <span class="hljs-comment">//type transform</span><br>  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> i;<br>  &#125;<br><br>  <span class="hljs-comment">//ostream &amp;&amp; istream</span><br>  <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="hljs-keyword">const</span> Int&amp; a)<br>  &#123;<br>    out &lt;&lt; a.i;<br>    <span class="hljs-keyword">return</span> out;<br>  &#125;<br><br>  <span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; in, Int&amp; a)<br>  &#123;<br>    in &gt;&gt; a.i;<br>    <span class="hljs-keyword">return</span> in;<br>  &#125;<br><br>  <span class="hljs-comment">//operator +=</span><br>  Int <span class="hljs-keyword">operator</span> +=(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i += a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> +=(<span class="hljs-keyword">double</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i += a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//operator -=  </span><br>  Int <span class="hljs-keyword">operator</span> -=(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i -= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> -=(<span class="hljs-keyword">double</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i -= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//operator *=</span><br>  Int <span class="hljs-keyword">operator</span> *=(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i *= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> *=(<span class="hljs-keyword">double</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i *= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//operator /</span><br>  Int <span class="hljs-keyword">operator</span> /=(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i /= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> /=(<span class="hljs-keyword">double</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i /= a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//operator ++</span><br>  Int&amp; <span class="hljs-keyword">operator</span> ++()<br>  &#123;<br>    ++<span class="hljs-keyword">this</span>-&gt;i;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> ++(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    Int temp = *<span class="hljs-keyword">this</span>;<br>    ++<span class="hljs-keyword">this</span>-&gt;i;<br>    <span class="hljs-keyword">return</span> temp;<br>  &#125;<br>  <br>  <span class="hljs-comment">//operator --</span><br>   Int&amp; <span class="hljs-keyword">operator</span> --()<br>  &#123;<br>    --<span class="hljs-keyword">this</span>-&gt;i;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> --(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    Int temp = *<span class="hljs-keyword">this</span>;<br>    --<span class="hljs-keyword">this</span>-&gt;i;<br>    <span class="hljs-keyword">return</span> temp;<br>  &#125;<br><br>  <span class="hljs-comment">//operator =</span><br>  Int <span class="hljs-keyword">operator</span> =(<span class="hljs-keyword">int</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i = a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  Int <span class="hljs-keyword">operator</span> =(<span class="hljs-keyword">double</span> a)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;i = a;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  <span class="hljs-comment">//add any member function needed here</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="知识点">知识点</h1><h2 id="第一">第一</h2><p>加减乘除重载运算符的基本操作</p><h2 id="第二">第二</h2><p>二元运算符涉及顺序时需要使用友元函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> ii, <span class="hljs-keyword">const</span> Int&amp; num )&#123;<br>    <span class="hljs-keyword">return</span> ii - (<span class="hljs-keyword">double</span>)num.<span class="hljs-built_in">getI</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三">第三</h2><p>什么时候return this指针</p><p>+=,-=这种的时候return this指针会比较方便</p><h2 id="重载">重载&lt;<和>&gt;</和></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;( ostream&amp; output, <span class="hljs-keyword">const</span> Int &amp; number)&#123;<br>output &lt;&lt; number.<span class="hljs-built_in">getI</span>();<br><span class="hljs-keyword">return</span> output;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自增运算和自减运算">自增运算和自减运算</h2><p>递增和递减分为前置和后置情况，a = ++b;(前置)， a =b++;(后置)。因为符号一样，所以给后置版本加一个int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">ca <span class="hljs-keyword">operator</span>++()&#123;<br>    pos++;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//后置递增就是增加当前对象的pos的值，并且返回增加pos之前的该对象</span><br>ca <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>)&#123;<br>    ca ret = *<span class="hljs-keyword">this</span>;<br>    ++*<span class="hljs-keyword">this</span>;        <span class="hljs-comment">//这个会调用上面的函数，其实这里可以换成pos++;</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>++ 在前面叫做前自增（例如++a）。前自增先进行自增运算，再进行其他操作。</li><li>++ 在后面叫做后自增（例如a++）。后自增先进行其他操作，再进行自增运算。</li></ul><h2 id="转换函数">转换函数</h2><p>原文链接：https://blog.csdn.net/liyazhen2011/article/details/86349255</p><p>设计一个类Fraction表示分数，包含分子和分母。我们希望它能自动转换为double类型，并参与运算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fraction</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Fraction</span>(<span class="hljs-keyword">int</span> numerator, <span class="hljs-keyword">int</span> denominator = <span class="hljs-number">1</span>)<br>:<span class="hljs-built_in">m_numerator</span>(numerator), <span class="hljs-built_in">m_denominator</span>(denominator)<br>&#123;<br>&#125;<br><span class="hljs-comment">//转换函数</span><br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>)m_numerator / m_denominator;<br>&#125;<br> <br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> m_numerator;        <span class="hljs-comment">//分子</span><br><span class="hljs-keyword">int</span> m_denominator;      <span class="hljs-comment">//分母</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Fraction <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-keyword">double</span> sum = <span class="hljs-number">4</span> + f;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;   <span class="hljs-comment">//sum = 4.6</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//测试代码</span><br><span class="hljs-keyword">double</span> sum = <span class="hljs-number">4</span> + f;<br></code></pre></td></tr></table></figure><p>首先，它会寻找+操作符是否有重载了参数为double和Fraction的函数。很明显，我们并没有为刚刚新建的类Fraction重载+操作符，编译器的该次尝试以失败告终。</p><p>接着，不轻言放弃的编译器发现操作符+可以接收两个double类型的参数，那么是否可以将Fraction转换为double，从而调用该版本的函数呢？这次编译器成功了，因为我们刚刚实现了转换为double的函数。</p><p>最终，编译器成功实现了求和操作，输出了结果4.6。</p><p>**可以发现参考答案中,并没有重载+-*/,因为通过转换函数,也能实现想要的输出**</p><h2 id="我自己的疑惑">我自己的疑惑</h2><p>为什么任小狗的代码没有重载=号,编译器也不报错</p><p>参考答案中重载了=号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Int a=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这个是怎么完成赋值的呢?</p><p>原来这个是隐式类型转换函数.如果在构造函数种使用了explict关键词,这种隐式类型转换就会报错</p><h1 id="补充">2022.3.23补充</h1><p>学了一些知识之后我就懂了,这个等号会自动调用构造函数,前提是在声明变量的时候初始化会调用,而不是调用重载等号的函数.</p><p>而且c++会有一个隐式类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>)<br>        : <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayPoint</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Point&amp; p)</span> </span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p.x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> <br>         &lt;&lt; p.y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">displayPoint</span>(<span class="hljs-number">1</span>);<br>    Point p = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了一个再简单不过的<code>Point</code>类,它的构造函数使用了默认参数.这时主函数里的两句话都会触发该构造函数的隐式调用.(如果构造函数不使用默认参数, 会在编译时报错)</p><p>显然,函数<code>displayPoint</code>需要的是<code>Point</code>类型的参数,而我们传入的是一个<code>int</code>, 这个程序却能成功运行,就是因为这隐式调用. 另外说一句, 在对象刚刚定义时,即使你使用的是赋值操作符<code>=</code>, 也是会调用构造函数,而不是重载的<code>operator=</code>运算符.</p><p>这样悄悄发生的事情, 有时可以带来便利, 而有时却会带来意想不到的后果.<code>explicit</code>关键字用来避免这样的情况发生.</p><p><strong>explicit关键字</strong></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程设记录(一)-meow</title>
    <link href="/2022/03/07/%E7%A8%8B%E8%AE%BE/meow/"/>
    <url>/2022/03/07/%E7%A8%8B%E8%AE%BE/meow/</url>
    
    <content type="html"><![CDATA[<p>几个易错点:</p><h1 id="第一">第一</h1><p>const int id; 这个常量需要使用列表来初始化</p><h1 id="第二">第二</h1><p>string和字符数组如何相互转换</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//字符串转字符数组</span><br>string name = <span class="hljs-string">&quot;哈哈哈哈&quot;</span>;<br><span class="hljs-keyword">char</span> buf[] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">strcpy</span>(buf , name.<span class="hljs-built_in">c_str</span>());<span class="hljs-comment">//字符串转字符数组，使用strcpy</span><br>cout &lt;&lt; name.<span class="hljs-built_in">c_str</span>() &lt;&lt; endl;<span class="hljs-comment">//name.c_str()将字符串转换成字符数组</span><br>cout &lt;&lt; buf &lt;&lt; endl;<br><br><span class="hljs-comment">//字符数组转字符串</span><br><span class="hljs-keyword">char</span> buf1[]= <span class="hljs-string">&quot;哈哈哈哈&quot;</span>;<br>string name1;<br>name1 = buf1;<br>cout &lt;&lt; name1 &lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第三">第三</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meow</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">int</span> id_, string name_);<br><br>    <span class="hljs-comment">//copy constructor</span><br>    <span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">const</span> Meow &amp;other);<br><br>    <span class="hljs-comment">//desctructor</span><br>    ~<span class="hljs-built_in">Meow</span>();<br><br>    <span class="hljs-comment">//return the count of cats</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//print some infomation</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Cat &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;. My name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br><span class="hljs-keyword">int</span> Meow:: <span class="hljs-built_in">getCount</span>()&#123;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然getcount是静态函数,但是在定义的时候不能加static</p><h1 id="第四">第四</h1><p>​ char *name;</p><p>要使用new和delete</p><h1 id="参考答案">参考答案</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Meow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br>Meow::<span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">int</span> id_, string name_) : <span class="hljs-built_in">id</span>(id_) &#123;<br>    name = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[name_.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(name, name_.<span class="hljs-built_in">c_str</span>());<br>    count++;<br>&#125;<br><br>Meow::<span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">const</span> Meow &amp;other) : <span class="hljs-built_in">id</span>(other.id) &#123;<br>    name = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(other.name)+<span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(name, other.name);<br>    count++;<br>&#125;<br><br>Meow::~<span class="hljs-built_in">Meow</span>() &#123;<br>    <span class="hljs-keyword">delete</span> []name;<br>    name = <span class="hljs-literal">NULL</span>;<br>    count--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Meow::getCount</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-keyword">int</span> Meow::count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="源代码">源代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meow</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">int</span> id_, string name_);<br><br>    <span class="hljs-comment">//copy constructor</span><br>    <span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">const</span> Meow &amp;other);<br><br>    <span class="hljs-comment">//desctructor</span><br>    ~<span class="hljs-built_in">Meow</span>();<br><br>    <span class="hljs-comment">//return the count of cats</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//print some infomation</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Cat &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;. My name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> id; <br>    <span class="hljs-keyword">char</span> *name; <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// the count of cats</span><br>&#125;;<br><br><span class="hljs-keyword">int</span> Meow:: count=<span class="hljs-number">0</span>;<br><br>Meow::<span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">int</span> id_, string name_):<span class="hljs-built_in">id</span>(id_),<span class="hljs-built_in">name</span>(<span class="hljs-literal">NULL</span>)&#123;<br>name=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">strcpy</span>(name , name_.<span class="hljs-built_in">c_str</span>());<br>count++;<br>&#125;<br><br>Meow::<span class="hljs-built_in">Meow</span>(<span class="hljs-keyword">const</span> Meow &amp;other):<span class="hljs-built_in">id</span>(other.id),<span class="hljs-built_in">name</span>(<span class="hljs-literal">NULL</span>)&#123;<br>name=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">strcpy</span>(name,other.name);<br>count++;<br>&#125;<br><br><span class="hljs-keyword">int</span> Meow:: <span class="hljs-built_in">getCount</span>()&#123;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br>Meow::~<span class="hljs-built_in">Meow</span>()&#123;<br>count--;<br><span class="hljs-keyword">delete</span> [] name;<br>&#125;<br><br><br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printCount</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Number of Cat: &quot;</span> &lt;&lt; Meow::<span class="hljs-built_in">getCount</span>() &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string name = <span class="hljs-string">&quot;Madara&quot;</span>;<br>    <span class="hljs-keyword">int</span> num;<br>    cin &gt;&gt; num;<br>    <span class="hljs-function">Meow <span class="hljs-title">cat</span><span class="hljs-params">(<span class="hljs-number">0</span>, name)</span>, *p</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; ++i) &#123;<br>        cin &gt;&gt; name;<br>        <span class="hljs-function">Meow <span class="hljs-title">a</span><span class="hljs-params">(i, name)</span></span>;<br><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>            p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Meow</span>(i, name);<br>            <span class="hljs-built_in">printCount</span>();<br>            p-&gt;<span class="hljs-built_in">print</span>();<br>            <span class="hljs-keyword">delete</span> p;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Meow <span class="hljs-built_in">b</span>(a);<br>            <span class="hljs-built_in">printCount</span>();<br>            b.<span class="hljs-built_in">print</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printCount</span>();<br>    cat.<span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章-Boolean Algebra and Logic Simplification  (一)</title>
    <link href="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/"/>
    <url>/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="概念">概念</h1><p>variable:</p><p>complement:the inverse of a variable</p><p>Boolean addition: or</p><p>Boolean multiplication:</p><h1 id="布尔运算和表达式">布尔运算和表达式</h1><h2 id="布尔加法">布尔加法</h2><p><strong>或门是布尔加法的表示形式</strong></p><table><thead><tr class="header"><th>0 + 0 = 0</th><th>0 + 1 = 1</th></tr></thead><tbody><tr class="odd"><td>1 + 0 = 1</td><td>1 + 1 = 1</td></tr></tbody></table><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308151734588.png"></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308151844358.png"></p><h2 id="布尔乘法">布尔乘法</h2><p><strong>与门是布尔乘法的表示形式</strong></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308151928647.png"></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152001791.png"></p><h1 id="布尔代数定律和法则">布尔代数定律和法则</h1><h2 id="布尔代数定律">布尔代数定律</h2><h3 id="交换律">交换律</h3><p><span class="math display">\[A+B=B+A\]</span></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152349658.png" alt="加法交换律"> <span class="math display">\[AB=BA\]</span> <img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152410597.png" alt="乘法交换律"></p><h3 id="结合律">结合律</h3><p><span class="math display">\[A+(B+C)=(A+B)+C\]</span></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152609729.png"> <span class="math display">\[A(BC)=(AB)C\]</span> <img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152627242.png" alt="乘法结合律的应用"></p><h3 id="分配律">分配律</h3><p><span class="math display">\[A(B+C)=AB+AC\]</span></p><figure><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152756810.png" alt="分配律的应用"><figcaption aria-hidden="true">分配律的应用</figcaption></figure><h2 id="布尔代数法则">布尔代数法则</h2><figure><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308152844712.png" alt="与离散数学相似"><figcaption aria-hidden="true">与离散数学相似</figcaption></figure><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308153042104.png"></p><h1 id="狄摩根定理">狄摩根定理</h1><p>第一定理: <span class="math display">\[\overline{XY}=\bar X+\bar Y\]</span> 第二定理: <span class="math display">\[\overline{X+Y} =\bar X+ \bar Y\]</span> <img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308153623566.png"></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308153650823.png"></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308153720311.png"></p><h2 id="布尔代数法则总结">布尔代数法则总结</h2><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313134536507.png"></p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313134554122.png"></p><p>不熟悉的公式推导: <span class="math display">\[A+\bar AB=A+AB+\bar AB=A+B\]</span></p><p><span class="math display">\[A\cdot B+A\cdot \bar B=A(B+\bar B)=A\]</span></p><p><span class="math display">\[A\cdot B+\bar A \cdot C+B\cdot C=A\cdot B+\bar A \cdot C+A\cdot B\cdotC+\bar A\cdot B\cdot C=A\cdot B+\bar A \cdot C\]</span></p><h1 id="逻辑电路的电路分析">逻辑电路的电路分析</h1><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220308153903058.png"></p><h1 id="standard-forms-of-boolean">Standard Forms of Boolean</h1><h2 id="sop-and-pos">SOP and POS</h2><ul><li><p>The sum-of-products (SOP) form</p><ol type="1"><li><p>A single overbar cannot extend over more than onevariable;</p></li><li><p>More than one variable in a term can have an overbar</p></li></ol></li><li><p>The product-of-sums (POS) form</p></li></ul><ol type="1"><li><p>A single overbar cannot extend over more than onevariable</p></li><li><p>More than one variable in a term can have an overbar</p></li></ol><p>Expressions</p><p>SOP <span class="math display">\[AB\bar C \bar D+\bar ACD +AC\]</span></p><p>POS <span class="math display">\[(A + B)(B + C + D)(A + C)\]</span> ## standard SOP Form and POS Form</p><h3 id="standard-sop-form">standard SOP Form</h3><p>All the variables in the domain appear in each product term in theexpression</p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140410076.png"></p><p>离散数学中的主析取范式(极小项)</p><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140430720.png"></p><h3 id="standard-pos-form">Standard POS Form</h3><p>离散数学中的主合取范式(极大项)</p><figure><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140158717.png" alt="image-20220313140158717"><figcaption aria-hidden="true">image-20220313140158717</figcaption></figure><h1 id="converting-standard-sop-to-standard-pos">Converting standard SOPto standard POS</h1><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140545825.png"></p><figure><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140650230.png" alt="from truth table to boolen expression"><figcaption aria-hidden="true">from truth table to boolenexpression</figcaption></figure><p><img src="/2022/03/07/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E4%B8%80)/image-20220313140620663.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字电路-作业遇到的问题</title>
    <link href="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="十进制小数转二进制">十进制小数转二进制</h1><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306161838021.png"></p><p>不断乘二,一旦结果大于一,那么就舍去进位</p><figure><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/2db6c1b2dc19ce2cd46fe86a7fdca039121f11c9.jpg" alt="二进制十进制间小数怎么转换"><figcaption aria-hidden="true">二进制十进制间小数怎么转换</figcaption></figure><p>这种会慢慢逼近,保留5到8位即可</p><h1 id="的补码形式">0的补码形式</h1><p>+0:000000000</p><p>-0:000000000</p><h1 id="浮点数公式">浮点数公式</h1><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220227102322672.png"></p><h1 id="带符号数的减法以补码形式">带符号数的减法以补码形式</h1><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306171854659.png"></p><h1 id="bcd码相加">BCD码相加</h1><p>要是两个BCD码加起来为三位数,那就用12位表示</p><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306174044288.png"></p><p>计算 5+8：</p><p>解：将 5 和 8 以 8421 BCD输入机器，则运算如下：</p><p>0 1 0 1</p><p>+) 1 0 0 0</p><p>1 1 0 1 结果大于 9</p><p>+) 0 1 1 0 加 6 修正</p><p>1 0 0 1 1 即13 的 BCD码</p><p>结果是 0011，即十进制数3，还产生了进位。5+8=13。</p><h1 id="二进制转格雷码">二进制转格雷码</h1><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTA3NzQ4,size_16,color_FFFFFF,t_70.png"></p><h1 id="parity-method-奇偶校验法">Parity Method (奇偶校验法)</h1><p>a的ascII编码是110001,A的ascII编码是100001</p><p>a的编码有奇数个1,所以他的parity bit 是0,</p><p>A的编码有奇数个1,所以他的parity bit 是1</p><table><thead><tr class="header"><th>Even（偶） Parity</th><th>Even（偶） Parity</th><th>Odd Parity</th><th>Odd Parity</th></tr></thead><tbody><tr class="odd"><td>P</td><td>BCD</td><td>P</td><td>BCD</td></tr><tr class="even"><td>0</td><td>0000</td><td>1</td><td>0000</td></tr><tr class="odd"><td>1</td><td>0001</td><td>0</td><td>0001</td></tr><tr class="even"><td>1</td><td>0010</td><td>0</td><td>0010</td></tr><tr class="odd"><td>0</td><td>0011</td><td>1</td><td>0011</td></tr><tr class="even"><td>1</td><td>0100</td><td>0</td><td>0100</td></tr><tr class="odd"><td>0</td><td>0101</td><td>1</td><td>0101</td></tr><tr class="even"><td>0</td><td>0110</td><td>1</td><td>0110</td></tr><tr class="odd"><td>1</td><td>0111</td><td>0</td><td>0111</td></tr><tr class="even"><td>1</td><td>1000</td><td>0</td><td>1000</td></tr><tr class="odd"><td>0</td><td>1001</td><td>1</td><td>1001</td></tr></tbody></table><p>Add <strong>odd parity</strong> system received the code group,00110111, 11110000, which one is incorrect?</p><p>00110111, has 5 1s, it is odd, this code is OK. 11110000, has 4 1s,it is even, it is incorrect</p><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306175404977.png"></p><p>a和c是错的,因为他们的1的个数是偶数个</p><h1 id="循环冗余校验码">循环冗余校验码</h1><p>两种题型</p><p>模-2运算就是异或运算</p><figure><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306190035271.png" alt="image-20220306190035271"><figcaption aria-hidden="true">image-20220306190035271</figcaption></figure><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306190203801.png"></p><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306191939543.png"></p><p><img src="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E7%94%B5%E4%BD%9C%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220306192012154.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fixed Function Logic</title>
    <link href="/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%BA%8C)/"/>
    <url>/2022/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>这块内容没学模电基本啥都不懂,不是数电重点</p><h1 id="ttl和cmos">ttl和cmos</h1><p>Two major fixed function logic families are TTL and CMOS. A thirdtechnology is BiCMOS, which combines the first two. Packaging for fixedfunction logic is shown .</p><p>CMOS是场效应管构成（单极性电路），电压控制器件TTL是双极晶体管构成（双极性电路），电流控制器件</p><p>(依旧不懂,没学模电)</p><p>CMOS逻辑电平范围大（ 5-15V），抗干扰性强，噪声容限大，驱动负载能力强TTL（ 5V以下），抗干扰性强差，噪声容限小，速度快，传输延迟短，功耗大</p><h1 id="cmos电路的特点">CMOS电路的特点</h1><ol type="1"><li><p>功耗小： CMOS门工作时， 总是一管导通另一管 截止，因而几乎不由电源吸取电流其功耗极小；</p></li><li><p>CMOS集成电路功耗低内部发热量小， 集成度可 大大提高；</p></li><li><p>抗幅射能力强， MOS管是多数载流子工作， 射线辐射对多数载流子浓度影响不大；</p></li><li><p>电压范围宽： CMOS门电路输出高电平<span class="math inline">\(V_{OH}\)</span> ≈ <span class="math inline">\(V_{DD}\)</span>,低电平<span class="math inline">\(V_{OL}\)</span> ≈ 0V</p></li><li><p>输出驱动电流比较大：扇出能力较大， 一般可 以大于50；</p></li><li><p>在使用和存放时应注意静电屏蔽， 焊接时电烙 铁应接地良好</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logic Gate</title>
    <link href="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/"/>
    <url>/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>数电老师太催眠了,<strong>自学!!</strong></p><h1 id="selected-key-terms">Selected Key Terms</h1><ol type="1"><li><p>Inverter(反相器):</p><p>A logic circuit that inverts or complements its inputs</p></li><li><p>Truth table(真值表):</p><p>A table showing the inputs and corresponding output(s) of a logiccircuit.</p></li><li><p>Timing diagram(时序图):</p><p>A diagram of waveforms showing the proper time relationship of all ofthe waveforms.</p></li><li><p>Boolean algebra(布尔代数):</p><p>The mathematics of logic circuits.</p></li><li><p>AND gate (与):</p><p>A logic gate that produces a HIGH output only when all of its inputsare HIGH.</p></li><li><p>OR gate(或):</p><p>A logic gate that produces a HIGH output when one or more inputs areHIGH .</p></li><li><p>NAND gate(与非):</p><p>A logic gate that produces a LOW output only when all of its inputsare HIGH.</p></li><li><p>NOR gate(与或):</p><p>A logic gate that produces a LOW output when one or more inputs areHIGH</p></li><li><p>Exclusive-OR gate(异或)</p><p>A logic gate that produces a HIGH output only when its two inputs areat opposite levels.</p></li><li><p>Exclusive-NOR gate (同或):</p><p>A logic gate that produces a LOW output only when its two inputs areat opposite levels.</p><h1 id="the-inverter-反相器">The Inverter (反相器)</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306105032026.png"></p><p>Boolean expression for an inverter is</p><p><span class="math display">\[X = \bar A\]</span>.</p><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306105345660.png"></p><table><thead><tr class="header"><th>input</th><th>output</th></tr></thead><tbody><tr class="odd"><td>a</td><td>x</td></tr><tr class="even"><td>low(0)</td><td>high(1)</td></tr><tr class="odd"><td>high(1)</td><td>low(0)</td></tr></tbody></table><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306105622142.png"></p><h1 id="the-and-gate">The AND Gate</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306110608302.png"></p><table><thead><tr class="header"><th>Input</th><th>Input</th><th>Output</th></tr></thead><tbody><tr class="odd"><td>A</td><td>B</td><td>X</td></tr><tr class="even"><td>0</td><td>0</td><td>0</td></tr><tr class="odd"><td>0</td><td>1</td><td>0</td></tr><tr class="even"><td>1</td><td>0</td><td>0</td></tr><tr class="odd"><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>expression:<span class="math display">\[X = A \cdotB  \]</span>or<span class="math display">\[ X = AB  \]</span></p><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306110626639.png"></p></li></ol><h1 id="or-gate">OR Gate</h1><table><thead><tr class="header"><th>Input</th><th>Input</th><th>OUTPUT</th></tr></thead><tbody><tr class="odd"><td>A</td><td>B</td><td>X</td></tr><tr class="even"><td>0</td><td>0</td><td>0</td></tr><tr class="odd"><td>0</td><td>1</td><td>1</td></tr><tr class="even"><td>1</td><td>0</td><td>1</td></tr><tr class="odd"><td>1</td><td>1</td><td>1</td></tr></tbody></table><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306110740703.png"></p><p><span class="math display">\[X = A + B  \]</span></p><p>下面几种门我主要列出不熟悉的符号表达和门长什么样,真值表就不列了</p><h1 id="the-nand-gate">The NAND Gate</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306111041981.png"></p><p><span class="math display">\[X = \overline {A \cdot B}\]</span></p><p><span class="math display">\[X = \overline {AB}\]</span></p><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306111701475.png"></p><h1 id="the-nor-gate">The NOR Gate</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306111726622.png"> <span class="math display">\[X = \overline{A + B}\]</span> <img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306111853885.png"></p><h1 id="the-xor-gate">The XOR Gate</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306112004889.png"></p><p><span class="math display">\[X = A \oplus B\]</span></p><p><span class="math display">\[X = \bar A B + A\bar B \\\]</span></p><h1 id="the-xnor-gate">The XNOR Gate</h1><p><img src="/2022/03/05/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%B8%89%E7%AB%A0(%E4%B8%80)/image-20220306112828030.png"> <span class="math display">\[X = A \odot B \\\]</span></p><p><span class="math display">\[X = \bar A\bar B + AB\]</span></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字电路-数字系统\运算\编码</title>
    <link href="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="十进制数">十进制数</h1><h1 id="二进制数">二进制数</h1><h1 id="十进制转换二进制">十进制转换二进制</h1><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224215626755.png" alt="image-20220224215626755"><figcaption aria-hidden="true">image-20220224215626755</figcaption></figure><h1 id="二进制算术">二进制算术</h1><h2 id="加法">加法</h2><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224215818222.png" alt="image-20220224215818222"><figcaption aria-hidden="true">image-20220224215818222</figcaption></figure><p>与十进制列竖式同理</p><h2 id="减法">减法</h2><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224220001975.png"></p><p>借位</p><h2 id="乘法">乘法</h2><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224220125856.png"></p><h2 id="除法">除法</h2><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224220233071.png"></p><h1 id="二进制的反码和补码">二进制的反码和补码</h1><h2 id="无符号二进制">无符号二进制</h2><h3 id="反码">反码</h3><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224220720754.png" alt="01转换"><figcaption aria-hidden="true">01转换</figcaption></figure><h3 id="补码">补码</h3><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224220950166.png" alt="反码加一"><figcaption aria-hidden="true">反码加一</figcaption></figure><p>另一种方法:</p><p>改变最低有效1左边的全部位</p><h1 id="带符号数">带符号数</h1><p>最左边为符号位,0代表正数,1代表负数</p><h2 id="带符号数的反码">带符号数的反码</h2><h3 id="对于正数">对于正数</h3><p>正数的反码是其本身</p><p>即反码等于补码等于原码</p><h3 id="对于负数">对于负数</h3><p>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p><p>负数的反码也可以表示为对应正数的各位取反;</p><p>比如-1的反码等于+1的原码的各位取反</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224222321257.png"></p><h2 id="带符号数的补码">带符号数的补码</h2><p>正数的补码就是其本身</p><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1.</p><p>(即在反码的基础上+1)</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224222531865.png"></p><h2 id="带符号数的十进制">带符号数的十进制</h2><h3 id="原码">原码</h3><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224223838229.png"></p><h3 id="反码-1">反码</h3><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224224238224.png"></p><h3 id="补码-1">补码</h3><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224224359987.png"></p><h2 id="带符号整数的表示范围">带符号整数的表示范围</h2><p>二进制数的取值范围取决于数的位数(n)</p><p>对于补码带符号数,n位数的数值范围是<span class="math inline">\(-2^{n-1}\)</span>到<span class="math inline">\(+(2^{n-1}-1)\)</span></p><p>例如:8位数可以表示-128到+127</p><h2 id="浮点数">浮点数</h2><p>单精度(32)(64)(80)</p><p>仅仅讨论单精度</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220224225414962.png"></p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227102322672.png"></p><p><span class="math display">\[数=(-1)^{S}(1+F)(2^{E-127})\]</span></p><h1 id="带符号数的算术运算">带符号数的算术运算</h1><h2 id="加法-1">加法</h2><p>当两个数符号相同时,有可能发生溢出</p><p>负数都是用补码的形式表示的</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227111226093.png"></p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227111316578.png"></p><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227111548107.png" alt="溢出条件"><figcaption aria-hidden="true">溢出条件</figcaption></figure><h2 id="减法-1">减法</h2><p>正二进制或者负二进制数的符号通过求此数的补码而改变.</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227113559355.png"></p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220306171854659.png"></p><h2 id="乘法-1">乘法</h2><p>计算步骤</p><ol type="1"><li>确定被乘数和乘数的符号是相同还是相异的</li><li>将所有的负数变为原码形式</li><li>类比十进制乘法,列竖式</li><li>如果步骤一确定的符号是负的,那就对积取补码,如果是正的,那就保持原码</li><li>补充符号位</li></ol><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227132927944.png" alt="例子"><figcaption aria-hidden="true">例子</figcaption></figure><h2 id="除法-1">除法</h2><p>步骤</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227133324040.png"></p><h1 id="十六进制数">十六进制数</h1><h1 id="二-十进制编码bcd">二-十进制编码(BCD)</h1><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227130541827.png"></p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220227130639472.png"></p><h1 id="数字编码">数字编码</h1><h2 id="格雷码">格雷码</h2><p>特征：两个相邻码字之间只有一位不同 可以减少出错概率</p><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220305161553482.png"></p><h3 id="binary-to-gray-code-conversion">Binary-to-Gray CodeConversion</h3><figure><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20220305162336018.png" alt="第一行是二进制第二行是格雷码"><figcaption aria-hidden="true">第一行是二进制第二行是格雷码</figcaption></figure><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTA3NzQ4,size_16,color_FFFFFF,t_70.png"></p><p>最高有效位相同,从左到右,逐项异或</p><p>比如说格雷码的第二位是二进制的第一位和第二位异或产生的数</p><h3 id="gray-code-to-binary-conversion">Gray Code-to-BinaryConversion</h3><p><img src="/2022/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E4%BA%8C%E7%AB%A0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTA3NzQ4,size_16,color_FFFFFF,t_70-16464694281762.png"></p><p>二进制最高位和格雷码最高位相同，都是1，次高位为二进制的高位和次高位格雷码相异或得到，即 bit2 为 0=1^1。</p><h2 id="ascii码">ASCII码</h2><h1 id="错误检测码">错误检测码</h1><h2 id="parity-method-奇偶校验法">Parity Method (奇偶校验法)</h2><p>a的ascII编码是110001,A的ascII编码是100001</p><p>a的编码有奇数个1,所以他的parity bit 是0,</p><p>A的编码有奇数个1,所以他的parity bit 是1</p><h2 id="crc-cycic-redundancy-check循环冗余校验">CRC (cyc;ic redundancycheck)循环冗余校验</h2><p>用于检验大规模的数据</p><p>后续补充:</p><p>最高有效位，英文全称是：the Most SignificantBit，缩写为：msb，是指一个n位<a href="https://baike.baidu.com/item/二进制">二进制</a>数字中的n-1位，具有最高的<a href="https://baike.baidu.com/item/权值">权值</a>2^(n-1)。与之相反的称之为<a href="https://baike.baidu.com/item/最低有效位">最低有效位</a>。在<a href="https://baike.baidu.com/item/大端">大端</a>序中，msb即指最左端的位。</p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical脚本语言学习( 四)-Simulation region</title>
    <link href="/2022/02/23/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A04/"/>
    <url>/2022/02/23/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A04/</url>
    
    <content type="html"><![CDATA[<p>参考了csdn的文章,属于转载</p><h2 id="自动精度">自动精度</h2><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">addfdtd;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;dimension&quot;</span>,2);#三维仿真区域(重点)<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z min&quot;</span>,-10*nm);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z max&quot;</span>,2*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x span&quot;</span>,0.2*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y span&quot;</span>,0.4*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x min bc&quot;</span>,<span class="hljs-string">&quot;periodic&quot;</span>);#设置x方向周期边界条件(重点)<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y min bc&quot;</span>,<span class="hljs-string">&quot;periodic&quot;</span>);#设置y方向周期边界条件<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;Mesh type&quot;</span>,<span class="hljs-string">&quot;auto non-uniform&quot;</span>);#仿真网格为自动精度<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;Mesh accuracy&quot;</span>,3);#高精度<br><br></code></pre></td></tr></table></figure><p>set(“dimension”,2)：仿真空间维度，“dimension”参数一般有两个值：1和2，其中1表示仿真的区域是二维区域，2表示仿真三维区域。这里设置为2，表示我们仿真的是一个三维区域</p><p>set(“x minbc”,“periodic”)：边界条件，根据实际的仿真区域（维度）设置，有"x maxbc"，“x min bc”，“y max bc”等多个边界，可选用的边界条件见下表：</p><table><thead><tr class="header"><th>边界条件</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>PML(100% absorption, 0% reflection)</td><td>完美匹配层</td></tr><tr class="even"><td>Metal(0% absorption, 100% reflection)</td><td>金属边界</td></tr><tr class="odd"><td>Periodic</td><td>周期边界</td></tr><tr class="even"><td>Symmetric</td><td>对称边界</td></tr><tr class="odd"><td>Anti-Symmetric</td><td>非对称边界</td></tr><tr class="even"><td>Bloch</td><td>适合斜入射</td></tr><tr class="odd"><td>PMC</td><td>理想磁导体</td></tr></tbody></table><p>set(“Mesh type”,“auto non-uniform”)：网格类型，有“autonon-uniform”、“custom non-uniform”、"uniform"三种可选，一般默认为“autonon-uniform”，若不需更改网格类型，本条代码可不写。这里使用的是默认的自动精度</p><p>set(“Mesh accuracy”,3)：自动网格精度，在“autonon-uniform”模式下设置。有1~8一共8个等级，精度随着数字的增大而提高，<strong>一般默认为2</strong>，不建议太高，容易给CPU带来很大的负担。这里设置为3，属于高精度仿真.</p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字电路-introduction concept</title>
    <link href="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/"/>
    <url>/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>Key terms:</p><p>Analog 模拟 Digital 数字</p><p>Inverter: 逆变器?</p><p>Pulse: 脉冲</p><p>Duty cycle: 占空比</p><p>Integrated circuit(IC) 集成电路</p><p>Fixed-function logic 固定功能逻辑</p><p>Timing diagram 时序图</p><p>Troubleshooting 故障 排除</p><p>Serial 串行 Parallel并行</p><p>SPLD ( Simple Programmable Logic Device) 简单可编程逻辑器件</p><p>CPLD (Complex Programming logic device) 复杂可编程逻辑器件</p><p>FPGA （Field-Programmable Gate Array） 现场可编程逻辑门阵列</p><p>Compiler 编译器</p><hr><h1 id="digital-and-analogy-quantities">1.1 digital and analogyquantities</h1><h2 id="definition">definition</h2><p>模拟量具有连续的数值，数字量具有离散的数值。</p><h2 id="the-digital-advantage数字量优点">the digitaladvantage(数字量优点)</h2><p>数字量的优点在电学应用方面，数字量表示法和模拟量表示法相比有一定的优势。</p><ol type="1"><li>数字数据和模拟数据相比，前者在处理和传输方面更有效、更可靠。</li><li>数字数据在需要保存时，更显示了它的优越性。例如，转换成数字形式的音乐，要比相对应的模拟形式更简洁，复制时更精确、更清晰。噪声（不需要的电压波动）几乎不会影响数字数据，但会影响模拟信号。</li></ol><h1 id="binary-digitslogic-levelsand-digital-waveforms二进制数逻辑电平和数字波形">1.2binary digits,logic levels,and digitalwaveforms(二进制数、逻辑电平和数字波形)</h1><h2 id="binary-digits">1.2.1 binary digits</h2><p>positive logic (正逻辑): HIGH=1,LOW=0</p><h2 id="logic-levels">1.2.2 logic levels</h2><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221172223526.png"></p><h2 id="digital-waveforms">1.2.3 digital waveforms</h2><figure><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221172539872.png" alt="理想脉冲"><figcaption aria-hidden="true">理想脉冲</figcaption></figure><p>The Pulse A pulse has two edges: a <strong>leading edge</strong> thatoccurs first at time to and a <strong>trailing edge</strong> that occurslast at time</p><figure><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221172639206.png" alt="非理想脉冲"><figcaption aria-hidden="true">非理想脉冲</figcaption></figure><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221172940668.png"></p><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221173050567.png"> <span class="math display">\[f=\frac{1}{T}\\duty cycle(占空比)=(\frac{t_w}{T})\times100\%\]</span></p><h2 id="a-digital-waveform-carries-binary-information数字波形携带二进制信息">1.2.4A Digital Waveform Carries BinaryInformation(数字波形携带二进制信息)</h2><figure><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221173914930.png" alt="例子"><figcaption aria-hidden="true">例子</figcaption></figure><p>timing diagram</p><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221174141615.png"></p><h2 id="data-transfer数据转换">1.2.5 data transfer(数据转换)</h2><p>两种方式:serial and parallel(串行和并行)</p><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221174429117.png"></p><h1 id="basic-logic-operations基本逻辑操作">1.3 basic logicoperations(基本逻辑操作)</h1><figure><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221175827593.png" alt="image-20220221175827593"><figcaption aria-hidden="true">image-20220221175827593</figcaption></figure><figure><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221175845207.png" alt="image-20220221175845207"><figcaption aria-hidden="true">image-20220221175845207</figcaption></figure><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221175857158-16454375545001.png"></p><p><img src="/2022/02/21/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E6%B1%87%E6%80%BB/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF(%E4%B8%80)/image-20220221175915683.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字电路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical脚本语言学习(三)-结构搭建</title>
    <link href="/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A03/"/>
    <url>/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A03/</url>
    
    <content type="html"><![CDATA[<p>参考文档<a href="https://blog.csdn.net/weixin_44224652/article/details/112712634?spm=1001.2014.3001.5502">(61条消息)FDTD快速入门之Lumerical脚本语言Pickup（三）结构(Structure)搭建_ArcSight的博客-CSDN博客</a></p><p>FDTDsolution中的仿真模型包含两个核心部分：材料(material)和几何结构(structure)。通常用<strong>包含吸收参数的材料的复折射率</strong>控制material属性，而用<strong>3D模型参数</strong>控制structure属性。下面介绍几种常用的structure。</p><h1 id="一长方体矩形rectangle">一、（长方体）矩形（Rectangle）</h1><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">addrect;<br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;rect&quot;</span>);<span class="hljs-comment">#名称                   </span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;material&quot;</span>,<span class="hljs-string">&quot;SiO2 (Glass) - Palik&quot;</span>);<span class="hljs-comment">#材料</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;render type&quot;</span>,<span class="hljs-string">&quot;wireframe&quot;</span>);   <span class="hljs-comment"># 渲染方式：线框，减小显卡压力</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">#设置x中心点坐标   </span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">#设置y中心点坐标</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;x span&quot;</span>,<span class="hljs-number">1e-6</span>);<span class="hljs-comment">#设置x方向宽度</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;y span&quot;</span>,<span class="hljs-number">1e-6</span>);<span class="hljs-comment">#设置y方向宽度</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;z max&quot;</span>,<span class="hljs-number">1e-7</span>);<span class="hljs-comment">#设置z方向最大值</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;z min&quot;</span>,<span class="hljs-number">-1e-6</span>);<span class="hljs-comment">#设置z方向最小值</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;first axis&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>);<span class="hljs-comment">#设置第一转轴</span><br><span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;rotation 1&quot;</span>,<span class="hljs-number">45</span>);<span class="hljs-comment">#设置第一旋转角</span><br><br></code></pre></td></tr></table></figure><figure><img src="/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A03/image-20220220162011002.png" alt="效果展示"><figcaption aria-hidden="true">效果展示</figcaption></figure><p>下面详细介绍每段代码的用途：addrect：随机生成一个一定大小，材料为一定折射率介电材料的矩形模型。</p><p>set(“name”,“rect”)：名称。设定矩形的名称为“rect”</p><p>set(“material”,“SiO2 (Glass) -Palik”)：材料——这里的材料必须是材料库中存在的，且必须按照材料库中原有的名字命名。设定矩形的材料为二氧化硅</p><p>set(“rendertype”,“wireframe”)：渲染方式——有detailed和wireframe两种，系统默认为detailed，如有需要，可改为wireframe。设定矩形的渲染方式为线框</p><p>set(“x”,“0”)：中心坐标(x轴)，类似地还可设置y和z的中心坐标。设定矩形的中心坐标（x轴）为0</p><p>set(“xspan”,“1e-6”)：x轴向宽度（或范围），类似地还可设置y和z的轴向宽度。设定矩形的x轴向宽度为1e-6，即1微米</p><p>set(“z max”,“1e-7”)：z方向最大值，类似地还有z min、x max、x min、ymax、y min。设定矩形的z方向最大为1e-7，即100纳米</p><p>set(“first axis”,“x”)：第一转轴。设定矩形的第一转轴(firstaxis)为x轴</p><p>set(“rotation1”,45)：绕第一转轴的旋转角。设定矩形绕x轴的转角为45°</p><h1 id="二多边形柱体ploygon">二、多边形柱体（Ploygon）</h1><h2 id="多边形柱">1.多边形柱</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br>vtx=[2,0;1,1;-1,1;<br>     -2,0;-1,-1;1,-1]*um;  #向量组<br>addpoly;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;poly&quot;</span>);#名称<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>,1.5);#折射率<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>,vtx);#控制向量组<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0.5*um);#中心坐标<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,1*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,-0.5*um);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,0.4*um);#z方向宽度<br></code></pre></td></tr></table></figure><p><strong>addpoly</strong>：添加一个参数随机的多边形结构。</p><p><strong>set(“index”,1.5)</strong>：折射率。多边形材料为介电材料，折射率为1.5</p><p><strong>set(“vertices”,vtx)</strong>：向量组。设置多边形的xy面二维形状，由传入的向量组vtx中的参数控制</p><h2 id="三角形柱">2.三角形柱</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">um</span>=<span class="hljs-number">1</span>e-<span class="hljs-number">6</span>;<br><span class="hljs-attribute">nm</span>=<span class="hljs-number">1</span>e-<span class="hljs-number">9</span>;<br><span class="hljs-attribute">vtx</span>=[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>;<span class="hljs-number">0</span>,<span class="hljs-number">4</span>;-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]*um;  #向量组<br><span class="hljs-attribute">addtriangle</span>;<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;triangle&quot;</span>);#名称<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;index&quot;</span>,<span class="hljs-number">1</span>.<span class="hljs-number">5</span>);#折射率<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;vertices&quot;</span>,vtx);#控制向量组<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>.<span class="hljs-number">5</span>*um);#中心坐标<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">1</span>*um);<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;z&quot;</span>,-<span class="hljs-number">0</span>.<span class="hljs-number">5</span>*um);<br><span class="hljs-attribute">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,<span class="hljs-number">0</span>.<span class="hljs-number">4</span>*um);#z方向宽度<br><br></code></pre></td></tr></table></figure><h1 id="三椭圆柱体circle">三、（椭）圆柱体（Circle）</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br><br>addcircle;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;circle&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;material&quot;</span>,<span class="hljs-string">&quot;Au (Gold) - Palik&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,400*nm);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;radius&quot;</span>,600*nm);#半径/x轴半径<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;make ellipsoid&quot;</span>,1);#生成椭圆<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;radius 2&quot;</span>,800*nm);#y轴半径<br><br></code></pre></td></tr></table></figure><p>set(“radius”,600<em>nm)：半径/x轴半径。若是圆柱体，radius为圆的半径；若是椭圆柱体，radius为椭圆在x轴方向的半轴长（可能是长半轴或短半轴，由radius和radius的相对大小决定）。这里表示椭圆短半轴为600nm</em></p><p>set(“make ellipsoid”,1)：生成椭圆。“makeellipsoid”可取两个值：0和1。其中，0表示生成的为圆柱体，1表示生成椭圆柱体（也可以认为1是enable椭圆参数radius2，为0则radius2被disable，只生成半径为radius的圆柱）。这里参数为1表示生成一个椭圆柱体。</p><p>set(“radius2”,800<em>nm)：y轴半径，椭圆的第二半轴长。生成一个第二半轴长为800</em>nm的椭圆柱体。</p><h1 id="四椭球体sphere">四、（椭）球体（Sphere）</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br><br>addsphere;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;sphere&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>,1.5);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;radius&quot;</span>,200*nm);#半径/x轴半径<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;make ellipsoid&quot;</span>,1);#生成椭球<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;radius 2&quot;</span>,400*nm);#y轴半径<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;radius 3&quot;</span>,2*um);#z轴半径<br><br></code></pre></td></tr></table></figure><p>球体的代码和椭圆柱的代码十分相似，区别仅在于多了一个第三半径（radius3）（事实上是控制了z轴方向的大小）</p><h1 id="五圆环体ring">五、圆环（体）（Ring）</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br><br>addring;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;ring&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>,1.5);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,600*nm);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;outer radius&quot;</span>,400*nm);#外圆半径<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;inner radius&quot;</span>,200*nm);#内圆半径<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;theta start&quot;</span>,0);#起始角<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;theta stop&quot;</span>,135);#终止角<br><br></code></pre></td></tr></table></figure><h1 id="六角椎体pyramid">六、角椎体（Pyramid）</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">um</span>=1e-6;<br><span class="hljs-attribute">nm</span>=1e-9;<br><br>addpyramid;<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;pyramid&quot;</span>);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;index&quot;</span>,1.5);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x span bottom&quot;</span>,600*nm);#梯形下底长（x轴向）<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;x span top&quot;</span>,100*nm);#梯形上底长（x轴向）<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y span bottom&quot;</span>,400*nm);#梯形下底长（y轴向）<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;y span top&quot;</span>,200*nm);#梯形上底长（y轴向）<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z&quot;</span>,0);<br><span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;z span&quot;</span>,600*nm);<br><br></code></pre></td></tr></table></figure><p>其中参数"x span bottom"、“y span bottom”、“x span top”、"y spantop"分别控制该角锥体下、上底面的矩形大小。</p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical脚本语言学习(二)</title>
    <link href="/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A02/"/>
    <url>/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A02/</url>
    
    <content type="html"><![CDATA[<p>参考了<a href="https://blog.csdn.net/weixin_44224652/article/details/112717522?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=FDTD快速入门之Lumerical脚本语言Pickup&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-112717522.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">(61条消息)FDTD快速入门之Lumerical脚本语言Pickup（二）实用技巧_ArcSight的博客-CSDN博客_fdtd脚本</a></p><h1 id="技巧和习惯">技巧和习惯</h1><ul><li><p>FDTD没有专门的长度单位常量，默认的长度单位是米(m)，所以一般用1e-6和1e-9分别表示微米(um)和纳米(nm)。</p></li><li><p>注释符号：#</p></li><li><p>运行脚本快捷键：F5</p></li><li><p>运行选中代码段快捷键：F9</p></li><li><p>注释快捷键：Ctrl+R</p></li><li><p>取消注释快捷键：Ctrl+T</p><h1 id="运算符">运算符</h1></li></ul><p><img src="/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A02/image-20220220161016300.png"></p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical脚本语言学习(一)</title>
    <link href="/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A01/"/>
    <url>/2022/02/20/Lumerical/lumerical%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<p>这是一段用于验证光从光疏介质入射到光密介质时，反射波中存在半波损失的完整仿真代码。它包含了以下几个部分：</p><ul><li>仿真结构(structure)</li><li>仿真区域(FDTD)</li><li>光源(source)</li><li>监视器（monitor）</li><li>仿真结果分析(Analysis)</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><pre><code class="hljs matlab">switchtolayout;<br><br>selectall;delete;<br><br>nm=<span class="hljs-number">1e-9</span>;#纳米单位<br>um=<span class="hljs-number">1e-6</span>;#微米单位<br><br>#添加矩形<br>addrect;<br>set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;SiO2&quot;</span>);#名称为SiO2                   <br>set(<span class="hljs-string">&quot;material&quot;</span>,<span class="hljs-string">&quot;SiO2 (Glass) - Palik&quot;</span>);#材料为二氧化硅（玻璃）<br>set(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>);#设置x中心点坐标   <br>set(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">0</span>);#设置y中心点坐标<br>set(<span class="hljs-string">&quot;x span&quot;</span>,<span class="hljs-number">1</span>*um);#设置x方向宽度<br>set(<span class="hljs-string">&quot;y span&quot;</span>,<span class="hljs-number">1</span>*um);#设置y方向宽度<br>set(<span class="hljs-string">&quot;z max&quot;</span>,<span class="hljs-number">100</span>*nm);#设置z方向最大值<br>set(<span class="hljs-string">&quot;z min&quot;</span>,<span class="hljs-number">-1</span>*um);#设置z方向最小值<br><br>#添加FDTD仿真区域<br>addfdtd;<br>set(<span class="hljs-string">&quot;dimension&quot;</span>,<span class="hljs-number">2</span>);#仿真区域为三维区域<br>set(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;z min&quot;</span>,<span class="hljs-number">-10</span>*nm);<br>set(<span class="hljs-string">&quot;z max&quot;</span>,<span class="hljs-number">2</span>*um);<br>set(<span class="hljs-string">&quot;x span&quot;</span>,<span class="hljs-number">0.2</span>*um);<br>set(<span class="hljs-string">&quot;y span&quot;</span>,<span class="hljs-number">0.22</span>*um);<br>set(<span class="hljs-string">&quot;x min bc&quot;</span>,<span class="hljs-string">&quot;periodic&quot;</span>);#设置x方向周期边界条件<br>set(<span class="hljs-string">&quot;y min bc&quot;</span>,<span class="hljs-string">&quot;periodic&quot;</span>);#设置y方向周期边界条件<br>set(<span class="hljs-string">&quot;Mesh type&quot;</span>,<span class="hljs-string">&quot;uniform&quot;</span>);#仿真网格为自定义方式<br>Mesh_size=<span class="hljs-number">10</span>*nm;#网格精度<span class="hljs-number">10</span>nm<br>setnamed(<span class="hljs-string">&quot;FDTD&quot;</span>,<span class="hljs-string">&quot;dx&quot;</span>,Mesh_size);<br>setnamed(<span class="hljs-string">&quot;FDTD&quot;</span>,<span class="hljs-string">&quot;dy&quot;</span>,Mesh_size);<br><br>#添加平面波<br>addplane;<br>set(<span class="hljs-string">&quot;injection axis&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>);#入射轴与z轴平行<br>set(<span class="hljs-string">&quot;direction&quot;</span>,<span class="hljs-string">&quot;backward&quot;</span>);#朝向后方入射<br>set(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;x span&quot;</span>,<span class="hljs-number">0.4</span>*um);<br>set(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;y span&quot;</span>,<span class="hljs-number">0.4</span>*um);<br>set(<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-number">1</span>*um);<br>set(<span class="hljs-string">&quot;wavelength start&quot;</span>,<span class="hljs-number">1.5</span>*um);#波长（最小）<br>set(<span class="hljs-string">&quot;wavelength stop&quot;</span>,<span class="hljs-number">1.5</span>*um);#波长（最大）<br><br>#添加点监视器<br>addprofile;<br>set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;R&quot;</span>);<br>set(<span class="hljs-string">&quot;monitor type&quot;</span>,<span class="hljs-number">1</span>);#点监视器<br>set(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">0</span>);<br>set(<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-number">1.5</span>*um);<br><br>#添加时间监视器<br>addtime;<br>set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>);<br><br>run;#运行仿真<br><br>#获取结果并分析<br>select(<span class="hljs-string">&quot;SiO2&quot;</span>);<br>surface_z=get(<span class="hljs-string">&quot;z max&quot;</span>);<br>select(<span class="hljs-string">&quot;source&quot;</span>);<br>source_z=get(<span class="hljs-string">&quot;z&quot;</span>);<br>select(<span class="hljs-string">&quot;R&quot;</span>);<br>monitor_z=get(<span class="hljs-string">&quot;z&quot;</span>);<br>ex=getdata(<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;Ex&quot;</span>);<br>R_z=getdata(<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>);<br>f=getdata(<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>);<br>f=pinch(f);<br>lambda=c/f*<span class="hljs-number">1e6</span>;<br>phase=pinch(<span class="hljs-built_in">angle</span>(ex));<br>phai=phase<span class="hljs-number">-2</span>*<span class="hljs-built_in">pi</span>*(source_z+monitor_z<span class="hljs-number">-2</span>*surface_z)*f/c;<br>phai=<span class="hljs-built_in">mod</span>(phai*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>,<span class="hljs-number">360</span>);<br><span class="hljs-built_in">plot</span>(lambda,phai,<span class="hljs-string">&quot;lambda um&quot;</span>,<span class="hljs-string">&quot;phase&quot;</span>);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical仿真实例(一)-微环调制器</title>
    <link href="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/"/>
    <url>/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>复现论文结果</p><h1 id="论文标题-ultra-low-voltage-ultra-small-mode-volume-silicon-microring-modulator">论文标题:Ultra-low voltage, ultra-small mode volume silicon microringmodulator</h1><h1 id="几个重要参数">几个重要参数</h1><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131164626232.png" alt="微环调制器示意图"><figcaption aria-hidden="true">微环调制器示意图</figcaption></figure><p>微环半径: 2.5 µm</p><p>微环宽度: 500nm</p><p>直波导宽度: 350nm</p><p>微环和直波导高度: 50nm</p><p>外层材料为:<span class="math inline">\(SIO_2\)</span></p><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131165029262.png" alt="image-20220131165029262"><figcaption aria-hidden="true">image-20220131165029262</figcaption></figure><p>圆环最后谐振波长为1564nm</p><h1 id="操作步骤">操作步骤</h1><ol type="1"><li><p>进入FDTD</p><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131170254554.png" alt="进入FDTD"><figcaption aria-hidden="true">进入FDTD</figcaption></figure></li><li><p>可以在component直接导入结构或者在structure自定义 <img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131170348742.png" alt="导入结构"></p></li><li><p>设置参数</p></li></ol><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131170817688.png" alt="进入Edit object"><figcaption aria-hidden="true">进入Edit object</figcaption></figure><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131170939555.png" alt="设置参数"><figcaption aria-hidden="true">设置参数</figcaption></figure><ol start="4" type="1"><li><p>添加光源--为模式光源</p></li><li><p>设置光源参数</p><p>波长设置为:1.5到1.6</p></li><li><p>添加监视器</p><p>需要检测透射率与波长关系</p><p>因此添加frequency-domain field and power</p></li><li><p>设置监视器</p><p>设置方向为2dx-normal</p><p>frequency points</p><figure><img src="/2022/01/31/Lumerical/Lumerical%E4%BB%BF%E7%9C%9F%E5%AE%9E%E4%BE%8B(%E4%B8%80)-%E5%BE%AE%E7%8E%AF%E8%B0%83%E5%88%B6%E5%99%A8/image-20220131172211278.png" alt="重要参数"><figcaption aria-hidden="true">重要参数</figcaption></figure></li><li><p>添加仿真区域</p><p>x方向和z方向有光,y方向没有光</p><p>因此将y方向设置为metal,x和z方向设置为pml</p><p>可以加快计算速度</p><p>可以添加mesh在耦合区域,增加该区域的计算精度</p></li><li><p>设置背景材料为<span class="math inline">\(sio_2\)</span></p></li></ol><p>本次仿真进行的是2D仿真,最后所得参数跟论文结果近乎相同,有些参数没有仔细调,主要是熟悉FDTD的一些操作</p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
      <category>仿真实例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
      <tag>仿真实例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lumerical 软件学习(一)-FDTD</title>
    <link href="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
    <url>/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="theory-of-lumerical-solvers-fdtd">Theory of LumericalSolvers-FDTD</h1><h2 id="commonly-used-software">commonly used software</h2><ol type="1"><li>FDTD solutions</li><li>MODE solutions</li><li>CHARGE solutions</li><li>HEAT solutions</li><li>INTERCONNECT</li><li>etc</li></ol><h2 id="fdtd-finite-difference-time--domain-method">FDTD:finite-difference time -domain method</h2><p>Maxwell's equations:</p><p>等我学完再写(先挖个坑)</p><p>Discretize the fields in <strong>time and space</strong></p><h3 id="an-important-parameter-point-per-wavelength">An importantparameter: <strong>point per wavelength</strong></h3><p>Defined by<strong>"Mesh arruracy"</strong>,ranging from 1-10.Usuallyset to 2</p><p>The frequency domain response is calculated by Fourier transform.Many quantities are derived from the frequency domain fields, such asthe Poynting vector, transmission and reflection spectrum, the fieldpower profile,etc.</p><p>frequency domain: 频域</p><p>Poynting vector: 坡印亭矢量</p><p>field power profile: 场强分布</p><h3 id="essential-components-of-fdtd-simulation">Essential components ofFDTD simulation:</h3><p>Structure(几何结构)</p><p>Material(材料)</p><p>Source(光源)</p><p>Simulation region(仿真区域)</p><p>Monitor(监视器)</p><h4 id="sorce"><strong>Sorce</strong></h4><ol type="1"><li><p>Dipole source: utilized as point source</p><p>(偶极子光源,用于仿真点光源)</p></li><li><p>Plane wave: ideal source with <strong>infinite size</strong></p><p>(平面波,大小无限大,通常用于周期性结构)</p></li><li><p>TPSF(total-field scatter-field source):</p><ol type="1"><li>inside the source region</li></ol><p>-<strong>incident light</strong>(入射光) and <strong>scatteringlight</strong>(散射光)</p><ol start="2" type="1"><li>outside the source region</li></ol><p>-only <strong>scatter light</strong></p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130151611557.png" alt="TPSF示意图"><figcaption aria-hidden="true">TPSF示意图</figcaption></figure><p>(粉色箭头表示入射光入射方向,蓝色箭头表示电场振动方向)</p><p>(白色区域内包含入射场和散射场,白色区域外只有散射场,方便计算)</p></li><li><p>Gaussian source: represnts light from laser source(激光器) orlight from anobjective lens(物镜) with a given NA</p><p>(nonperiodic) (Grating Coupler)</p></li><li><p>Mode source: represents <strong>eigen modes</strong> (e.g. TE/TM)in waveguides(表示波导中的本征模式)</p><p>补充:</p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130152919859.png" alt="补充"><figcaption aria-hidden="true">补充</figcaption></figure></li></ol><h4 id="simulation-region">Simulation region</h4><h5 id="boundary-condition"><strong>Boundary condition</strong></h5><ol type="1"><li><p>PML: perfectly matched layer,</p><p><strong>100% absorption, 0% reflection</strong></p></li><li><p>Metal: perfect electric conductor (PEC)</p><p><strong>100% reflection, 0% absorption</strong></p><p>(usually used when there is nearly <strong>no light at theboundaries</strong> of simulation region, because it takes the<strong>shortest time</strong> to simulate using Metalboundaries)</p></li><li><p>Periodic boundaries: used when the <strong>structures</strong>and <strong>field prolife</strong> are <strong>periodic</strong> ,for<strong>vertical</strong> incident light</p></li><li><p>Bloch boundaries: similar to periodic boundaries,</p><p>but for <strong>angled</strong> incident light</p><p><strong>(periodic/bloch boundaries work with <em>planewave</em>)</strong></p></li><li><p>Symmetric/anti-symmetric boundaries: used when the structures andfield are <strong>symmetric or anti-symmetric </strong> <strong>(e.g. TEmode, positive electric field against negative electricfield)</strong></p></li></ol><h5 id="tips">tips</h5><p>A tip for set-up: apply <strong>symmetric</strong> conditions to theboundaries which are parallel to the<strong>blue</strong> arrow of light(representing the electric field)</p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130155238019.png" alt="symmetric/anti-symmetric boundaries"><figcaption aria-hidden="true">symmetric/anti-symmetricboundaries</figcaption></figure><p>平行于蓝色线设置对称的边界条件</p><p>垂直于蓝色线设置设置反对称的边界条件</p><p><strong>PML boundaries and dipole sources</strong></p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130155713273.png" alt="PML boundaries and dipole sources"><figcaption aria-hidden="true">PML boundaries and dipolesources</figcaption></figure><h4 id="materials-and-monitor">Materials and Monitor</h4><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130160250255.png" alt="material and monitor"><figcaption aria-hidden="true">material and monitor</figcaption></figure><p>反射谱和透射谱(微环结构)</p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130160420464.png" alt="反射谱和透射谱(微环结构)"><figcaption aria-hidden="true">反射谱和透射谱(微环结构)</figcaption></figure><h3 id="applications-of-fdtd">Applications of FDTD:</h3><p>nanophotonic devices with aribitrary shape</p><figure><img src="/2022/01/29/Lumerical/Lumerical%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0(%E4%B8%80)/image-20220130140657831.png" alt="application"><figcaption aria-hidden="true">application</figcaption></figure><p>Intergrated Optics: 集成光学</p><p>CMOs image sensors: 图像传感器</p><p>Solar Cells: 太阳能电池</p><p>OLEDs(OrganicLight-Emitting Diode): 有机发光二极管</p><p>Nanoparticles: 纳米粒子</p><p>Plasmonics: 等离子体</p><p>Liquid crystals: 液晶</p><p>photonic crystals: 光子晶体</p><p>Grating devices: 光栅器件</p><p>Lithography: 光刻</p><p>Metamaterials: 超材料</p><p>Defect detection: 缺陷检测</p><p>预告: 下次写MODE</p>]]></content>
    
    
    <categories>
      
      <category>Lumerical</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lumerical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文献阅读(二)硅基光栅耦合器</title>
    <link href="/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/"/>
    <url>/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="光栅耦合器主要性能指标和优点">光栅耦合器主要性能指标和优点</h1><p>(个人理解)</p><p>1）耦合效率(coupling efficiency)(表示能量损耗)</p><p>2）带宽(bandwidth)(表示信息传输的能力)</p><p>3）偏振依赖性(polarization dependency)</p><p>(偏振依赖损耗（PDL）是指<strong>具有偏振特性的光信号，在光纤、光器件或由它们组成的网络传输过程中，由于光的偏振特性变化而引起的光功率变化</strong>)</p><p>4）对准容差(alignment tolerance)(与实际生产工艺有关)</p><p>优点</p><p>光栅耦合器的主要优点在于其位置比较灵活，可位于芯片中的<strong>任意位置</strong>，因而可用于晶圆级的在线测试，另外其耦合的<strong>对准容差较大</strong>，便于封装。但是其耦合效率不太高，并且<strong>带宽较小</strong>(1dB带宽约30-40nm)，<strong>1维GC是偏振敏感的。</strong></p><h1 id="光栅耦合器类型和特性">光栅耦合器类型和特性</h1><p>光栅耦合器的主要研究内容包括<strong>耦合效率、耦合角度、工作波长带宽、偏振相关性</strong>等</p><p>光栅耦合器的耦合效率是由<strong>衍射强度、方向性效率和耦合光场重叠积分</strong>三个部分共同决定的</p><p><strong>偏振相关性</strong>概念?</p><p>硅基光栅耦合器件可分为一维结构和二维结构,根据光栅单元的<strong>周期、占空比、刻蚀深度、刻蚀角度</strong>的不同又可分为<strong>均匀光栅耦合器、非均匀光栅耦合器以及闪耀光栅耦合器</strong>等</p><p>啁啾的最简单定义是信号频率随时间变化，在脉冲前后沿由于调制产生频率变化，使信号频谱展宽</p><h2 id="高效率非均匀耦合结构">高效率非均匀耦合结构</h2><p>均匀光栅耦合器是指每个光栅的<strong>单元周期、占空比、刻蚀深度</strong>均为恒定值,但是均匀光栅耦合器对的<strong>重叠积分</strong>受到限制,<strong>耦合效率</strong>较低</p><p>均匀光栅耦合器的优点</p><ol type="1"><li>CMOS 工艺兼容, 工艺相对简单</li><li>对均匀结构的研究比较全面, 加工方法比较成熟</li></ol><p>非均匀光栅耦合器,是指<strong>周期和占空比甚至刻蚀深度随光传播方向改变</strong>的一种准周期结构</p><p>由于工艺上的难题, 这种光栅耦合器结构从理论提出以后发展缓 慢</p><h2 id="垂直耦合结构">垂直耦合结构</h2><p>一直以来, 为了降低二阶反射, 从而提高耦合效率, 光栅耦合器的衍射方向呈10◦ 左右的偏角</p><p>限制实际应用和封装困难</p><p>垂直耦合成为了继耦合效率之后限制光栅耦合器实用化的另一待解难题</p><p>最理想的消除二阶反射的方法是闪耀光栅,但加工要求高,与CMOS工艺不兼容</p><p>文献中的课题组提出了一种缓变阶梯型闪耀光栅耦合器,用多阶梯结构替代闪耀光栅的倾斜面(这是属于正向设计)</p><p><img src="/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/image-20220214213046918.png"></p><h2 id="二维光栅耦合器">二维光栅耦合器</h2><p>二维光栅耦合器大致可分为两种, 一种是类似光子晶体结构的光栅耦合器,另一种是弧形光栅耦合器</p><figure><img src="/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/image-20220214221316333.png" alt="2D 光子晶体光栅耦合器"><figcaption aria-hidden="true">2D 光子晶体光栅耦合器</figcaption></figure><p>二维光子晶体光栅耦合器是为了解决<strong>光栅波导内的偏振问题</strong>提出的</p><p>具体内容还欠缺很多基础知识...</p><h2 id="大带宽啁啾光栅">大带宽啁啾光栅</h2><p>基本概念</p><p>频率随时间变化的波叫<strong>啁啾波</strong></p><p>如果频率随时间增加，先看到低频波后看到高频波，为<strong>正啁啾</strong>，也就是上升的前沿是低频，下降的后沿是高频。反之为<strong>负啁啾</strong>。</p><p>非均匀光栅耦合器中的啁啾结构, 就是为了提高带宽而提 出的.相比均匀光栅耦合器, 啁啾光栅增加了一个啁啾量的概念,通常是<strong>光栅单元周期的变化</strong>.带宽的增加主要是由<strong>啁啾量</strong>决定的</p><p>(暂时还不是特别懂)</p><h1 id="知识补充">知识补充</h1><p>TE叫做横电模，指的是电场方向与传播方向垂直的。</p><p>TM叫做横磁模，指的是磁场方向与传播方向垂直的。</p><p>TE和TM可以合称LP，线性偏振模。</p><p>TEM叫做横电磁模，指的是电场、磁场方向都和传播方向垂直的。</p><p><img src="/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/v2-27d53b235d57e731edcfe2333d1c4c5b_1440w.jpg"></p><p>参考</p><p><a href="https://www.zhihu.com/question/58819962">TE、TM、TEM模的区别？ -知乎 (zhihu.com)</a></p><figure><img src="/2022/01/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8/v2-77cfa55febba75a30fd4896420fdfb45_1440w.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>请想象一下，光线上的一个点，<strong>微观的</strong>传播方向（<strong>相速度方向</strong>）是沿着红线的方向的，如果电场方向垂直于纸面向内或向外，磁场方向就是在纸面内，与红线垂直的。那么，电场的方向与纸面垂直，就和纸面内的任意一条线垂直，就和光纤的中心线（那条虚线，<strong>群速度方向</strong>）垂直，而磁场方向则是不与这条线垂直，这就是TE模。同理，也可理解TM模吧。</p><p>传输特性有什么区别呢?</p><p>对于TE模来说，<a href="https://www.zhihu.com/search?q=临界反射角&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A%22187984489%22%7D">临界反射角</a>要大一些（可以到90°？），即可以更平一些，所以在尺寸减小到一定程度时，只有TE模还可以存在。</p>]]></content>
    
    
    <categories>
      
      <category>大创文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大创</tag>
      
      <tag>文献</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文献阅读(一):硅基光栅耦合器的研究进展</title>
    <link href="/2022/01/28/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95/"/>
    <url>/2022/01/28/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="文献标题-硅基光栅耦合器的研究进展">文献标题:硅基光栅耦合器的研究进展</h1><h2 id="研究背景">研究背景:</h2><ol type="1"><li><strong>电互连</strong>由于电子物理特性的局限,无法适应目前日益膨胀数据传输需求.</li><li><strong>光子</strong>在传输过程中信号较稳定,传输容量大,硅基光子器件与CMOS工艺兼容、抗辐射多种优点.</li></ol><h2 id="概念补充知识">概念补充知识:</h2><p>光传递信号的机理是波阻抗变换:</p><p>光耦合结构常用两种耦合方式:</p><ol type="1"><li>端面水平耦合结构</li><li>片上垂直耦合结构</li></ol><p>耦合器根据光纤和硅芯片的相对位置，一般可分为两种。一种是平面耦合，也称边缘耦合(EdgeCoupler)，指光纤和硅芯片位于同一平面，位于芯片的侧面，通过锥形波导等方式进行耦合。另一种是垂直耦合，也就是所讲的光栅耦合(GratingCoupler，GC)。</p><h2 id="光栅耦合器的基本原理">光栅耦合器的基本原理</h2><p>入射介值和出射介值折射率分别为<span class="math inline">\(n_1\)</span>,<span class="math inline">\(n_2\)</span></p><p>光栅矢量为<span class="math inline">\(K\)</span>,大小为<span class="math inline">\(K=\frac{2\pi}{p}\)</span>,其中<span class="math inline">\(p\)</span>为光栅的周期</p><p>入射光波矢为<span class="math inline">\(K_{in}\)</span>,大小为<span class="math inline">\(K_{in}=\frac{2\pi n_1}{\lambda}\)</span>,<span class="math inline">\(\lambda\)</span>为光波长</p><p><span class="math inline">\(K_{in}\)</span>在z方向的投影分量为<span class="math inline">\(K_{in,z}\)</span>,大小为<span class="math inline">\(K_{in,z}=K_{in}sinθ\)</span>,</p><p><span class="math inline">\(θ\)</span>为入射光波矢偏离光栅法线的角度</p><p>此时各级衍射光波矢在z方向的投影可以通过<strong>布拉格条件</strong>表示为:<span class="math display">\[K_{m,z}= K_{in,z}+mK (m = 0;±1;±2;±3;···)\]</span></p><p><span class="math inline">\(m\)</span>表示表示衍射级数.该公式的<strong>具体含义</strong>为:</p><p>m级衍射波矢在z方向的投影分量等于入射波矢在z方向的投影分量与m倍的光栅矢量之和</p><p>因此通过衍射波矢在z方向的投影分量大小和衍射波矢本身的大小可以求出各级衍射波矢的衍射角度</p><figure><img src="/2022/01/28/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95/image-20220128233206175.png" alt="image-20220128233206175"><figcaption aria-hidden="true">image-20220128233206175</figcaption></figure><p>光栅有效折射率<span class="math inline">\(n_{eff}\)</span>的确定</p><p>根据下式: <span class="math display">\[n_{eff}=dc*n_{eff1}+(1-dc)*n_{eff2}\]</span> <span class="math inline">\(dc\)</span>(dutycycl)表示占空比,<span class="math inline">\(n_{eff1}\)</span>表示未刻蚀部分波导的有效折射率,</p><p><span class="math inline">\(n_{eff2}\)</span>表示刻蚀部分波导的有效折射率</p><figure><img src="/2022/01/28/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89%E7%A1%85%E5%9F%BA%E5%85%89%E6%A0%85%E8%80%A6%E5%90%88%E5%99%A8%E7%9A%84%E7%A0%94%E7%A9%B6%E8%BF%9B%E5%B1%95/v2-1bc6c7450bd56b4ba82f7d2deff1feaf_1440w-16445018082512.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h2 id="影响光栅耦合器性能的几个因素">影响光栅耦合器性能的几个因素</h2><ul><li><p><strong>光的偏振方向</strong> TM mode和TEmode在波导中传输时具有不同的有效折射率，因此光栅只能耦合特定偏振方向的光。</p></li><li><p><strong>光栅周期</strong>根据之前公式，光栅周期越大，衍射的中心波长(刚好满足Bragg条件的波长)也越大。</p></li><li><p><strong>占空比</strong>占空比越大，有效折射率也越大(宽波导较窄波导，更接近与自由传播，因此有效折射率大)，因此中心波长也越大。</p></li><li><p><strong>刻蚀深度</strong> 刻蚀深度能影响 <span class="math inline">\(n_{eff2}\)</span>，刻蚀越深,<span class="math inline">\(n_{eff2}\)</span> 越小，<span class="math inline">\(n_{eff}\)</span>也减小，导致中心波长减小。</p></li><li><p><strong>入射角</strong> 入射角越大，中心波长越小。</p></li></ul><h2 id="复习内容">复习内容:</h2><p><strong>光栅衍射</strong></p><p>光栅常量:<span class="math inline">\(d=a+b\)</span></p><p>光栅方程(明纹):$dsin=k,k=0,1,2... $</p><p>缺级<span class="math inline">\(k=k&#39;\frac{d}{a},k&#39;=1,2,3...\)</span></p><p>缺级原因:</p><p>这是因为光经过光栅时，不仅每个狭缝发生衍射，而且缝与缝之间的衍射光波相遇叠加时还要发生干涉。</p><p><img src="https://pic3.zhimg.com/v2-784d1fc87b16e6e9b1ef650e8cf59d52_r.jpg"></p><p>倾斜入射的光栅公式：<span class="math inline">\(d(sin\varphi\pmsin\theta)=\pm k \lambda ,k=0,1,2...\)</span></p><p><img src="https://pic3.zhimg.com/v2-4acdc49dce0568d8a730eb39bde23dd6_r.jpg"></p><p><strong>布拉格衍射</strong></p><p>布拉格衍射公式:<span class="math inline">\(2dsin\theta=n\lambda\)</span>,其中n是衍射级数，d是不同层之间的间距。</p><p><img src="https://pica.zhimg.com/v2-cf4027c27f3cb78def1f71228e91a262_r.jpg?source=1940ef5c"></p>]]></content>
    
    
    <categories>
      
      <category>大创文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大创</tag>
      
      <tag>文献</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多元函数概念及极限</title>
    <link href="/2022/01/24/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%9E%81%E9%99%90/"/>
    <url>/2022/01/24/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%9E%81%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h1 id="多元函数概念">多元函数概念</h1><h2 id="平面点集">平面点集</h2><p><span class="math display">\[(x, y) \text { 的 全 体 } R^{2}=\{(x, y) \mid x \in R, y \in R\}\]</span></p><p>定义：坐标平面上具有某种性质的点集</p><p><span class="math display">\[\varepsilon =\left\{ \left( x,y \right) |x^2+y^2&lt;1 \right\}\]</span></p><p><span class="math display">\[\varepsilon =\left\{ \left( x,y \right) |x^2+y^2=1 \right\}\]</span></p><h2 id="邻域">邻域</h2><p><span class="math display">\[设 P_{0}\left(x_{0}, y_{0}\right) 是 xoy 平面一个点， \delta ,\\\quadu\left(p_{0}, \delta\right)=\left\{\left|pp_{0}\right|&lt;\delta\right\} 为 p_{0}的邻域\]</span></p><h2 id="section"></h2><h2 id="点概念">点概念</h2><p>内点：</p><ol type="1"><li>$ PE $</li><li>P周边所有的点都属于E。</li></ol><p>外点：</p><ol type="1"><li><span class="math inline">\(P\notin E\)</span></li><li>P周边所有的点都不属于E。</li></ol><p>边界点：</p><ol type="1"><li><p>P周边和P自己既有属于E的，又有不属于E的。</p></li><li><p>所有边界点的集合记作<span class="math inline">\(\partial\text{E}\)</span></p></li></ol><p>聚点: 对于任给的<span class="math inline">\(\delta&gt;0\)</span>,点p的去心邻域<span class="math inline">\(\stackrel{\circ}{U}\left(P_{0},\delta\right)\)</span> 内总有E中的点，那么称P是E的聚点。</p><h1 id="函数极限">函数极限</h1><p>设二元函数<span class="math inline">\(f(p)=f(x,y)\)</span>的定义域为<span class="math inline">\(D\)</span>,<span class="math inline">\(P_{0}\left(x_{0}, y_{0}\right)\)</span>是<span class="math inline">\(D\)</span>的聚点，如果存在常数<span class="math inline">\(A\)</span>，对于任意给定的正数<span class="math inline">\(\epsilon\)</span> ,总存在正数<span class="math inline">\(\delta\)</span>，使得当点<span class="math inline">\(p(x,y)∈D∩\stackrel{\circ}{U}\left(P_{0},\delta\right)\)</span>都有 <span class="math display">\[|f(P)-A|=|f(x, y)-A|&lt;\varepsilon\]</span></p><p>成立，那么就称常数<span class="math inline">\(A\)</span>为函数<span class="math inline">\(f(x,y)\)</span>当<span class="math inline">\((x,y)\rightarrow(x_0,y_0)\)</span>的极限,记作</p><p><span class="math display">\[\lim _{(x, y) \rightarrow\left(x_{0}, y_{0}\right)} f(x, y)=A\]</span></p><h1 id="函数连续">函数连续</h1><p>定义: 设二元函数<span class="math inline">\(f(P)=f(x,y)\)</span>的定义域为<span class="math inline">\(D\)</span> ,<span class="math inline">\(P_{0}\left(x_{0}, y_{0}\right)\)</span>为<span class="math inline">\(D\)</span>的聚点,且<span class="math inline">\(P_{0}\in D\)</span> 如果 <span class="math display">\[\lim _{(x, y) \rightarrow\left(x_{0}, y_{0}\right)} f(x, y)=f(x_0,y_0)\]</span> 那么称函数<span class="math inline">\(f(x,y)\)</span>在点<span class="math inline">\(p_0(x_0,y_0)\)</span>连续.</p>]]></content>
    
    
    <categories>
      
      <category>高数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown 基本语法</title>
    <link href="/2022/01/24/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/01/24/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="标题语法">标题语法</h1><figure class="highlight clean"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs clean">#     一级标题<br>##    二级标题<br>###   三级标题<br></code></pre></td></tr></table></figure><h1 id="段落语法">段落语法</h1><p>创建段落时使用空白行将多行文本分隔</p><p>不要使用空格或锁进府缩进段落</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">I really like using Markdown.<br><br>I think I&#x27;ll use <span class="hljs-keyword">it</span> <span class="hljs-keyword">to</span> format all <span class="hljs-keyword">of</span> <span class="hljs-keyword">my</span> documents <span class="hljs-keyword">from</span> now <span class="hljs-keyword">on</span>.<br></code></pre></td></tr></table></figure><h1 id="换行语法">换行语法</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">&lt;<span class="hljs-keyword">br&gt; </span> <span class="hljs-keyword">or </span> 两个或多个空格进行换行<br></code></pre></td></tr></table></figure><h1 id="强调语法">强调语法</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">设置粗体<br>两个星号或两个下划线<br><span class="hljs-strong">**内容**</span>（推荐使用）<br><span class="hljs-emphasis">__内容__</span><br><br>设置斜体<br>一个星号或一个下划线<br><span class="hljs-strong">*内容*</span>（推荐使用）<br><span class="hljs-emphasis">_内容_</span><br><br>同时添加粗体和斜体<br>三个星号或三个下划线<br></code></pre></td></tr></table></figure><h1 id="引用语法">引用语法</h1><p>创建块引用，在段落前添加一个<code>&gt;</code>符号</p><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code>符号。</p><p>实际效果：</p><blockquote><blockquote><p>嵌套效果：</p></blockquote></blockquote><h1 id="列表语法">列表语法</h1><blockquote><p>分为有序列表和无序列表</p></blockquote><p><strong>有序列表</strong><code>序号</code>加上<code>.</code>和<code>空格</code> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1.</span> <span class="hljs-keyword">first</span><br><span class="hljs-number">2.</span> <span class="hljs-keyword">second</span><br><span class="hljs-number">3.</span> <span class="hljs-keyword">third</span><br></code></pre></td></tr></table></figure> 1.first 2. second 3. third</p><p><strong>无序列表</strong></p><p>语法：<code>*</code>、<code>+</code>、<code>-</code></p><ul><li>first</li><li>second</li><li>third<ul><li>indented</li></ul></li></ul><h1 id="代码语法">代码语法</h1><p>将单词表示为代码，将单词包裹在反引号<code>`</code>中<strong>代码块</strong> 将代码块的每一行缩进至少四个空格或一个制表符</p><div class="code-wrapper"><pre><code class="hljs">代码块</code></pre></div><p>​</p><h1 id="分隔线">分隔线</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">***</span><br><span class="hljs-section">---</span><br><span class="hljs-emphasis">_____</span>___<br></code></pre></td></tr></table></figure><h1 id="链接语法">链接语法</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">这是一个链接 <span class="hljs-selector-attr">[Markdown语法]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//markdown.com.cn)。</span><br></code></pre></td></tr></table></figure><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址"超链接title")</code></p><h1 id="图片语法">图片语法</h1><p>插入图片Markdown语法代码：<code>![图片alt](图片链接"图片title")</code>。</p><figure><img src="/2022/01/24/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/学习\blog\themes\fluid\source\img\page.jpg" alt="page"><figcaption aria-hidden="true">page</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
